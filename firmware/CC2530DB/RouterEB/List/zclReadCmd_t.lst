###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             30/Oct/2015  18:14:24 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\zclReadCmd_t.cpp           #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\zclReadCmd_t.cpp -D        #
#                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D      #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz --eec++   #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\zclReadCmd_t.lst         #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\zclReadCmd_t.r51          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zcl\zclReadCmd_t.cpp
      1          
      2          
      3          #include "zclReadCmd_t.h"
      4          #include "OSAL_Memory.h"
      5          #include "hal_defs.h"
      6          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      7          zclReadCmd_t::zclReadCmd_t(zclParseCmd_t * pCmd){
   \                     ??zclReadCmd_t:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
      8          	uint8 *pBuf = pCmd->pData;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
      9          
     10          	attrID = (uint16 *)osal_mem_alloc( pCmd->dataLen );
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   8582..       MOV     ?V2,DPL
   \   000021   8583..       MOV     ?V3,DPH
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   A3           INC     DPTR
   \   000029   8582..       MOV     ?V4,DPL
   \   00002C   8583..       MOV     ?V5,DPH
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000037   85..82       MOV     DPL,?V2
   \   00003A   85..83       MOV     DPH,?V3
   \   00003D   EA           MOV     A,R2
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EB           MOV     A,R3
   \   000041   F0           MOVX    @DPTR,A
     11          	uint8 i;
     12          	numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000042   85..82       MOV     DPL,?V4
   \   000045   85..83       MOV     DPH,?V5
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   C3           CLR     C
   \   00004D   13           RRC     A
   \   00004E   E8           MOV     A,R0
   \   00004F   13           RRC     A
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   F0           MOVX    @DPTR,A
     13          	for ( i = 0; i < numAttr; i++ ) {
   \   000055   7D00         MOV     R5,#0x0
   \   000057   803A         SJMP    ??zclReadCmd_t_1
     14          		attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclReadCmd_t_2:
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F8           MOV     R0,A
   \   000064   E4           CLR     A
   \   000065   C8           XCH     A,R0
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   E4           CLR     A
   \   00006A   39           ADDC    A,R1
   \   00006B   FB           MOV     R3,A
   \   00006C   ED           MOV     A,R5
   \   00006D   25E0         ADD     A,0xE0 /* A   */
   \   00006F   F8           MOV     R0,A
   \   000070   E4           CLR     A
   \   000071   33           RLC     A
   \   000072   F9           MOV     R1,A
   \   000073   85..82       MOV     DPL,?V2
   \   000076   85..83       MOV     DPH,?V3
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   28           ADD     A,R0
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   39           ADDC    A,R1
   \   00007F   8C82         MOV     DPL,R4
   \   000081   F583         MOV     DPH,A
   \   000083   EA           MOV     A,R2
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   EB           MOV     A,R3
   \   000087   F0           MOVX    @DPTR,A
     15          		pBuf += 2;
   \   000088   E5..         MOV     A,?V0
   \   00008A   2402         ADD     A,#0x2
   \   00008C   F5..         MOV     ?V0,A
   \   00008E   5002         JNC     ??zclReadCmd_t_3
   \   000090   05..         INC     ?V1
     16          	}
   \                     ??zclReadCmd_t_3:
   \   000092   0D           INC     R5
   \                     ??zclReadCmd_t_1:
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   ED           MOV     A,R5
   \   00009A   C3           CLR     C
   \   00009B   98           SUBB    A,R0
   \   00009C   40BB         JC      ??zclReadCmd_t_2
     17          }
   \   00009E   EE           MOV     A,R6
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   FB           MOV     R3,A
   \   0000A2                REQUIRE ?Subroutine0
   \   0000A2                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     18          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          BufferData zclReadCmd_t::getBufferFromAttribute() {
   \                     ??getBufferFromAttribute:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
     20          	uint16 dataLen = numAttr * 2; // Attribute ID
     21          	BufferData buffer(dataLen);
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   25E0         ADD     A,0xE0 /* A   */
   \   000014   F5..         MOV     ?V4,A
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F5..         MOV     ?V5,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2402         ADD     A,#0x2
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   35..         ADDC    A,?V1
   \   000021   F9           MOV     R1,A
   \   000022   88..         MOV     ?V2,R0
   \   000024   89..         MOV     ?V3,R1
   \   000026                ; Setup parameters for call to function operator new[](unsigned int)
   \   000026   AA..         MOV     R2,?V4
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
   \   00002D   85..82       MOV     DPL,?V2
   \   000030   85..83       MOV     DPH,?V3
   \   000033   EA           MOV     A,R2
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   EB           MOV     A,R3
   \   000037   F0           MOVX    @DPTR,A
   \   000038   85..82       MOV     DPL,?V0
   \   00003B   85..83       MOV     DPH,?V1
   \   00003E   E5..         MOV     A,?V4
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E5..         MOV     A,?V5
   \   000044   F0           MOVX    @DPTR,A
     22          	if ( buffer.isValid() ){
   \   000045   85..82       MOV     DPL,?V2
   \   000048   85..83       MOV     DPH,?V3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   E8           MOV     A,R0
   \   000051   49           ORL     A,R1
   \   000052   6040         JZ      ??getBufferFromAttribute_1
     23          		uint8 i;
     24          
     25          		uint8 *pBuf = buffer.data;
     26              	for (i = 0; i < numAttr; i++) {
   \   000054   75..00       MOV     ?V2,#0x0
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   AC82         MOV     R4,DPL
   \   00005E   AD83         MOV     R5,DPH
   \   000060   8026         SJMP    ??getBufferFromAttribute_2
     27                		*pBuf++ = LO_UINT16( attrID[i] );
   \                     ??getBufferFromAttribute_3:
   \   000062   AA..         MOV     R2,?V2
   \   000064   EA           MOV     A,R2
   \   000065   2A           ADD     A,R2
   \   000066   FA           MOV     R2,A
   \   000067   E4           CLR     A
   \   000068   33           RLC     A
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   A882         MOV     R0,DPL
   \   000076   A983         MOV     R1,DPH
     28                		*pBuf++ = HI_UINT16( attrID[i] );
   \   000078   12....       LCALL   ?Subroutine1 & 0xFFFF
     29              	}
   \                     ??CrossCallReturnLabel_1:
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   08           INC     R0
   \   000084   A983         MOV     R1,DPH
   \   000086   05..         INC     ?V2
   \                     ??getBufferFromAttribute_2:
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FA           MOV     R2,A
   \   00008E   E5..         MOV     A,?V2
   \   000090   C3           CLR     C
   \   000091   9A           SUBB    A,R2
   \   000092   40CE         JC      ??getBufferFromAttribute_3
     30          	}
     31          	return buffer;
   \                     ??getBufferFromAttribute_1:
   \   000094   02....       LJMP    ?Subroutine0 & 0xFFFF
     32          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2A           ADD     A,R2
   \   000006   F5..         MOV     ?V0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3B           ADDC    A,R3
   \   00000B   85..82       MOV     DPL,?V0
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??new zclReadCmd_t?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    `??new zclReadCmd_t`

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadCmd_t?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??zclReadCmd_t

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getBufferFromAttribute?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??getBufferFromAttribute

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant zclReadCmd_t &zclReadCmd_t::new zclReadCmd_t(zclParseCmd_t *)
   \                     `??new zclReadCmd_t`:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function operator new(unsigned int)
   \   000009   7A03         MOV     R2,#0x3
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??operator new?relay`; Banked call to: operator new(unsigned int)
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6009         JZ      `??new zclReadCmd_t_1`
   \   000014                ; Setup parameters for call to function zclReadCmd_t::zclReadCmd_t(zclParseCmd_t *)
   \   000014   EE           MOV     A,R6
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   12....       LCALL   ??zclReadCmd_t?relay ; Banked call to: zclReadCmd_t::zclReadCmd_t(zclParseCmd_t *)
   \   00001B   8004         SJMP    `??new zclReadCmd_t_2`
   \                     `??new zclReadCmd_t_1`:
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B00         MOV     R3,#0x0
   \                     `??new zclReadCmd_t_2`:
   \   000021   7F02         MOV     R7,#0x2
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   zclReadCmd_t::getBufferFromAttribute()
        0     14   -> operator new[](unsigned int)
      0     10   zclReadCmd_t::new zclReadCmd_t(zclParseCmd_t *)
        0     10   -> operator new(unsigned int)
        0     10   -> zclReadCmd_t::zclReadCmd_t(zclParseCmd_t *)
      1     24   zclReadCmd_t::zclReadCmd_t(zclParseCmd_t *)
        0     14   -> osal_mem_alloc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??getBufferFromAttribute?relay
       6  ??new zclReadCmd_t?relay
       6  ??zclReadCmd_t?relay
       5  ?Subroutine0
      17  ?Subroutine1
     151  zclReadCmd_t::getBufferFromAttribute()
      38  zclReadCmd_t::new zclReadCmd_t(zclParseCmd_t *)
     162  zclReadCmd_t::zclReadCmd_t(zclParseCmd_t *)

 
 373 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
 
 391 bytes of CODE memory

Errors: none
Warnings: none

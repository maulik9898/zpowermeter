###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             04/Nov/2015  21:35:19 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Source\clusters\ClusterIdentify.c               #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Source\clusters\ClusterIdentify.c -D SECURE=0   #
#                          -D OSC32K_CRYSTAL_INSTALLED=FALSE -D               #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ClusterIdentify.lst      #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ClusterIdentify.r51       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Source\clusters\ClusterIdentify.c
      1          /**************************************************************************************************
      2            Filename:       ClusterIdentify.cpp
      3          
      4            Autorh:  Paolo Achdjia
      5            Created: 28/10/2014
      6          
      7          **************************************************************************************************/
      8          
      9          #include "OSAL.h"
     10          #include "OSAL_PwrMgr.h"
     11          #include "hal_led.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     12          
     13          #include "ClusterIdentify.h"
     14          
     15          #define ON_TIME 600
     16          #define OFF_TIME 400
     17          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          static uint16 identifyTime=0;
   \                     identifyTime:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     19          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static byte mainAppTaskId;
   \                     mainAppTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     21          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static uint8  onOff;
   \                     onOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     23          
     24          __sfr __no_init volatile struct  {
     25          	unsigned char DIR0_7: 1;
     26          	unsigned char DIR0_6: 1;
     27          	unsigned char DIR0_5: 1;
     28          	unsigned char DIR0_4: 1;
     29          	unsigned char DIR0_3: 1;
     30          	unsigned char DIR0_2: 1;
     31          	unsigned char DIR0_1: 1;
     32          	unsigned char DIR0_0: 1;

   \                                 In  segment SFR_AN, at 0xfd
     33          } @ 0xFD;
   \                     _A_DIR0_7:
   \   000000                DS 1
     34          
     35          __sfr __no_init volatile struct  {
     36          	unsigned char P0SEL_7: 1;
     37          	unsigned char P0SEL_6: 1;
     38          	unsigned char P0SEL_5: 1;
     39          	unsigned char P0SEL_4: 1;
     40          	unsigned char P0SEL_3: 1;
     41          	unsigned char P0SEL_2: 1;
     42          	unsigned char P0SEL_1: 1;
     43          	unsigned char P0SEL_0: 1;

   \                                 In  segment SFR_AN, at 0xf3
     44          } @ 0xF3;
   \                     _A_P0SEL_7:
   \   000000                DS 1
     45          
     46          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          void identifyClusterReadAttribute(zclAttrRec_t * attribute){
   \                     identifyClusterReadAttribute:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     48          	if (attribute == NULL){
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6040         JZ      ??identifyClusterReadAttribute_0
     49          		return;
     50          	}
     51          	
     52          	if (attribute->attr.attrId == ATTRID_IDENTIFY_TIME){
   \   000008   EA           MOV     A,R2
   \   000009   240A         ADD     A,#0xa
   \   00000B   F8           MOV     R0,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F9           MOV     R1,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FD           MOV     R5,A
   \   00001A   EC           MOV     A,R4
   \   00001B   4D           ORL     A,R5
   \   00001C   7023         JNZ     ??identifyClusterReadAttribute_1
     53          		attribute->attr.dataType = ZCL_DATATYPE_UINT16;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   7421         MOV     A,#0x21
   \   000028   F0           MOVX    @DPTR,A
     54          		attribute->attr.dataPtr = (void *)&identifyTime;
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   74..         MOV     A,#identifyTime & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(identifyTime >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
     55          		attribute->attr.status = ZCL_STATUS_SUCCESS;
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   E4           CLR     A
   \   00003F   8006         SJMP    ??identifyClusterReadAttribute_2
     56          	} else {
     57          		attribute->attr.status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??identifyClusterReadAttribute_1:
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   7486         MOV     A,#-0x7a
   \                     ??identifyClusterReadAttribute_2:
   \   000047   F0           MOVX    @DPTR,A
     58          	}
     59          }
   \                     ??identifyClusterReadAttribute_0:
   \   000048   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     60          void identifyClusterWriteAttribute(ZclWriteAttribute_t * writeAttribute){
   \                     identifyClusterWriteAttribute:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     61          	if (writeAttribute == NULL){
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6028         JZ      ??identifyClusterWriteAttribute_0
     62          		
     63          		return;
     64          	}
     65          	
     66          	if(writeAttribute->attrId == ATTRID_IDENTIFY_TIME){
   \   000008   EA           MOV     A,R2
   \   000009   2406         ADD     A,#0x6
   \   00000B   F8           MOV     R0,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F9           MOV     R1,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FB           MOV     R3,A
   \   000018   EA           MOV     A,R2
   \   000019   4B           ORL     A,R3
   \   00001A   700D         JNZ     ??identifyClusterWriteAttribute_1
     67          		identifyTime = *(uint16 *)writeAttribute;
   \   00001C   90....       MOV     DPTR,#identifyTime
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
     68          		writeAttribute->status=ZCL_STATUS_SUCCESS;
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   8006         SJMP    ??identifyClusterWriteAttribute_2
     69          	} else {
     70          		writeAttribute->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??identifyClusterWriteAttribute_1:
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   7486         MOV     A,#-0x7a
   \                     ??identifyClusterWriteAttribute_2:
   \   00002F   F0           MOVX    @DPTR,A
     71          	}
     72          }
   \                     ??identifyClusterWriteAttribute_0:
   \   000030   80..         SJMP    ?Subroutine0
     73          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void identifyInit(byte taskId){
   \                     identifyInit:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     75          	DIR0_1 = 1;
   \   000004   43FD40       ORL     0xfd,#0x40
     76           	P0SEL_1 = 0;
   \   000007   53F3BF       ANL     0xf3,#0xbf
     77           	P0_1 = 0;
   \   00000A   C281         CLR     0x80.1
     78          	mainAppTaskId = taskId;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#mainAppTaskId
   \   000010   F0           MOVX    @DPTR,A
     79          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                REQUIRE _A_DIR0_7
   \   000011                REQUIRE _A_P0SEL_7
   \   000011                REQUIRE _A_P0
   \   000011                ; // Fall through to label ?Subroutine0
     80          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          uint16 identifyLoop(uint16 events){
   \                     identifyLoop:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     82          	if (onOff){
   \   000009   90....       MOV     DPTR,#onOff
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6020         JZ      ??identifyLoop_0
     83          		osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, OFF_TIME );
   \   00000F                ; Setup parameters for call to function osal_start_timerEx
   \   00000F   90....       MOV     DPTR,#__Constant_190
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   7A01         MOV     R2,#0x1
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#mainAppTaskId
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
     84          		onOff=0;
   \   000026   90....       MOV     DPTR,#onOff
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
     85          		P0_0 = 1;
   \   00002B   D280         SETB    0x80.0
   \   00002D   8041         SJMP    ??identifyLoop_1
     86          	} else {
     87          		onOff=1;
   \                     ??identifyLoop_0:
   \   00002F   7401         MOV     A,#0x1
   \   000031   F0           MOVX    @DPTR,A
     88          		if ( identifyTime > 0 ){
   \   000032   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000035   602D         JZ      ??identifyLoop_2
     89              		identifyTime--;
     90          		}
     91              	if (identifyTime>0){
   \   000037   90....       MOV     DPTR,#identifyTime
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   24FF         ADD     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   18           DEC     R0
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   34FF         ADDC    A,#-0x1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   F9           MOV     R1,A
   \   000045   E8           MOV     A,R0
   \   000046   49           ORL     A,R1
   \   000047   601B         JZ      ??identifyLoop_2
     92          			osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, ON_TIME );
   \   000049                ; Setup parameters for call to function osal_start_timerEx
   \   000049   90....       MOV     DPTR,#__Constant_258
   \   00004C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B00         MOV     R3,#0x0
   \   000053   90....       MOV     DPTR,#mainAppTaskId
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
     93          			osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_HOLD);
   \   000060                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   000060   7A01         MOV     R2,#0x1
   \   000062   8002         SJMP    ??identifyLoop_3
     94          			P0_0 = 0;
     95          		} else{
     96          			osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_CONSERVE);
   \                     ??identifyLoop_2:
   \   000064                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   000064   7A00         MOV     R2,#0x0
   \                     ??identifyLoop_3:
   \   000066   90....       MOV     DPTR,#mainAppTaskId
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
     97          			P0_0 = 0;
   \   00006E   C280         CLR     0x80.0
     98          		}
     99          	}
    100              return ( events ^ IDENTIFY_TIMEOUT_EVT );
   \                     ??identifyLoop_1:
   \   000070   EE           MOV     A,R6
   \   000071   6401         XRL     A,#0x1
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   7F01         MOV     R7,#0x1
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00007B                REQUIRE _A_P0
    101          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#identifyTime
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   49           ORL     A,R1
   \   00000A   22           RET
    102          
    103          
    104          /*********************************************************************
    105           * @fn      processIdentifyTimeChange
    106           *
    107           * @brief   Called to process any change to the IdentifyTime attribute.
    108           *
    109           * @param   none
    110           *
    111           * @return  none
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          void processIdentifyTimeChange( void ){
   \                     processIdentifyTimeChange:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    114          	if ( identifyTime > 0 ) {
   \   000004   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000007   6022         JZ      ??processIdentifyTimeChange_0
    115          		osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, ON_TIME );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   90....       MOV     DPTR,#__Constant_258
   \   00000C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#mainAppTaskId
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    116          		onOff=1;
   \   000020   90....       MOV     DPTR,#onOff
   \   000023   7401         MOV     A,#0x1
   \   000025   F0           MOVX    @DPTR,A
    117          		P0_0 = 1;
   \   000026   D280         SETB    0x80.0
    118          		osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_HOLD);
   \   000028                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   000028   FA           MOV     R2,A
   \   000029   800E         SJMP    ??processIdentifyTimeChange_1
    119          	}  else {
    120          		osal_stop_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT );
   \                     ??processIdentifyTimeChange_0:
   \   00002B                ; Setup parameters for call to function osal_stop_timerEx
   \   00002B   7A01         MOV     R2,#0x1
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   90....       MOV     DPTR,#mainAppTaskId
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
    121          		osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_CONSERVE);
   \   000037                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   000037   7A00         MOV     R2,#0x0
   \                     ??processIdentifyTimeChange_1:
   \   000039   90....       MOV     DPTR,#mainAppTaskId
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
    122          	}
    123          }
   \   000041   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000044                REQUIRE _A_P0
    124          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          ZStatus_t processIdentifyClusterServerCommands( zclIncoming_t *pInMsg ){
   \                     processIdentifyClusterServerCommands:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    126          
    127          	switch(pInMsg->hdr.commandID){
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6006         JZ      ??processIdentifyClusterServerCommands_0
   \   000013   14           DEC     A
   \   000014   602A         JZ      ??processIdentifyClusterServerCommands_1
   \   000016   02....       LJMP    ??processIdentifyClusterServerCommands_2 & 0xFFFF
    128          	case COMMAND_IDENTIFY:
    129          		identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??processIdentifyClusterServerCommands_0:
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   EA           MOV     A,R2
   \   000034   90....       MOV     DPTR,#identifyTime
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
    130          		processIdentifyTimeChange();
   \   00003B                ; Setup parameters for call to function processIdentifyTimeChange
   \   00003B   12....       LCALL   ??processIdentifyTimeChange?relay; Banked call to: processIdentifyTimeChange
    131          		return ZSuccess;
   \   00003E   807A         SJMP    ??processIdentifyClusterServerCommands_3
    132          	case COMMAND_IDENTIFY_QUERY:
    133          		if ( identifyTime > 0 ) {
   \                     ??processIdentifyClusterServerCommands_1:
   \   000040   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000043   6075         JZ      ??processIdentifyClusterServerCommands_3
    134          			zcl_SendCommand( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    135                                   COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    136                                   ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 0, pInMsg->hdr.transSeqNum, 2, (uint8 *) &identifyTime );
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FE           MOV     R6,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FF           MOV     R7,A
   \   00004E                ; Setup parameters for call to function zcl_SendCommand
   \   00004E   75....       MOV     ?V0,#identifyTime & 0xff
   \   000051   75....       MOV     ?V1,#(identifyTime >> 8) & 0xff
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..02       MOV     ?V0,#0x2
   \   00005C   75..00       MOV     ?V1,#0x0
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F5..         MOV     ?V0,A
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   E4           CLR     A
   \   000077   F5..         MOV     ?V0,A
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   75..01       MOV     ?V0,#0x1
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0,#0x0
   \   000093   78..         MOV     R0,#?V0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   7C03         MOV     R4,#0x3
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   EE           MOV     A,R6
   \   00009D   2406         ADD     A,#0x6
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2414         ADD     A,#0x14
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   0000B1   740B         MOV     A,#0xb
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
    137          			return  ZCL_STATUS_CMD_HAS_RSP;
   \   0000B6   79FF         MOV     R1,#-0x1
   \   0000B8   8006         SJMP    ??processIdentifyClusterServerCommands_4
    138          	    } else {
    139          			return ZSuccess;
   \                     ??processIdentifyClusterServerCommands_3:
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   8002         SJMP    ??processIdentifyClusterServerCommands_4
    140          		}
    141          	default:
    142              	return ZFailure;   // Error ignore the command
   \                     ??processIdentifyClusterServerCommands_2:
   \   0000BE   7901         MOV     R1,#0x1
   \                     ??processIdentifyClusterServerCommands_4:
   \   0000C0   7F02         MOV     R7,#0x2
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
    143          	}
    144          }
    145          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          ZStatus_t processIdentifyClusterClientCommands( zclIncoming_t *pInMsg ){
   \                     processIdentifyClusterClientCommands:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    147          	if ( pInMsg->hdr.commandID != COMMAND_IDENTIFY_QUERY_RSP )
    148          		return ZFailure;
    149          
    150          	return ZFailure;
   \   000000   7901         MOV     R1,#0x1
   \   000002   02....       LJMP    ?BRET
    151          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_190:
   \   000000   90010000     DD 400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??identifyClusterReadAttribute?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    identifyClusterReadAttribute

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??identifyClusterWriteAttribute?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    identifyClusterWriteAttribute

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??identifyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    identifyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??identifyLoop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    identifyLoop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??processIdentifyTimeChange?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    processIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??processIdentifyClusterServerCommands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    processIdentifyClusterServerCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??processIdentifyClusterClientCommands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    processIdentifyClusterClientCommands
    152          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   identifyClusterReadAttribute
      2      0   identifyClusterWriteAttribute
      2      0   identifyInit
      0     13   identifyLoop
        0      9   -> osal_pwrmgr_task_state
        0     13   -> osal_start_timerEx
      0      0   processIdentifyClusterClientCommands
      0     21   processIdentifyClusterServerCommands
        0     10   -> processIdentifyTimeChange
        0     21   -> zcl_SendCommand
      2     14   processIdentifyTimeChange
        2      0   -> osal_pwrmgr_task_state
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??identifyClusterReadAttribute?relay
       6  ??identifyClusterWriteAttribute?relay
       6  ??identifyInit?relay
       6  ??identifyLoop?relay
       6  ??processIdentifyClusterClientCommands?relay
       6  ??processIdentifyClusterServerCommands?relay
       6  ??processIdentifyTimeChange?relay
       7  ?Subroutine0
      11  ?Subroutine1
       1  _A_DIR0_7
       1  _A_P0
       1  _A_P0SEL_7
       4  __Constant_190
       4  __Constant_258
      74  identifyClusterReadAttribute
      50  identifyClusterWriteAttribute
      17  identifyInit
     123  identifyLoop
       2  identifyTime
       1  mainAppTaskId
       1  onOff
       5  processIdentifyClusterClientCommands
     197  processIdentifyClusterServerCommands
      68  processIdentifyTimeChange

 
 552 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
   4 bytes in segment XDATA_Z
 
 594 bytes of CODE  memory
   0 bytes of CONST memory (+ 8 bytes shared)
   0 bytes of DATA  memory (+ 3 bytes shared)
   4 bytes of XDATA memory

Errors: none
Warnings: none

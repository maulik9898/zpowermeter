///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            15/Oct/2015  21:15:46 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterTemperatureMeasurement /
//                          .c                                                /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterTemperatureMeasurement /
//                          .c -D SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE  /
//                          -D HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D   /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ClusterTemperatureMeas /
//                          urement.s51                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ClusterTemperatureMeasurement

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?SS_SHR
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??clusterTemperatureMeasurementeInit?relay
        FUNCTION ??clusterTemperatureMeasurementeInit?relay,0203H
        FUNCTION ??read?relay,0203H
        FUNCTION ??readSyncronus?relay,0203H
        PUBLIC ??readTemperature?relay
        FUNCTION ??readTemperature?relay,0203H
        PUBLIC ??readTemperatureLoop?relay
        FUNCTION ??readTemperatureLoop?relay,0203H
        FUNCTION ??reset?relay,0203H
        FUNCTION ??write?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1SEL
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CNT
        PUBWEAK T3CTL
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_P1
        PUBWEAK _A_T3_mode
        PUBWEAK _A_TIMIF
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_2ee
        PUBLIC clusterTemperatureMeasurementeInit
        FUNCTION clusterTemperatureMeasurementeInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC decTemperatureValue
        PUBLIC maxTemperatureValue
        PUBLIC minTemperatureValue
        FUNCTION `read`,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION readSyncronus,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC readTemperature
        FUNCTION readTemperature,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC readTemperatureLoop
        FUNCTION readTemperatureLoop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION reset,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC tempTemperatureValue
        PUBLIC temperatureValue
        PUBLIC toleranceTemperature
        FUNCTION `write`,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_pwrmgr_task_state SYMBOL "osal_pwrmgr_task_state"
??osal_pwrmgr_task_state?relay SYMBOL "?relay", osal_pwrmgr_task_state
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
clusterTemperatureMeasurementeInit SYMBOL "clusterTemperatureMeasurementeInit"
??clusterTemperatureMeasurementeInit?relay SYMBOL "?relay", clusterTemperatureMeasurementeInit
readTemperature     SYMBOL "readTemperature"
??readTemperature?relay SYMBOL "?relay", readTemperature
readTemperatureLoop SYMBOL "readTemperatureLoop"
??readTemperatureLoop?relay SYMBOL "?relay", readTemperatureLoop

        EXTERN ??osal_pwrmgr_task_state?relay
        FUNCTION ??osal_pwrmgr_task_state?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN osal_pwrmgr_task_state
        FUNCTION osal_pwrmgr_task_state,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN temperatureSensorTaskID

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Source\clusters\ClusterTemperatureMeasurement.c
//    1 /**************************************************************************************************
//    2 
//    3  DESCRIPTION:
//    4   Temperature Measurement Cluster
//    5 
//    6  CREATED: 12/11/2014, by Paolo Achdjian
//    7 
//    8  FILE: ClusterTemperatureMeasurement.c
//    9 
//   10 RESOURCES:
//   11  P1.2 Generaio I/O
//   12  T3
//   13 
//   14 ***************************************************************************************************/
//   15 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0caH
// unsigned char volatile __sfr T3CNT
T3CNT:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d8H
// union <unnamed> volatile __sfr _A_TIMIF
_A_TIMIF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   16 #include "hal_mcu.h"
//   17 #include "ZDApp.h"
//   18 #include "hal_led.h"
//   19 #include "ClusterTemperatureMeasurement.h"
//   20 #include "OSAL_PwrMgr.h"
//   21 
//   22 
//   23 __sfr __no_init volatile union {
//   24 	struct {
//   25 		unsigned char T3_mode: 2;
//   26 		unsigned char T3_clear: 1;
//   27 		unsigned char T3_OVFIM: 1;
//   28 		unsigned char T3_start: 1;
//   29 		unsigned char T3_div: 3;
//   30 	};

        ASEGN SFR_AN:DATA:NOROOT,0cbH
//   31 } @ 0xCB;
_A_T3_mode:
        DATA8
        DS 1
//   32 
//   33 __sfr __no_init volatile union {
//   34 	struct {
//   35 		unsigned char T3CCTL0_cap: 2;
//   36 		unsigned char T3CCTL0_mode: 1;
//   37 		unsigned char T3CCTL0_cmp: 3;
//   38 		unsigned char T3CCTL0_im: 1;
//   39 	};
//   40 } @ 0xCC;
//   41 
//   42 __sfr __no_init volatile union {
//   43 	struct {
//   44 		unsigned char RFIE: 1;
//   45 		unsigned char P2IE: 1;
//   46 		unsigned char UTX0IE: 1;
//   47 		unsigned char UTX11E: 1;
//   48 		unsigned char P11E: 1;
//   49 		unsigned char WDTIE: 1;
//   50 	};
//   51 } @ 0x9A
//   52 
//   53 
//   54 #define WAIT_FOR_480us 	T3_start=0;		T3CC0=240;T3_clear=1; T3_start=1;
//   55 #define WAIT_FOR_2us T3_start=0;		T3CC0=8; T3_clear=1;T3_start=1;
//   56 #define WAIT_FOR_1us T3_start=0;		T3CC0=4; T3_clear=1;T3_start=1;
//   57 #define WAIT_FOR_12us T3_start=0;		T3CC0=48; T3_clear=1;T3_start=1;
//   58 #define WAIT_FOR_47us T3_start=0;	T3_clear=1;	T3CC0=188; T3_start=1;
//   59 #define WAIT_FOR_58us T3_start=0;	T3_clear=1;	T3CC0=232; T3_start=1;
//   60 #define WAIT_FOR_60us T3_start=0;	T3_clear=1;	T3CC0=240; T3_start=1;
//   61 #define WAIT_FOR_1ms T3_start=0;	T3_clear=1;	T3CC0=250; T3_start=1;
//   62 //#define WAIT_FOR_600us st(T3CTL &=0xE0;T3CTL |= 0x04;T3CC1=150;T3CTL &= 0xFB;)
//   63 #define WAIT_FOR_300us st(T3CTL &=0xE0; T3CTL |= 0x04;T3CC1=75;T3CTL &= 0xFB;)
//   64 #define WAIT_FOR_4us st(T3CTL &=0xE0; T3CTL |= 0x04;T3CC1=1;T3CTL &= 0xFB;)
//   65 #define WAIT_FOR_8us st(T3CTL &=0xE0; T3CTL |= 0x04;T3CC1=2;T3CTL &= 0xFB;)
//   66 #define WAIT_FOR_16us st(T3CTL &=0xE0; T3CTL |= 0x04;T3CC1=4;T3CTL &= 0xFB;)
//   67 
//   68 #define ENABLE_P1EN st( IEN2 |= 0x10;)
//   69 #define DISABLE_P1EN st(IEN2 &= 0xEF;);
//   70 #define ENABLE_P1_2_INT  st(IEN2 |= 0x10; P1IEN |= 0x04;)
//   71 #define DISABLE_P1_2_INT  st(P1IEN &= 0xFB;)
//   72 #define P1_2_RISING_INT st(PICTL &= 0xFD;)
//   73 #define P1_2_FALLING_INT st(PICTL |= 0x02;)
//   74 
//   75 #define STOP_T3 st(T3CNT &= 0xEF;);
//   76 #define START_T3 st(T3CNT |= 0x10;);
//   77 #define P1_LOW st(P1DIR  |= 0x04;);
//   78 #define P1_HIGH st(P1DIR &= 0xFB;);
//   79 
//   80 #define ENABLE_T3_CH0_INT  T3CCTL0_im = 1;
//   81 #define DISABLE_T3_CH0_INT T3CCTL0_im=0;
//   82 #define RESET_TM3   st(T3CNT=0;)
//   83 #define RESET_T3CH0_INT st(T3CH0IF=0;)
//   84 #define RESET_P1_2_INT st(P1IF=0; P1IFG =0;);
//   85 
//   86 
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   88 int16 temperatureValue=0;
temperatureValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   89 int16 tempTemperatureValue;
tempTemperatureValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   90 int16 decTemperatureValue;
decTemperatureValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   91 int16 minTemperatureValue=-10;
minTemperatureValue:
        DATA16
        DS 2
        REQUIRE `?<Initializer for minTemperatureValue>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 int16 maxTemperatureValue=80;
maxTemperatureValue:
        DATA16
        DS 2
        REQUIRE `?<Initializer for maxTemperatureValue>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   93 uint16 toleranceTemperature=10;
toleranceTemperature:
        DATA16
        DS 2
        REQUIRE `?<Initializer for toleranceTemperature>`
        REQUIRE __INIT_XDATA_I
//   94 
//   95 
//   96 static void write(unsigned char byte);
//   97 static uint8  read(void);
//   98 static void readSyncronus(void);
//   99 static uint8 reset(void);
//  100 static void finalizeReadTemp(void);
//  101 
//  102 
//  103 extern byte temperatureSensorTaskID;
//  104 extern devStates_t devState;
//  105 
//  106 #define TIME_READ_ms 10*1000
//  107 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void clusterTemperatureMeasurementeInit(void) {
clusterTemperatureMeasurementeInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function clusterTemperatureMeasurementeInit
        CODE
        FUNCALL clusterTemperatureMeasurementeInit, readTemperature
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL clusterTemperatureMeasurementeInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  109 	P1SEL &=0xFB;
        LCALL   ?Subroutine2 & 0xFFFF
//  110 	P1DIR &= 0xFB;
//  111 	P1_2 = 0;
//  112 	
//  113 //	T3CTL = 0x04 | 0xA0; //Clear counter. interrupt disable. Compare mode. 4us at cycle
//  114 //	T3CCTL0 = 0x4; // compare mode
//  115 //	T3CCTL1 = 0;
//  116 //	P0DIR=0xFF;
//  117 //	P0=0;
//  118 	readTemperature();
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function readTemperature
        LCALL   ??readTemperature?relay; Banked call to: readTemperature
          CFI EndBlock cfiBlock0
//  119 	osal_start_timerEx( temperatureSensorTaskID, READ_TEMP_EVT, TIME_READ_ms );
        ; Setup parameters for call to function osal_start_timerEx
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0
//  120 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#temperatureSensorTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//  121 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  122 uint16 readTemperatureLoop(uint16 events) {
readTemperatureLoop:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function readTemperatureLoop
        CODE
        FUNCALL readTemperatureLoop, readTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, `write`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, `write`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, `read`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, `read`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperatureLoop, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  123 	if (events & READ_TEMP_EVT){
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??readTemperatureLoop_0
//  124 		readTemperature();
        ; Setup parameters for call to function readTemperature
        LCALL   ??readTemperature?relay; Banked call to: readTemperature
//  125 		return ( events ^ READ_TEMP_EVT );
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??readTemperatureLoop_1 & 0xFFFF
//  126 	};
//  127 	if (events & END_READ_TEMP_EVT){
??readTemperatureLoop_0:
        MOV     A,R6
        ANL     A,#0x8
        JNZ     $+5
        LJMP    ??readTemperatureLoop_2 & 0xFFFF
//  128 		finalizeReadTemp();
        ; Setup parameters for call to function reset
        LCALL   ??reset?relay        ; Banked call to: reset
        ; Setup parameters for call to function write
        MOV     R1,#-0x34
        LCALL   ??write?relay        ; Banked call to: write
        ; Setup parameters for call to function write
        MOV     R1,#-0x42
        LCALL   ??write?relay        ; Banked call to: write
        ; Setup parameters for call to function read
        LCALL   ??read?relay         ; Banked call to: read
        MOV     A,R1
        MOV     ?V0,A
        ; Setup parameters for call to function read
        LCALL   ??read?relay         ; Banked call to: read
        MOV     A,?V0
        MOV     DPTR,#tempTemperatureValue
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#tempTemperatureValue
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     B,#0x64
        MUL     AB
        MOV     DPTR,#decTemperatureValue
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,B
        MOVX    @DPTR,A
        MOV     DPTR,#tempTemperatureValue + 1
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x4
        MOV     R0,#?V0
        LCALL   ?SS_SHR
        MOV     A,?V0
        MOV     B,#0x64
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        MOV     B,#0x64
        MOV     A,?V1
        MUL     AB
        ADD     A,R0
        MOV     ?V1,A
        MOV     DPTR,#decTemperatureValue
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,#0x4
        MOV     R0,#?V2
        LCALL   ?SS_SHR
        MOV     A,?V0
        ADD     A,?V2
        MOV     R0,A
        MOV     A,?V1
        ADDC    A,?V3
        MOV     R1,A
        MOV     DPTR,#temperatureValue
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,#0x0
        MOV     DPTR,#temperatureSensorTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
//  129 		return ( events ^ END_READ_TEMP_EVT );
        MOV     A,R6
        XRL     A,#0x8
??readTemperatureLoop_1:
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
//  130 	}
//  131 	return events;
??readTemperatureLoop_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  132 }
//  133 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 void readTemperature(void) {
readTemperature:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function readTemperature
        CODE
        FUNCALL readTemperature, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperature, readSyncronus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readTemperature, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  135 	osal_pwrmgr_task_state(temperatureSensorTaskID, PWRMGR_HOLD);
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,#0x1
        MOV     DPTR,#temperatureSensorTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
//  136 #if 1
//  137 	readSyncronus();
        ; Setup parameters for call to function readSyncronus
        LCALL   ??readSyncronus?relay; Banked call to: readSyncronus
//  138 //	osal_pwrmgr_task_state(temperatureSensorTaskID, PWRMGR_CONSERVE);
//  139 #else
//  140 	readAsyncronus();
//  141 #endif
//  142 	osal_start_timerEx( temperatureSensorTaskID, READ_TEMP_EVT, TIME_READ_ms );
        ; Setup parameters for call to function osal_start_timerEx
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  143 }
//  144 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 void readSyncronus(void) {
readSyncronus:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function readSyncronus
        CODE
        FUNCALL readSyncronus, reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readSyncronus, `write`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readSyncronus, `write`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readSyncronus, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  146 
//  147 	P1SEL &=0xFB;
        LCALL   ?Subroutine2 & 0xFFFF
//  148 	P1DIR &= 0xFB;
//  149 	P1_2 = 0;
//  150 	
//  151 	T3CTL = 0x04 | 0xA0; //Clear counter. interrupt disable. Compare mode. 4us at cycle
??CrossCallReturnLabel_3:
        MOV     0xcb,#-0x5c
//  152 	T3CCTL0 = 0x4; // compare mode
        MOV     0xcc,#0x4
//  153 	T3CCTL1 = 0;
        MOV     0xce,#0x0
//  154 	P0DIR=0xFF;
        MOV     0xfd,#-0x1
//  155 		
//  156 	DISABLE_P1_2_INT;
        ANL     0x8d,#0xfb
//  157 	T3IF=0;
        CLR     0xc0.3
//  158 	T3CH0IF=0;
        CLR     0xd8.1
//  159 	st(T3IE=0;);
        CLR     0xb8.3
//  160 	if (reset()==0)
        ; Setup parameters for call to function reset
        LCALL   ??reset?relay        ; Banked call to: reset
        MOV     A,R1
        JZ      ??readSyncronus_0
//  161 		return;
//  162 	
//  163 	write(0xCC);
        ; Setup parameters for call to function write
        MOV     R1,#-0x34
        LCALL   ??write?relay        ; Banked call to: write
//  164 	write(0x44);
        ; Setup parameters for call to function write
        MOV     R1,#0x44
        LCALL   ??write?relay        ; Banked call to: write
//  165 	
//  166 	osal_start_timerEx( temperatureSensorTaskID, END_READ_TEMP_EVT, 750 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2ee
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#temperatureSensorTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  167 	
//  168 	/*
//  169 	T3_div=7;
//  170 	for(uint16 i=0; i < 750; i++){
//  171 		T3_clear=1;
//  172 		while(T3CNT < 250);
//  173 		
//  174 	}
//  175 	finalizeReadTemp();
//  176 	*/
//  177 }
??readSyncronus_0:
        LJMP    ??Subroutine3_0 & 0xFFFF
          CFI EndBlock cfiBlock5
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        REQUIRE T3CTL
        REQUIRE T3CCTL0
        REQUIRE T3CCTL1
        REQUIRE P0DIR
        REQUIRE P1IEN
        REQUIRE _A_IRCON
        REQUIRE _A_TIMIF
        REQUIRE _A_IEN1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function clusterTemperatureMeasurementeInit
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function readSyncronus
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-7
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        ANL     0xf4,#0xfb
        ANL     0xfe,#0xfb
        CLR     0x90.2
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  178 
//  179 void finalizeReadTemp(void){
//  180 	uint8 low;
//  181 	uint8 heigh;
//  182 	reset();
//  183 	write(0xCC);
//  184 	write(0xBE);
//  185 	low = read();
//  186 	heigh = read();
//  187 	
//  188 	tempTemperatureValue = BUILD_UINT16(low,heigh);
//  189 	temperatureValue = (tempTemperatureValue >> 4)*100;
//  190 	decTemperatureValue = (tempTemperatureValue & 0x0F)*100;
//  191 	
//  192 	temperatureValue += decTemperatureValue >> 4;
//  193 	osal_pwrmgr_task_state(temperatureSensorTaskID, PWRMGR_CONSERVE);
//  194 }
//  195 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  196 uint8 reset() {
reset:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function reset
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  197 	P1_LOW;
        ORL     0xfe,#0x4
//  198 	T3_div=6;
        MOV     A,0xcb
        ANL     A,#0x1f
        ORL     A,#0xc0
        MOV     0xcb,A
//  199 	T3_clear=1;
        ORL     0xcb,#0x4
//  200 	T3_start=1;
        ORL     0xcb,#0x10
//  201 	while(T3CNT < 244);
??reset_0:
        MOV     A,0xca
        CLR     C
        SUBB    A,#-0xc
        JC      ??reset_0
//  202 	P1_HIGH;
        ANL     0xfe,#0xfb
//  203 	T3_clear=1;
        ORL     0xcb,#0x4
//  204 	while(T3CNT < 30);
??reset_1:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x1e
        JC      ??reset_1
//  205 	T3_clear=1;
        ORL     0xcb,#0x4
//  206 	while(T3CNT < 240  && P1_2 == 1);
??reset_2:
        MOV     A,0xca
        CLR     C
        SUBB    A,#-0x10
        JNC     ??reset_3
        MOV     C,0x90.2
        JC      ??reset_2
//  207 	
//  208 	if (P1_2 == 1){
??reset_3:
        MOV     C,0x90.2
        JNC     ??reset_4
//  209 		return 0;
        MOV     R1,#0x0
        SJMP    ??reset_5
//  210 	}
//  211 	while(P1_2==0);
??reset_4:
        MOV     C,0x90.2
        JNC     ??reset_4
//  212 	return 1;
        MOV     R1,#0x1
??reset_5:
        LJMP    ?BRET
          CFI EndBlock cfiBlock9
        REQUIRE P1DIR
        REQUIRE _A_T3_mode
        REQUIRE T3CNT
        REQUIRE _A_P1
//  213 }
//  214 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  215 void write(unsigned char byte){
`write`:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function `write`
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  216 	uint8 bit=8;
        MOV     R0,#0x8
//  217 	T3_start = 0;
        LCALL   ?Subroutine1 & 0xFFFF
//  218 	T3_div=5;
//  219 	T3_start=1;
//  220 	T3_clear=1;
//  221 	while(T3CNT < 2);
??CrossCallReturnLabel_0:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x2
        JC      ??CrossCallReturnLabel_0
//  222 
//  223 	while(bit > 0){
//  224 		P1_LOW;
??write_0:
        ORL     0xfe,#0x4
//  225 		T3_clear=1;
        ORL     0xcb,#0x4
//  226 		if (byte & 0x1){
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??write_1
//  227 			while(T3CNT < 10);
??write_2:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0xa
        JNC     ??write_3
        SJMP    ??write_2
//  228 		} else {
//  229 			while(T3CNT < 60);
??write_1:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x3c
        JC      ??write_1
//  230 		}
//  231 		
//  232 		P1_HIGH;
??write_3:
        ANL     0xfe,#0xfb
//  233 		while(T3CNT < 62);
??write_4:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x3e
        JC      ??write_4
//  234 		byte = byte >> 1;
        MOV     A,R1
        CLR     C
        RRC     A
        MOV     R1,A
//  235 		bit--;
//  236 	}
        DEC     R0
        MOV     A,R0
        JNZ     ??write_0
//  237 	
//  238 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
        REQUIRE _A_T3_mode
        REQUIRE T3CNT
        REQUIRE P1DIR
//  239 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 uint8  read(void) {
`read`:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function `read`
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  241 	uint8 bit=8;
        MOV     R0,#0x8
//  242 	uint8 result=0;
        MOV     R1,#0x0
//  243 	
//  244 	T3_start = 0;
        LCALL   ?Subroutine1 & 0xFFFF
//  245 	T3_div=5;
//  246 	T3_start=1;
//  247 	
//  248 	T3_clear=1;
//  249 	while(T3CNT < 2);
??CrossCallReturnLabel_1:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x2
        JC      ??CrossCallReturnLabel_1
//  250 	while(bit > 0){
//  251 		P1_LOW;
??read_0:
        ORL     0xfe,#0x4
//  252 		T3_clear=1;
        ORL     0xcb,#0x4
//  253 		while(T3CNT < 2);
??read_1:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x2
        JC      ??read_1
//  254 		P1_HIGH;
        ANL     0xfe,#0xfb
//  255 		T3_clear=1;
        ORL     0xcb,#0x4
//  256 		while(T3CNT < 10);
??read_2:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0xa
        JC      ??read_2
//  257 		result >>= 1;
        MOV     A,R1
        CLR     C
        RRC     A
        MOV     R1,A
//  258 		if (P1_2){
        MOV     C,0x90.2
        JNC     ??read_3
//  259 			result |= 0x80;
        SETB    0xE0 /* A   */.7
        MOV     R1,A
//  260 		}
//  261 		T3_clear=1;
??read_3:
        ORL     0xcb,#0x4
//  262 		while(T3CNT < 30);
??read_4:
        MOV     A,0xca
        CLR     C
        SUBB    A,#0x1e
        JC      ??read_4
//  263 		bit--;
//  264 	}
        DEC     R0
        MOV     A,R0
        JNZ     ??read_0
//  265 	return result;
        LJMP    ?BRET
          CFI EndBlock cfiBlock11
        REQUIRE _A_T3_mode
        REQUIRE T3CNT
        REQUIRE P1DIR
        REQUIRE _A_P1
//  266 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function `write`
          CFI Conditional ??CrossCallReturnLabel_0
          CFI CFA_SP SP+-5
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function `read`
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond13) CFA_SP SP+-5
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        ANL     0xcb,#0xef
        MOV     A,0xcb
        ANL     A,#0x1f
        ORL     A,#0xa0
        MOV     0xcb,A
        ORL     0xcb,#0x10
        ORL     0xcb,#0x4
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for minTemperatureValue>`:
        DATA16
        DW -10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for maxTemperatureValue>`:
        DATA16
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for toleranceTemperature>`:
        DATA16
        DW 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2ee:
        DD 750

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??clusterTemperatureMeasurementeInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    clusterTemperatureMeasurementeInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??readTemperatureLoop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    readTemperatureLoop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??readTemperature?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    readTemperature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??readSyncronus?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    readSyncronus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??reset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    reset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??write?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    `write`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??read?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    `read`

        END
//  267 
//  268 
//  269 
// 
// 521 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  13 bytes in segment SFR_AN
//   6 bytes in segment XDATA_I
//   6 bytes in segment XDATA_ID
//   8 bytes in segment XDATA_ROM_C
//   6 bytes in segment XDATA_Z
// 
// 569 bytes of CODE  memory
//   0 bytes of CONST memory (+  8 bytes shared)
//   0 bytes of DATA  memory (+ 13 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none

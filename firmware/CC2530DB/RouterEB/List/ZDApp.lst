###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             14/Oct/2015  08:15:22 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDApp.c                    #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDApp.c -D SECURE=0 -D     #
#                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE    #
#                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN -D  #
#                          NV_INIT -D xNV_RESTORE -D MULTICAST_ENABLED=FALSE  #
#                          -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D          #
#                          FEATURE_SYSTEM_STATS -lC                           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ZDApp.lst                #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ZDApp.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          
     91          
     92          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     93            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     94          #endif
     95          
     96          #if !defined( BEACON_REQUEST_DELAY )
     97            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     98          #endif
     99          
    100          #if !defined( BEACON_REQ_DELAY_MASK )
    101            #define BEACON_REQ_DELAY_MASK       0x007F
    102          #endif
    103          
    104          #define MAX_RESUME_RETRY            3
    105          
    106          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    107          
    108          // Beacon Order Settings (see NLMEDE.h)
    109          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    110          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    111          
    112          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    113          // Additional counts to add to the frame counter when restoring from NV
    114          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    115          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    116          #endif
    117          
    118          // Leave control bits
    119          #define ZDAPP_LEAVE_CTRL_INIT 0
    120          #define ZDAPP_LEAVE_CTRL_SET  1
    121          #define ZDAPP_LEAVE_CTRL_RA   2
    122          
    123          // Address Manager Stub Implementation
    124          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    125          
    126          
    127          #if !defined ZDO_NV_SAVE_RFDs
    128          #define ZDO_NV_SAVE_RFDs  TRUE
    129          #endif
    130          
    131          // Delay time before updating NWK NV data to force fewer writes during high activity.
    132          #if ZDO_NV_SAVE_RFDs
    133          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    134          #else
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    136          #endif
    137          
    138          // Timeout value to process New Devices
    139          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    140          
    141          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    142          #if !defined MAX_PENDING_BIND_REQ
    143          #define MAX_PENDING_BIND_REQ 3
    144          #endif
    145          #endif
    146          
    147          /******************************************************************************
    148           * TYPEDEFS
    149           */
    150          typedef struct
    151          {
    152            void   *next;
    153            uint16 shortAddr;
    154            uint16 timeDelta;
    155          } ZDAppNewDevice_t;
    156          
    157          /*********************************************************************
    158           * GLOBAL VARIABLES
    159           */
    160          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    161          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    162          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    172          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    174          
    175          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    179          
    180          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    182          #endif
    183          
    184          /*********************************************************************
    185           * EXTERNAL VARIABLES
    186           */
    187          
    188          /*********************************************************************
    189           * EXTERNAL FUNCTIONS
    190           */
    191          
    192          /*********************************************************************
    193           * LOCAL FUNCTIONS
    194           */
    195          
    196          void ZDApp_NetworkStartEvt( void );
    197          void ZDApp_DeviceAuthEvt( void );
    198          void ZDApp_SaveNetworkStateEvt( void );
    199          
    200          uint8 ZDApp_ReadNetworkRestoreState( void );
    201          uint8 ZDApp_RestoreNetworkState( void );
    202          void ZDAppDetermineDeviceType( void );
    203          void ZDApp_InitUserDesc( void );
    204          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    205          void ZDApp_ProcessNetworkJoin( void );
    206          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    207          uint8 ZDApp_RestoreNwkKey( void );
    208          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    209          
    210          void ZDApp_SecInit( uint8 state );
    211          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    212          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    213          
    214          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    215          
    216          void ZDApp_ResetTimerStart( uint16 delay );
    217          void ZDApp_ResetTimerCancel( void );
    218          void ZDApp_LeaveCtrlInit( void );
    219          void ZDApp_LeaveCtrlSet( uint8 ra );
    220          uint8 ZDApp_LeaveCtrlBypass( void );
    221          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    222          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    223                                  uint8 removeChildren );
    224          void ZDApp_NodeProfileSync( uint8 stackProfile );
    225          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    226          void ZDApp_RegisterCBs( void );
    227          void ZDApp_InitZdoCBFunc(void);
    228          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    229          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    230          void ZDApp_InitPendingBind( void );
    231          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    232          void ZDApp_AgeOutPendingBindEntry( void );
    233          #endif
    234          
    235          /*********************************************************************
    236           * LOCAL VARIABLES
    237           */
    238          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    239          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    240          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    241          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    242          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    243          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    244          devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    245          
    246          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    248            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    249                                  // to parent. Set to make the device do an Orphan scan.
    250          #else
    251            // Set the default to coodinator
    252            devStartModes_t devStartMode = MODE_HARD;
    253          #endif
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    256          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    257          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    258          {
    259            ZDO_EP,
    260            &ZDAppTaskID,
    261            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    262            (afNetworkLatencyReq_t)0            // No Network Latency req
    263          };
    264          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    265          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    266          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    267          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    268          
    269          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */
    270          static uint8 zdappHoldKeys;
                              ^
Warning[Pe177]: variable "zdappHoldKeys" was declared but never referenced
    271          
    272          /*********************************************************************
    273           * @fn      ZDApp_Init
    274           *
    275           * @brief   ZDApp Initialization function.
    276           *
    277           * @param   task_id - ZDApp Task ID
    278           *
    279           * @return  None
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    282          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    283            // Save the task ID
    284            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    285          
    286            // Initialize the ZDO global device short address storage
    287            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    288            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    289            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
    290          
    291            // Initialize ZDO items and setup the device - type of device to create.
    292            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL   ??ZDO_Init?relay     ; Banked call to: ZDO_Init
    293          
    294            // Register the endpoint description with the AF
    295            // This task doesn't have a Simple description, but we still need
    296            // to register the endpoint.
    297            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    298          
    299          #if defined( ZDO_USERDESC_RESPONSE )
    300            ZDApp_InitUserDesc();
    301          #endif // ZDO_USERDESC_RESPONSE
    302          
    303            ZDOInitDevice( 0 );
   \   000026                ; Setup parameters for call to function ZDOInitDevice
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
    304            
    305            // Initialize the ZDO callback function pointers zdoCBFunc[]
    306            ZDApp_InitZdoCBFunc();
   \   00002D                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00002D   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay; Banked call to: ZDApp_InitZdoCBFunc
    307          
    308            ZDApp_RegisterCBs();
   \   000030                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000030   12....       LCALL   ??ZDApp_RegisterCBs?relay; Banked call to: ZDApp_RegisterCBs
    309          
    310          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    311          #if defined ( REFLECTOR )
    312            ZDApp_InitPendingBind();
   \   000033                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000033   12....       LCALL   ??ZDApp_InitPendingBind?relay; Banked call to: ZDApp_InitPendingBind
    313          #endif
    314          #endif
    315          } /* ZDApp_Init() */
   \   000036   02....       LJMP    ??Subroutine42_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    316          
    317          /*********************************************************************
    318           * @fn          ZDApp_SecInit
    319           *
    320           * @brief       ZDApp initialize security.
    321           *
    322           * @param       state - device initialization state
    323           *
    324           * @return      none
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    327          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    328            uint8 zgPreConfigKey[SEC_KEY_LEN];
    329          
    330            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    331            {
    332              // Set the Trust Center bit
    333              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    334            }
    335          
    336            // Initialize ZigBee Device Security Manager
    337            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   ??ZDSecMgrInit?relay ; Banked call to: ZDSecMgrInit
    338          
    339            if ( ZG_SECURE_ENABLED )
    340            {
    341              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    342              {
    343                nwkFrameCounter = 0;
    344          
    345                if( _NIB.nwkKeyLoaded == FALSE )
    346                {
    347                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    348                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    349                  {
    350                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    351                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    352                      SSP_SwitchNwkKey( 0 );
    353          
    354                      // clear local copy of key
    355                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    356                  }
    357                }
    358              }
    359          
    360              // clean the new devices list when Security module is initialized
    361              if ( ZDApp_NewDeviceList != NULL )
    362              {
    363                ZDAppNewDevice_t *pNewDeviceNext;
    364          
    365                while ( ZDApp_NewDeviceList )
    366                {
    367                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    368                  osal_mem_free( ZDApp_NewDeviceList );
    369                  ZDApp_NewDeviceList = pNewDeviceNext;
    370                }
    371              }
    372            }
    373          }
   \   000008   02....       LJMP    ??Subroutine42_0 & 0xFFFF
    374          
    375          /*********************************************************************
    376           * @fn      ZDApp_event_loop()
    377           *
    378           * @brief   Main event loop for Zigbee device objects task. This function
    379           *          should be called at periodic intervals.
    380           *
    381           * @param   task_id - Task ID
    382           * @param   events  - Bitmap of events
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    387          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    388            uint8 *msg_ptr;
    389          
    390            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7038         JNZ     ??ZDApp_event_loop_0
    391            {
    392              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    393              {
    394                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    395          
    396                // Release the memory
    397                osal_msg_deallocate( msg_ptr );
    398              }
    399          
    400              // Return unprocessed events
    401              return (events ^ SYS_EVENT_MSG);
    402            }
    403          
    404            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   504C         JNC     ??ZDApp_event_loop_1
    405            {
    406              // Initialize apps and start the network
    407              devState = DEV_INIT;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    408              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A10         MOV     R2,#0x10
   \   000019   FB           MOV     R3,A
   \   00001A   90....       MOV     DPTR,#ZDAppTaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    409          
    410              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    411                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000022                ; Setup parameters for call to function ZDO_StartDevice
   \   000022   7C0F         MOV     R4,#0xf
   \   000024   7B0F         MOV     R3,#0xf
   \   000026   90....       MOV     DPTR,#devStartMode
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   5407         ANL     A,#0x7
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??ZDO_StartDevice?relay; Banked call to: ZDO_StartDevice
    412          
    413              // Return unprocessed events
    414              return (events ^ ZDO_NETWORK_INIT);
   \   000035   EE           MOV     A,R6
   \   000036   6401         XRL     A,#0x1
   \   000038   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    415            }
   \                     ??ZDApp_event_loop_3:
   \   00003B                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00003B   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay; Banked call to: ZDApp_ProcessOSALMsg
   \   00003E                ; Setup parameters for call to function osal_msg_deallocate
   \   00003E   AA..         MOV     R2,?V0
   \   000040   AB..         MOV     R3,?V1
   \   000042   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   000045                ; Setup parameters for call to function osal_msg_receive
   \   000045   90....       MOV     DPTR,#ZDAppTaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00004D   8A..         MOV     ?V0,R2
   \   00004F   8B..         MOV     ?V1,R3
   \   000051   EA           MOV     A,R2
   \   000052   45..         ORL     A,?V1
   \   000054   70E5         JNZ     ??ZDApp_event_loop_3
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   6480         XRL     A,#0x80
   \   00005B   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    416          
    417            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_1:
   \   00005E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6004         JZ      ??ZDApp_event_loop_5
   \   000064   6401         XRL     A,#0x1
   \   000066   7039         JNZ     ??ZDApp_event_loop_6
    418            {
    419              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_5:
   \   000068   EE           MOV     A,R6
   \   000069   5402         ANL     A,#0x2
   \   00006B   6008         JZ      ??ZDApp_event_loop_7
    420              {
    421                ZDApp_NetworkStartEvt();
   \   00006D                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00006D   12....       LCALL   ??ZDApp_NetworkStartEvt?relay; Banked call to: ZDApp_NetworkStartEvt
    422          
    423                // Return unprocessed events
    424                return (events ^ ZDO_NETWORK_START);
   \   000070   EE           MOV     A,R6
   \   000071   6402         XRL     A,#0x2
   \   000073   805B         SJMP    ??ZDApp_event_loop_2
    425              }
    426          
    427              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_7:
   \   000075   EE           MOV     A,R6
   \   000076   5420         ANL     A,#0x20
   \   000078   6027         JZ      ??ZDApp_event_loop_6
    428              {
    429                if ( nwkStatus == ZSuccess )
   \   00007A   90....       MOV     DPTR,#nwkStatus
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7010         JNZ     ??ZDApp_event_loop_8
    430                {
    431                  if ( devState == DEV_END_DEVICE )
   \   000080   90....       MOV     DPTR,#devState
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6405         XRL     A,#0x5
   \   000086   7003         JNZ     ??ZDApp_event_loop_9
    432                    devState = DEV_ROUTER;
   \   000088   7406         MOV     A,#0x6
   \   00008A   F0           MOVX    @DPTR,A
    433          
    434                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_9:
   \   00008B                ; Setup parameters for call to function osal_pwrmgr_device
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
    435                }
    436                else
    437                {
    438                  // remain as end device
    439                }
    440                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_8:
   \   000090                ; Setup parameters for call to function osal_set_event
   \   000090   7A10         MOV     R2,#0x10
   \   000092   7B00         MOV     R3,#0x0
   \   000094   90....       MOV     DPTR,#ZDAppTaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    441          
    442                // Return unprocessed events
    443                return (events ^ ZDO_ROUTER_START);
   \   00009C   EE           MOV     A,R6
   \   00009D   6420         XRL     A,#0x20
   \   00009F   802F         SJMP    ??ZDApp_event_loop_2
    444              }
    445            }
    446          
    447            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   5410         ANL     A,#0x10
   \   0000A4   602E         JZ      ??ZDApp_event_loop_10
    448            {
    449              ZDO_UpdateNwkStatus( devState );
   \   0000A6                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000A6   90....       MOV     DPTR,#devState
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??ZDO_UpdateNwkStatus?relay; Banked call to: ZDO_UpdateNwkStatus
    450          
    451              // At start up, do one MTO route discovery if the device is a concentrator
    452              if ( zgConcentratorEnable == TRUE )
   \   0000AE   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6401         XRL     A,#0x1
   \   0000B4   7017         JNZ     ??ZDApp_event_loop_11
    453              {
    454                // Start next event
    455                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000B6                ; Setup parameters for call to function osal_start_timerEx
   \   0000B6   90....       MOV     DPTR,#__Constant_64
   \   0000B9   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000BC   7A00         MOV     R2,#0x0
   \   0000BE   7B08         MOV     R3,#0x8
   \   0000C0   90....       MOV     DPTR,#NWK_TaskID
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F9           MOV     R1,A
   \   0000C5   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000C8   7404         MOV     A,#0x4
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
    456              }
    457          
    458              // Return unprocessed events
    459              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_11:
   \   0000CD   EE           MOV     A,R6
   \   0000CE   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   8031         SJMP    ??ZDApp_event_loop_4
    460            }
    461          
    462            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_10:
   \   0000D4   EE           MOV     A,R6
   \   0000D5   5408         ANL     A,#0x8
   \   0000D7   6006         JZ      ??ZDApp_event_loop_12
    463            {
    464              // User defined logic
    465          
    466              // Return unprocessed events
    467              return (events ^ ZDO_COMMAND_CNF);
   \   0000D9   EE           MOV     A,R6
   \   0000DA   6408         XRL     A,#0x8
   \   0000DC   FA           MOV     R2,A
   \   0000DD   802D         SJMP    ??ZDApp_event_loop_13
    468            }
    469          
    470            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   0000DF   EF           MOV     A,R7
   \   0000E0   5401         ANL     A,#0x1
   \   0000E2   6005         JZ      ??ZDApp_event_loop_14
    471            {
    472              ZDApp_SaveNetworkStateEvt();
    473          
    474              // Return unprocessed events
    475              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000E4   EF           MOV     A,R7
   \   0000E5   6401         XRL     A,#0x1
   \   0000E7   801C         SJMP    ??ZDApp_event_loop_4
    476            }
    477          
    478            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_14:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   5404         ANL     A,#0x4
   \   0000EC   600A         JZ      ??ZDApp_event_loop_15
    479            {
    480          #ifdef ZBA_FALLBACK_NWKKEY
    481              if ( devState == DEV_END_DEVICE_UNAUTH )
    482              {
    483                ZDSecMgrFallbackNwkKey();
    484              }
    485              else
    486          #endif
    487              {
    488                // Set the NV startup option to force a "new" join.
    489                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000EE                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000EE   7A02         MOV     R2,#0x2
   \   0000F0   79FF         MOV     R1,#-0x1
   \   0000F2   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
    490          
    491                // The device has been in the UNAUTH state, so reset
    492                // Note: there will be no return from this call
    493                SystemResetSoft();
   \   0000F5                ; Setup parameters for call to function Onboard_soft_reset
   \   0000F5   12....       LCALL   Onboard_soft_reset & 0xFFFF
    494              }
    495            }
    496          
    497          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    498            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_15:
   \   0000F8   EF           MOV     A,R7
   \   0000F9   5410         ANL     A,#0x10
   \   0000FB   600B         JZ      ??ZDApp_event_loop_16
    499            {
    500          #if defined ( REFLECTOR )
    501              ZDApp_AgeOutPendingBindEntry();
   \   0000FD                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000FD   12....       LCALL   ??ZDApp_AgeOutPendingBindEntry?relay; Banked call to: ZDApp_AgeOutPendingBindEntry
    502          #endif
    503              // Return unprocessed events
    504              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   000100   EE           MOV     A,R6
   \   000101   FA           MOV     R2,A
   \   000102   EF           MOV     A,R7
   \   000103   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   000105   FB           MOV     R3,A
   \   000106   8004         SJMP    ??ZDApp_event_loop_13
    505            }
    506          #endif
    507          
    508            if ( ZG_SECURE_ENABLED )
    509            {
    510              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    511            }
    512            else
    513            {
    514              // Discard or make more handlers
    515              return 0;
   \                     ??ZDApp_event_loop_16:
   \   000108   7A00         MOV     R2,#0x0
   \   00010A   7B00         MOV     R3,#0x0
    516            }
   \                     ??ZDApp_event_loop_13:
   \   00010C   02....       LJMP    ??Subroutine46_0 & 0xFFFF
    517          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          
    519          /*********************************************************************
    520           * @fn      ZDApp_ProcessSecEvent()
    521           *
    522           * @brief   Process incoming security events.
    523           *
    524           * @param   task_id - Task ID
    525           * @param   events  - Bitmap of events
    526           *
    527           * @return  none
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    531            (void)task_id;  // Intentionally unreferenced parameter
    532          
    533            if ( ZSTACK_ROUTER_BUILD )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6007         JZ      ??ZDApp_ProcessSecEvent_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    534            {
    535              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000016   EE           MOV     A,R6
   \   000017   5440         ANL     A,#0x40
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    536              {
    537                // process the new device event
    538                if ( ZDApp_NewDeviceList )
   \   00001E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000021   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000024   7003         JNZ     $+5
   \   000026   02....       LJMP    ??ZDApp_ProcessSecEvent_2 & 0xFFFF
    539                {
    540                  ZDAppNewDevice_t *pNewDevice;
    541                  uint16 timeDelta;
    542          
    543                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000029                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000029   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000031   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay; Banked call to: ZDSecMgrNewDeviceEvent
    544          
    545                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000034   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000037   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V1,A
    546                  osal_mem_free( ZDApp_NewDeviceList );
   \   000040                ; Setup parameters for call to function osal_mem_free
   \   000040   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000043   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000046   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    547                  ZDApp_NewDeviceList = pNewDevice;
   \   000049   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00004C   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    548          
    549                  if ( pNewDevice )
   \                     ??CrossCallReturnLabel_46:
   \   00004F   E5..         MOV     A,?V0
   \   000051   45..         ORL     A,?V1
   \   000053   6055         JZ      ??ZDApp_ProcessSecEvent_2
    550                  {
    551                    timeDelta = pNewDevice->timeDelta;
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V5,A
    552                    pNewDevice = pNewDevice->next;
   \   000066   8014         SJMP    ??ZDApp_ProcessSecEvent_3
    553          
    554                    while ( pNewDevice )
    555                    {
    556                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   C3           CLR     C
   \   000073   E0           MOVX    A,@DPTR
   \   000074   95..         SUBB    A,?V4
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   95..         SUBB    A,?V5
   \   00007B   F0           MOVX    @DPTR,A
    557                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V1,A
    558                    }
   \   000089   E5..         MOV     A,?V0
   \   00008B   45..         ORL     A,?V1
   \   00008D   70D9         JNZ     ??ZDApp_ProcessSecEvent_4
    559          
    560                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   00008F                ; Setup parameters for call to function osal_start_timerEx
   \   00008F   E4           CLR     A
   \   000090   F5..         MOV     ?V6,A
   \   000092   F5..         MOV     ?V7,A
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000099   7A40         MOV     R2,#0x40
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    561                  }
    562                }
    563          
    564                // Return unprocessed events
    565                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_2:
   \   0000AA   EE           MOV     A,R6
   \   0000AB   6440         XRL     A,#0x40
   \   0000AD   800B         SJMP    ??ZDApp_ProcessSecEvent_5
    566              }
    567            }
    568          
    569            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   5480         ANL     A,#0x80
   \   0000B2   600A         JZ      ??ZDApp_ProcessSecEvent_6
    570            {
    571              ZDApp_DeviceAuthEvt();
   \   0000B4                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000B4   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay; Banked call to: ZDApp_DeviceAuthEvt
    572          
    573              // Return unprocessed events
    574              return (events ^ ZDO_DEVICE_AUTH);
   \   0000B7   EE           MOV     A,R6
   \   0000B8   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   8026         SJMP    ??ZDApp_ProcessSecEvent_7
    575            }
    576          
    577            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000BE   EF           MOV     A,R7
   \   0000BF   5402         ANL     A,#0x2
   \   0000C1   600A         JZ      ??ZDApp_ProcessSecEvent_8
    578            {
    579              ZDApp_SaveNwkKey();
   \   0000C3                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000C3   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    580          
    581              // Return unprocessed events
    582              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000C6   EE           MOV     A,R6
   \   0000C7   FA           MOV     R2,A
   \   0000C8   EF           MOV     A,R7
   \   0000C9   6402         XRL     A,#0x2
   \   0000CB   8017         SJMP    ??ZDApp_ProcessSecEvent_7
    583            }
    584          
    585            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000CD   EF           MOV     A,R7
   \   0000CE   5408         ANL     A,#0x8
   \   0000D0   6005         JZ      ??ZDApp_ProcessSecEvent_9
    586            {
    587          #if defined (NV_RESTORE)
    588              ZDSecMgrSaveApsLinkKey();
    589          #endif // (NV_RESTORE)
    590          
    591              // Return unprocessed events
    592              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000D2   EF           MOV     A,R7
   \   0000D3   6408         XRL     A,#0x8
   \   0000D5   800D         SJMP    ??ZDApp_ProcessSecEvent_7
    593            }
    594          
    595            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D7   EF           MOV     A,R7
   \   0000D8   5404         ANL     A,#0x4
   \   0000DA   600B         JZ      ??ZDApp_ProcessSecEvent_10
    596            {
    597              ZDSecMgrSaveTCLinkKey();
   \   0000DC                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000DC   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay; Banked call to: ZDSecMgrSaveTCLinkKey
    598          
    599              // Return unprocessed events
    600              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000E4   FB           MOV     R3,A
   \   0000E5   8004         SJMP    ??ZDApp_ProcessSecEvent_11
    601            }
    602          
    603            // Discard or make more handlers
    604            return 0;
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000E7   7A00         MOV     R2,#0x0
   \   0000E9   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_11:
   \   0000EB   7F08         MOV     R7,#0x8
   \   0000ED   02....       LJMP    ?BANKED_LEAVE_XDATA
    605          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
    606          
    607          /*********************************************************************
    608           * Application Functions
    609           */
    610          
    611          /*********************************************************************
    612           * @fn      ZDOInitDevice
    613           *
    614           * @brief   Start the device in the network.  This function will read
    615           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    616           *   restore the network state of the device.
    617           *
    618           * @param   startDelay - timeDelay to start device (in milliseconds).
    619           *                       There is a jitter added to this delay:
    620           *                       ((NWK_START_DELAY + startDelay)
    621           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    622           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    623           *                       this function will hold the network init. Application
    624           *                       can start the device.
    625           *
    626           * NOTE:    If the application would like to force a "new" join, the
    627           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    628           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    629           *          this function. "new" join means to not restore the network
    630           *          state of the device. Use zgWriteStartupOptions() to set these
    631           *          options.
    632           *
    633           * @return
    634           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    635           *          restored.
    636           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    637           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    638           *          it could mean that there was no network state to restore.
    639           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    640           *          with the rejoin option set to TRUE.  So, the device was not
    641           *          started in the network (one time only).  The next time this
    642           *          function is called it will start.
    643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    645          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    646            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    647            uint16 extendedDelay = 0;
    648          
    649            ZDConfig_InitDescriptors();
   \                     ??CrossCallReturnLabel_92:
   \   00000D                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00000D   12....       LCALL   ??ZDConfig_InitDescriptors?relay; Banked call to: ZDConfig_InitDescriptors
    650            //devtag.071807.todo - fix this temporary solution
    651            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#_NIB + 14
   \   000017   F0           MOVX    @DPTR,A
    652          
    653          #if defined ( NV_RESTORE )
    654            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    655            // while booting to skip past NV Restore.
    656            if ( zdappHoldKeys == SW_BYPASS_NV )
    657            {
    658              zdappHoldKeys = 0;   // Only once
    659              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    660            }
    661            else
    662            {
    663              // Determine if NV should be restored
    664              networkStateNV = ZDApp_ReadNetworkRestoreState();
    665            }
    666          
    667            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    668            {
    669              networkStateNV = ZDApp_RestoreNetworkState();
    670            }
    671            else
    672            {
    673              // Wipe out the network state in NV
    674              NLME_InitNV();
    675              NLME_SetDefaultNV();
    676              // clear NWK key values
    677              ZDSecMgrClearNVKeyValues();
    678            }
    679          #endif
    680          
    681            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    682            {
    683              ZDAppDetermineDeviceType();
   \   000018                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000018   12....       LCALL   ??ZDAppDetermineDeviceType?relay; Banked call to: ZDAppDetermineDeviceType
    684          
    685              // Only delay if joining network - not restoring network state
    686              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    687                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   00001B                ; Setup parameters for call to function osal_rand
   \   00001B   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   EA           MOV     A,R2
   \   000025   547F         ANL     A,#0x7f
   \   000027   F8           MOV     R0,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   28           ADD     A,R0
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   2464         ADD     A,#0x64
   \   000033   FE           MOV     R6,A
   \   000034   E4           CLR     A
   \   000035   39           ADDC    A,R1
   \   000036   FF           MOV     R7,A
    688            }
    689          
    690            // Initialize the security for type of device
    691            ZDApp_SecInit( networkStateNV );
   \   000037                ; Setup parameters for call to function ZDSecMgrInit
   \   000037   7901         MOV     R1,#0x1
   \   000039   12....       LCALL   ??ZDSecMgrInit?relay ; Banked call to: ZDSecMgrInit
    692          
    693            devState = DEV_INIT;    // Remove the Hold state
   \   00003C   90....       MOV     DPTR,#devState
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
    694          
    695              // Initialize leave control logic
    696            ZDApp_LeaveCtrlInit();
   \   000041                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000041   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay; Banked call to: ZDApp_LeaveCtrlInit
    697          
    698              // Check leave control reset settings
    699            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000044                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000044   AC..         MOV     R4,?XSP + 0
   \   000046   AD..         MOV     R5,?XSP + 1
   \   000048   7A..         MOV     R2,#devState & 0xff
   \   00004A   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00004C   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay; Banked call to: ZDApp_LeaveCtrlStartup
    700          
    701              // Trigger the network start
    702              ZDApp_NetworkInit( extendedDelay );
   \   00004F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
    703          
    704            // set broadcast address mask to support broadcast filtering
    705            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000056                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000056   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
    706          
    707            return ( networkStateNV );
   \   00005E   7901         MOV     R1,#0x1
   \   000060                REQUIRE ?Subroutine8
   \   000060                ; // Fall through to label ?Subroutine8
    708          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine34_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine45_0
   \   000006                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    709          
    710          /*********************************************************************
    711           * @fn      ZDApp_ReadNetworkRestoreState
    712           *
    713           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    714           *          or not to restore the network state.
    715           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    716           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    717           *
    718           * @param   none
    719           *
    720           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    721           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    722           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    723           *          ZCD_NV_STARTUP_OPTION
    724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    725          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    726          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    727            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    728          
    729            // Look for the New Network State option.
    730            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    731            {
    732              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    733            }
    734          
    735            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine42_0 & 0xFFFF
    736          }
    737          
    738          /*********************************************************************
    739           * @fn      ZDAppDetermineDeviceType()
    740           *
    741           * @brief   Determines the type of device to start.
    742           *
    743           *          Looks at zgDeviceLogicalType and determines what type of
    744           *          device to start.  The types are:
    745           *            ZG_DEVICETYPE_COORDINATOR
    746           *            ZG_DEVICETYPE_ROUTER
    747           *            ZG_DEVICETYPE_ENDDEVICE
    748           *
    749           * @param   none
    750           *
    751           * @return  none
    752           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    753          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    754          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    755            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    756            {
    757              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    758              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8031         SJMP    ??ZDAppDetermineDeviceType_1
    759            }
    760            else
    761            {
    762              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   54F8         ANL     A,#0xf8
   \   00001E   F8           MOV     R0,A
   \   00001F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7004         JNZ     ??ZDAppDetermineDeviceType_2
    763                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV     A,#0x1
   \   000029   8007         SJMP    ??ZDAppDetermineDeviceType_3
    764              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6402         XRL     A,#0x2
   \   00002E   7007         JNZ     ??ZDAppDetermineDeviceType_4
    765                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL     A,R0
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX    @DPTR,A
    766          
    767              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    768              // The device shall do rejoin the network. Otherwise, do normal join
    769              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV     A,R1
   \   00003F   90....       MOV     DPTR,#devStartMode
   \   000042   7003         JNZ     ??ZDAppDetermineDeviceType_5
    770              {
    771                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR     A
   \   000045   8002         SJMP    ??ZDAppDetermineDeviceType_1
    772              }
    773              else
    774              {
    775                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000049   F0           MOVX    @DPTR,A
    776              }
    777            }
    778          }
   \   00004A   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    779          
    780          /*********************************************************************
    781           * @fn      ZDApp_NetworkStartEvt()
    782           *
    783           * @brief   Process the Network Start Event
    784           *
    785           * @param   none
    786           *
    787           * @return  none
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    790          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    791            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7014         JNZ     ??ZDApp_NetworkStartEvt_0
    792            {
    793              // Successfully started a ZigBee network
    794              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6407         XRL     A,#0x7
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    795              {
    796                devState = DEV_ZB_COORD;
   \   000012   7408         MOV     A,#0x8
   \   000014   F0           MOVX    @DPTR,A
    797              }
    798          
    799              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
    800              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   7A10         MOV     R2,#0x10
   \   00001C   8024         SJMP    ??ZDApp_NetworkStartEvt_2
    801            }
    802            else
    803            {
    804              // Try again with a higher energy threshold
    805              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001E                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001E   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   000021   E9           MOV     A,R1
   \   000022   7900         MOV     R1,#0x0
   \   000024   2410         ADD     A,#0x10
   \   000026   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000028   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000029   C3           CLR     C
   \   00002A   94FF         SUBB    A,#-0x1
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000031   65D0         XRL     A,PSW
   \   000033   33           RLC     A
   \   000034   5010         JNC     ??ZDApp_NetworkStartEvt_4
    806              {
    807                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000036                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000036                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000036   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   000039   E9           MOV     A,R1
   \   00003A   2410         ADD     A,#0x10
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??NLME_SetEnergyThreshold?relay; Banked call to: NLME_SetEnergyThreshold
    808                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV     R2,#0x1
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000042   7B00         MOV     R3,#0x0
   \   000044   8008         SJMP    ??ZDApp_NetworkStartEvt_5
    809              }
    810              else
    811              {
    812                // Failed to start network. Enter a dormant state (until user intervenes)
    813                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000046   90....       MOV     DPTR,#devState
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
    814                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004B                ; Setup parameters for call to function osal_set_event
   \   00004B   7A10         MOV     R2,#0x10
   \   00004D   FB           MOV     R3,A
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004E   90....       MOV     DPTR,#ZDAppTaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    815              }
    816            }
    817          }
   \   000056   02....       LJMP    ??Subroutine36_0 & 0xFFFF
    818          
    819          /*********************************************************************
    820           * @fn      ZDApp_DeviceAuthEvt()
    821           *
    822           * @brief   Process the Device Authentic Event
    823           *
    824           * @param   none
    825           *
    826           * @return  none
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    829          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    830            // received authentication from trust center
    831            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6404         XRL     A,#0x4
   \   00000A   7040         JNZ     ??ZDApp_DeviceAuthEvt_0
    832            {
    833              // Stop the reset timer so it doesn't reset
    834              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay; Banked call to: ZDApp_ResetTimerCancel
    835          
    836              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine11 & 0xFFFF
    837              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_0:
   \   000012   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    838          
    839              // Set the Power Manager Device
    840          #if defined ( POWER_SAVING )
    841              osal_pwrmgr_device( PWRMGR_BATTERY );
    842          #endif
    843          
    844              if ( ZSTACK_ROUTER_BUILD )
   \   000015   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6004         JZ      ??ZDApp_DeviceAuthEvt_1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
    845              {
    846                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00001F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000022   6009         JZ      ??ZDApp_DeviceAuthEvt_2
    847                {
    848                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    849                  NLME_StartRouterRequest( 0, 0, false );
   \   000024                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000024   7B00         MOV     R3,#0x0
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
    850                }
    851              }
    852          
    853              // Notify to save info into NV
    854              ZDApp_NVUpdate();
    855          
    856              // Save off the security
    857              ZDApp_SaveNwkKey();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00002D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002D   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    858          
    859              ZDApp_AnnounceNewAddress();
   \   000030                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000030   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
    860          
    861              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    862                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    863          #if defined ( ZIGBEE_CHILD_AGING )
    864                    && (zgChildAgingEnable == TRUE)
    865          #endif // ZIGBEE_CHILD_AGING
    866                       ) )
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A2E3         MOV     C,0xE0 /* A   */.3
   \   000039   5008         JNC     ??ZDApp_DeviceAuthEvt_3
   \   00003B   90....       MOV     DPTR,#zgChildAgingEnable
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6401         XRL     A,#0x1
   \   000041   7009         JNZ     ??ZDApp_DeviceAuthEvt_0
    867              {
    868                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000043                ; Setup parameters for call to function NLME_SetPollRate
   \   000043   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000046   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    869              }
    870            }
   \                     ??CrossCallReturnLabel_52:
   \   000049   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
    871            else
    872            {
    873              ZDApp_NVUpdate();
    874            }
    875          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00004C   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7405         MOV     A,#0x5
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   90....       MOV     DPTR,#ZDAppTaskID
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   22           RET
    876          
    877          /*********************************************************************
    878           * @fn      ZDApp_SaveNetworkStateEvt()
    879           *
    880           * @brief   Process the Save the Network State Event
    881           *
    882           * @param   none
    883           *
    884           * @return  none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    887          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    888          #if defined ( NV_RESTORE )
    889           #if defined ( NV_TURN_OFF_RADIO )
    890            // Turn off the radio's receiver during an NV update
    891            uint8 RxOnIdle;
    892            uint8 x = false;
    893            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    894            ZMacSetReq( ZMacRxOnIdle, &x );
    895           #endif
    896          
    897            // Update the Network State in NV
    898            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    899                           NWK_NV_DEVICELIST_ENABLE |
    900                           NWK_NV_BINDING_ENABLE    |
    901                           NWK_NV_ADDRMGR_ENABLE );
    902          
    903            // Reset the NV startup option to resume from NV by
    904            // clearing the "New" join option.
    905            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    906          
    907           #if defined ( NV_TURN_OFF_RADIO )
    908            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    909           #endif
    910          #endif // NV_RESTORE
    911          }
   \   000000   02....       LJMP    ?BRET
    912          
    913          #if defined ( NV_RESTORE )
    914          /*********************************************************************
    915           * @fn      ZDApp_RestoreNetworkState()
    916           *
    917           * @brief   This function will restore the network state of the
    918           *          device if the network state is stored in NV.
    919           *
    920           * @param   none
    921           *
    922           * @return
    923           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    924           *          restored.
    925           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    926           *          This could mean that zgStartupOption said to not restore, or
    927           *          it could mean that there was no network state to restore.
    928           *
    929           */
    930          uint8 ZDApp_RestoreNetworkState( void )
    931          {
    932            uint8 nvStat;
    933          
    934            // Initialize NWK NV items
    935            nvStat = NLME_InitNV();
    936          
    937            if ( nvStat != NV_OPER_FAILED )
    938            {
    939              if ( NLME_RestoreFromNV() )
    940              {
    941                // Are we a coordinator
    942                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
    943                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
    944                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
    945                devStartMode = MODE_RESUME;
    946                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    947              }
    948              else
    949                nvStat = NV_ITEM_UNINIT;
    950          
    951              if ( ZG_SECURE_ENABLED )
    952              {
    953                nwkFrameCounterChanges = 0;
    954          
    955                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    956                {
    957                  ZDApp_RestoreNwkKey();
    958                }
    959              }
    960          
    961              // The default for RxOnWhenIdle is true for Routers and false for end devices
    962              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    963              // other than default.
    964            }
    965          
    966            if ( nvStat == ZSUCCESS )
    967              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
    968            else
    969              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
    970          }
    971          #endif // NV_RESTORE
    972          
    973          /*********************************************************************
    974           * @fn      ZDApp_InitUserDesc()
    975           *
    976           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    977           *          when needed.  If you want to initialize the User descriptor to
    978           *          something other than all zero, do it here.
    979           *
    980           * @param   none
    981           *
    982           * @return  none
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    986            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    987          
    988            // Initialize the User Descriptor, the descriptor is read from NV
    989            // when needed.  If you want to initialize the User descriptor to something
    990            // other than all zero, do it here.
    991            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    992            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    993                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
    994            {
    995              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    996                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
    997              {
    998                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
    999                {
   1000                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1001                }
   1002              }
   1003            }
   1004          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   1005          
   1006          /*********************************************************************
   1007           * @fn      ZDApp_ProcessOSALMsg()
   1008           *
   1009           * @brief   Process the incoming task message.
   1010           *
   1011           * @param   msgPtr - message to process
   1012           *
   1013           * @return  none
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1017            // Data Confirmation message fields
   1018            uint8 sentEP;       // This should always be 0
   1019            uint8 sentStatus;
   1020            afDataConfirm_t *afDataConfirm;
   1021            uint8 tmp;
   1022          
   1023            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   603B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   600D         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   600F         JZ      ??ZDApp_ProcessOSALMsg_5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1024            {
   1025              // Incoming ZDO Message
   1026              case AF_INCOMING_MSG_CMD:
   1027                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL   ??ZDP_IncomingData?relay; Banked call to: ZDP_IncomingData
   1028                break;
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1029          
   1030              case ZDO_CB_MSG:
   1031                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay; Banked call to: ZDApp_ProcessMsgCBs
   1032                break;
   \   000036   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1033          
   1034              case AF_DATA_CONFIRM_CMD:
   1035                // This message is received as a confirmation of a data packet sent.
   1036                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1037                // The message fields are defined in AF.h
   1038                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1039                sentEP = afDataConfirm->endpoint;
   1040                sentStatus = afDataConfirm->hdr.status;
   1041          
   1042                // Action taken when confirmation is received.
   1043          #if defined ( ZIGBEE_FREQ_AGILITY )
   1044                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000039   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003C   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1045                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000044                ; Setup parameters for indirect call
   \   000044   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1046          #endif
   1047                (void)sentEP;
   1048                (void)sentStatus;
   1049                break;
   1050          
   1051              case ZDO_NWK_DISC_CNF:
   1052                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6401         XRL     A,#0x1
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1053                  break;
   1054          
   1055                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000058   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   6008         JZ      ??ZDApp_ProcessOSALMsg_7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6402         XRL     A,#0x2
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1056                {
   1057                  // Process the network discovery scan results and choose a parent
   1058                  // device to join/rejoin itself
   1059                  networkDesc_t *pChosenNwk;
   1060                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000068                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000068   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay; Banked call to: ZDApp_NwkDescListProcessing
   \   00006B   8A..         MOV     ?V0,R2
   \   00006D   8B..         MOV     ?V1,R3
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V1
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   \   000077   90....       MOV     DPTR,#zdoDiscCounter
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   1061                  {
   1062                    if ( devStartMode == MODE_JOIN )
   \   000083   EA           MOV     A,R2
   \   000084   2402         ADD     A,#0x2
   \   000086   F8           MOV     R0,A
   \   000087   E4           CLR     A
   \   000088   35..         ADDC    A,?V1
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   FE           MOV     R6,A
   \   00008D   E9           MOV     A,R1
   \   00008E   FF           MOV     R7,A
   \   00008F   90....       MOV     DPTR,#devStartMode
   \   000092   E0           MOVX    A,@DPTR
   \   000093   706D         JNZ     ??ZDApp_ProcessOSALMsg_9
   1063                    {
   1064                      devState = DEV_NWK_JOINING;
   \   000095   90....       MOV     DPTR,#devState
   \   000098   7402         MOV     A,#0x2
   \   00009A   F0           MOVX    @DPTR,A
   1065          
   1066                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00009B                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   1067          
   1068                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1069                                            pChosenNwk->logicalChannel,
   1070                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1071                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   0000AA                ; Setup parameters for call to function NLME_JoinRequest
   \   0000AA   85..82       MOV     DPL,?V0
   \   0000AD   85..83       MOV     DPH,?V1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V2,A
   \   0000BD   78..         MOV     R0,#?V2
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   85..82       MOV     DPL,?V0
   \   0000C5   85..83       MOV     DPH,?V1
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V2,A
   \   0000D8   78..         MOV     R0,#?V2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   85..82       MOV     DPL,?V0
   \   0000E6   85..83       MOV     DPH,?V1
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FC           MOV     R4,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FD           MOV     R5,A
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   240B         ADD     A,#0xb
   \   0000F2   FA           MOV     R2,A
   \   0000F3   E4           CLR     A
   \   0000F4   35..         ADDC    A,?V1
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FF   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1072                      {
   1073                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1074                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1075                      }
   1076                    } // if ( devStartMode == MODE_JOIN )
   1077                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000102   6403         XRL     A,#0x3
   \   000104   6003         JZ      $+5
   \   000106   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1078                    {
   1079                      ZStatus_t rejoinStatus;
   1080          
   1081                      devState = DEV_NWK_REJOIN;
   \   000109   90....       MOV     DPTR,#devState
   \   00010C   7403         MOV     A,#0x3
   \   00010E   F0           MOVX    @DPTR,A
   1082          
   1083                      // Before trying to do rejoin, check if the device has a valid short address
   1084                      // If not, generate a random short address for itself
   1085                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   00010F   90....       MOV     DPTR,#_NIB + 20
   \   000112   E0           MOVX    A,@DPTR
   \   000113   64FE         XRL     A,#0xfe
   \   000115   7003         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   00011A   7067         JNZ     ??ZDApp_ProcessOSALMsg_13
   1086                      {
   1087                        uint16 commNwkAddr;
   1088          
   1089                        // Verify if the Network address has been commissioned by external tool
   1090                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1091                                           sizeof(commNwkAddr),
   1092                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1093                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00011C                ; Setup parameters for call to function osal_nv_read
   \   00011C   7401         MOV     A,#0x1
   \   00011E   12....       LCALL   ?XSTACK_DISP100_8
   \   000121   88..         MOV     ?V2,R0
   \   000123   89..         MOV     ?V3,R1
   \   000125   78..         MOV     R0,#?V2
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012A   75..02       MOV     ?V2,#0x2
   \   00012D   75..00       MOV     ?V3,#0x0
   \   000130   78..         MOV     R0,#?V2
   \   000132   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000135   7C00         MOV     R4,#0x0
   \   000137   7D00         MOV     R5,#0x0
   \   000139   7A49         MOV     R2,#0x49
   \   00013B   7B00         MOV     R3,#0x0
   \   00013D   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000140   7404         MOV     A,#0x4
   \   000142   12....       LCALL   ?DEALLOC_XSTACK8
   \   000145   E9           MOV     A,R1
   \   000146   7027         JNZ     ??ZDApp_ProcessOSALMsg_14
   \   000148   7401         MOV     A,#0x1
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   64FE         XRL     A,#0xfe
   \   000150   7003         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000155   6018         JZ      ??ZDApp_ProcessOSALMsg_14
   1094                        {
   1095                          _NIB.nwkDevAddress = commNwkAddr;
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00015F   90....       MOV     DPTR,#_NIB + 20
   \   000162   E8           MOV     A,R0
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E9           MOV     A,R1
   \   000166   F0           MOVX    @DPTR,A
   1096          
   1097                          // clear Allocate address bit because device has a commissioned address
   1098                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \   000167   90....       MOV     DPTR,#_NIB + 14
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   C2E7         CLR     0xE0 /* A   */.7
   \   00016D   800A         SJMP    ??ZDApp_ProcessOSALMsg_16
   1099                        }
   1100                        else
   1101                        {
   1102                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00016F                ; Setup parameters for call to function osal_rand
   \   00016F   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000172   90....       MOV     DPTR,#_NIB + 20
   \   000175   EA           MOV     A,R2
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000179   F0           MOVX    @DPTR,A
   1103                        }
   1104          
   1105                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   00017A                ; Setup parameters for call to function ZMacSetReq
   \   00017A   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00017C   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00017E   7953         MOV     R1,#0x53
   \   000180   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1106                      }
   1107          
   1108                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1109                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000183   90....       MOV     DPTR,#_NIB + 33
   \   000186   E0           MOVX    A,@DPTR
   \   000187   64FE         XRL     A,#0xfe
   \   000189   7003         JNZ     ??ZDApp_ProcessOSALMsg_17
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00018E   701A         JNZ     ??ZDApp_ProcessOSALMsg_18
   1110                      {
   1111                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000190   85..82       MOV     DPL,?V0
   \   000193   85..83       MOV     DPH,?V1
   \   000196   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000199   90....       MOV     DPTR,#_NIB + 33
   \   00019C   E8           MOV     A,R0
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   A3           INC     DPTR
   \   00019F   E9           MOV     A,R1
   \   0001A0   F0           MOVX    @DPTR,A
   1112                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   0001A1                ; Setup parameters for call to function ZMacSetReq
   \   0001A1   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001A3   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001A5   7950         MOV     R1,#0x50
   \   0001A7   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1113                      }
   1114          
   1115                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   0001AA   85..82       MOV     DPL,?XSP + 0
   \   0001AD   85..83       MOV     DPH,?XSP + 1
   \   0001B0   7401         MOV     A,#0x1
   \   0001B2   F0           MOVX    @DPTR,A
   1116                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001B3                ; Setup parameters for call to function ZMacSetReq
   \   0001B3   AA..         MOV     R2,?XSP + 0
   \   0001B5   AB..         MOV     R3,?XSP + 1
   \   0001B7   7952         MOV     R1,#0x52
   \   0001B9   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1117          
   1118                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1119                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   1120                      {
   1121                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1122                      }
   1123                      else
   1124                      {
   1125                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1126                      }
   1127          
   1128                      if ( rejoinStatus != ZSuccess )
   \   0001BC                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001C4   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001C6   12....       LCALL   ??NLME_ReJoinRequestUnsecure?relay; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0001C9   E9           MOV     A,R1
   \   0001CA   600E         JZ      ??ZDApp_ProcessOSALMsg_11
   1129                      {
   1130                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1131                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001CC                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001CC                ; Setup parameters for call to function osal_rand
   \   0001CC   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   0001CF   EA           MOV     A,R2
   \   0001D0   547F         ANL     A,#0x7f
   \   0001D2   2464         ADD     A,#0x64
   \   0001D4   FA           MOV     R2,A
   \   0001D5   7B00         MOV     R3,#0x0
   \   0001D7   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1132                      }
   1133                    } // else if ( devStartMode == MODE_REJOIN )
   1134          
   1135                    // The receiver is on, turn network layer polling off.
   1136                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001DA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001E0   4003         JC      $+5
   \   0001E2   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1137                    {
   1138                      // for an End Device with NO Child Table Management process or for a Router
   1139                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1140          #if defined ( ZIGBEE_CHILD_AGING )
   1141                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001E5   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   600F         JZ      ??ZDApp_ProcessOSALMsg_19
   \   0001EB   6401         XRL     A,#0x1
   \   0001ED   600B         JZ      ??ZDApp_ProcessOSALMsg_19
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   6402         XRL     A,#0x2
   \   0001F2   707B         JNZ     ??ZDApp_ProcessOSALMsg_6
   \   0001F4   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   7075         JNZ     ??ZDApp_ProcessOSALMsg_6
   1142          #else
   1143                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1144          #endif // ZIGBEE_CHILD_AGING
   1145                      {
   1146                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   0001FA                ; Setup parameters for call to function NLME_SetPollRate
   \   0001FA   7A00         MOV     R2,#0x0
   \   0001FC   7B00         MOV     R3,#0x0
   \   0001FE   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1147                        NLME_SetQueuedPollRate( 0 );
   \   000201                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000201   7A00         MOV     R2,#0x0
   \   000203   7B00         MOV     R3,#0x0
   \   000205   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1148                        NLME_SetResponseRate( 0 );
   \   000208                ; Setup parameters for call to function NLME_SetResponseRate
   \   000208   7A00         MOV     R2,#0x0
   \   00020A   7B00         MOV     R3,#0x0
   \   00020C   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   \   00020F   805E         SJMP    ??ZDApp_ProcessOSALMsg_6
   1149                      }
   1150                    }
   1151                    else
   1152                    {
   1153                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1154                      {
   1155                        ZDApp_SavedPollRate = zgPollRate;
   1156                        NLME_SetPollRate( zgRejoinPollRate );
   1157                      }
   1158                    }
   1159                  }
   1160                  else
   1161                  {
   1162                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000211   90....       MOV     DPTR,#continueJoining
   \   000214   E0           MOVX    A,@DPTR
   \   000215   6058         JZ      ??ZDApp_ProcessOSALMsg_6
   1163                    {
   1164              #if defined ( MANAGED_SCAN )
   1165                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1166              #else
   1167                      zdoDiscCounter++;
   \   000217   90....       MOV     DPTR,#zdoDiscCounter
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   04           INC     A
   \   00021C   F0           MOVX    @DPTR,A
   1168                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1169                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00021D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00021D                ; Setup parameters for call to function osal_rand
   \   00021D   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000220   EA           MOV     A,R2
   \   000221   2464         ADD     A,#0x64
   \   000223   FA           MOV     R2,A
   \   000224   E4           CLR     A
   \   000225   3400         ADDC    A,#0x0
   \   000227   FB           MOV     R3,A
   \   000228   8042         SJMP    ??ZDApp_ProcessOSALMsg_20
   1170              #endif
   1171                    }
   1172                  }
   1173                }
   1174                break;
   1175          
   1176              case ZDO_NWK_JOIN_IND:
   1177                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00022A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   6401         XRL     A,#0x1
   \   000230   6005         JZ      ??ZDApp_ProcessOSALMsg_21
   \   000232   E0           MOVX    A,@DPTR
   \   000233   6402         XRL     A,#0x2
   \   000235   7038         JNZ     ??ZDApp_ProcessOSALMsg_6
   1178                {
   1179                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   000237                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000237   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay; Banked call to: ZDApp_ProcessNetworkJoin
   \   00023A   8033         SJMP    ??ZDApp_ProcessOSALMsg_6
   1180                }
   1181                break;
   1182          
   1183              case ZDO_NWK_JOIN_REQ:
   1184                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00023C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   6401         XRL     A,#0x1
   \   000242   6005         JZ      ??ZDApp_ProcessOSALMsg_22
   \   000244   E0           MOVX    A,@DPTR
   \   000245   6402         XRL     A,#0x2
   \   000247   7026         JNZ     ??ZDApp_ProcessOSALMsg_6
   1185                {
   1186                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   000249   90....       MOV     DPTR,#retryCnt
   \   00024C   E4           CLR     A
   \   00024D   F0           MOVX    @DPTR,A
   1187                  devStartMode = MODE_RESUME;
   \   00024E   90....       MOV     DPTR,#devStartMode
   \   000251   04           INC     A
   \   000252   F0           MOVX    @DPTR,A
   1188                  _tmpRejoinState = true;
   \   000253   90....       MOV     DPTR,#_tmpRejoinState
   \   000256   F0           MOVX    @DPTR,A
   1189                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000257                ; Setup parameters for call to function sAddrExtCpy
   \   000257   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000259   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00025B   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00025D   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00025F   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1190                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000262   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000265   7402         MOV     A,#0x2
   \   000267   F0           MOVX    @DPTR,A
   1191                  ZDApp_NetworkInit( 0 );
   \   000268                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000268   7A00         MOV     R2,#0x0
   \   00026A   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   00026C   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1192                }
   1193                break;
   1194          
   1195              default:
   1196                if ( ZG_SECURE_ENABLED )
   1197                  ZDApp_ProcessSecMsg( msgPtr );
   1198                break;
   1199            }
   1200          
   1201          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   00026F   7403         MOV     A,#0x3
   \   000271   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0
   1202          
   1203          /*********************************************************************
   1204           * @fn      ZDApp_ProcessMsgCBs()
   1205           *
   1206           * @brief   Process response messages
   1207           *
   1208           * @param   none
   1209           *
   1210           * @return  none
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1214            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000028   0200         DW        2
   \   00002A   2100         DW        33
   \   00002C   2200         DW        34
   \   00002E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000030   0080         DW        32768
   \   000032   0180         DW        32769
   \   000034   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000036   0000         DW        0
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1215            {
   1216          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1217              case NWK_addr_rsp:
   1218              case IEEE_addr_rsp:
   1219                {
   1220                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1221          
   1222                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   12....       LCALL   ??ZDO_ParseAddrRsp?relay; Banked call to: ZDO_ParseAddrRsp
   \   00003D   8A..         MOV     ?V2,R2
   \   00003F   8B..         MOV     ?V3,R3
   1223                  if ( pAddrRsp )
   \   000041   EA           MOV     A,R2
   \   000042   45..         ORL     A,?V3
   \   000044   604B         JZ      ??ZDApp_ProcessMsgCBs_2
   1224                  {
   1225                    if ( pAddrRsp->status == ZSuccess )
   \   000046   EA           MOV     A,R2
   \   000047   2403         ADD     A,#0x3
   \   000049   FE           MOV     R6,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V3
   \   00004D   FF           MOV     R7,A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   700B         JNZ     ??ZDApp_ProcessMsgCBs_3
   1226                    {
   1227                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1228                    }
   \                     ??CrossCallReturnLabel_53:
   \   00005D   12....       LCALL   ??ZDO_UpdateAddrManager?relay; Banked call to: ZDO_UpdateAddrManager
   1229          
   1230          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1231                    // look for pending bind entry for NWK_addr_rsp Only
   1232                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000060   85..82       MOV     DPL,?V0
   \   000063   85..83       MOV     DPH,?V1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006D   7007         JNZ     ??ZDApp_ProcessMsgCBs_5
   1233                    {
   1234          #if defined ( REFLECTOR )
   1235                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006F                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??ZDApp_ProcessPendingBindReq?relay; Banked call to: ZDApp_ProcessPendingBindReq
   1236          #endif
   1237                    }
   1238          #endif
   1239          
   1240                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   AA..         MOV     R2,?V2
   \   000078   AB..         MOV     R3,?V3
   \   00007A   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00007D   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1241                  }
   1242                }
   1243                break;
   1244          #endif
   1245          
   1246          #if defined ( REFLECTOR )
   1247              case Bind_req:
   1248              case Unbind_req:
   1249                {
   1250                  ZDO_BindUnbindReq_t bindReq;
   1251                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007F                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007F   AC..         MOV     R4,?XSP + 0
   \   000081   AD..         MOV     R5,?XSP + 1
   \   000083   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay; Banked call to: ZDO_ParseBindUnbindReq
   1252                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000086                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000086   AC..         MOV     R4,?XSP + 0
   \   000088   AD..         MOV     R5,?XSP + 1
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay; Banked call to: ZDO_ProcessBindUnbindReq
   1253                }
   1254                break;
   1255          #endif
   1256          
   1257          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1258              case Bind_rsp:
   1259              case Unbind_rsp:
   1260                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1261                {
   1262                  ZDMatchSendState(
   1263                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1264                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1265                }
   1266                break;
   1267          
   1268              case End_Device_Bind_req:
   1269                if (ZG_DEVICE_COORDINATOR_TYPE)
   1270                {
   1271                  ZDEndDeviceBind_t bindReq;
   1272                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1273                  ZDO_MatchEndDeviceBind( &bindReq );
   1274          
   1275                  // Freeing the cluster lists - if allocated.
   1276                  if ( bindReq.numInClusters )
   1277                    osal_mem_free( bindReq.inClusters );
   1278                  if ( bindReq.numOutClusters )
   1279                    osal_mem_free( bindReq.outClusters );
   1280                }
   1281                break;
   1282          #endif
   1283            }
   1284          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000091   7415         MOV     A,#0x15
   \   000093   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1285          
   1286          /*********************************************************************
   1287           * @fn      ZDApp_RegisterCBs()
   1288           *
   1289           * @brief   Process response messages
   1290           *
   1291           * @param   none
   1292           *
   1293           * @return  none
   1294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1295          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1296          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1297          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1298            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1299          #endif
   1300          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1301            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1302          #endif
   1303          #if ZG_BUILD_COORDINATOR_TYPE
   1304            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1305            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1306            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1307          #endif
   1308          #if defined ( REFLECTOR )
   1309            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1310            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1311          #endif
   1312          }
   \   000034   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   1313          
   1314          /*********************************************************************
   1315           * @fn      ZDApp_ProcessSecMsg()
   1316           *
   1317           * @brief   Process the incoming security message.
   1318           *
   1319           * @param   msgPtr - message to process
   1320           *
   1321           * @return  none
   1322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1323          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1324          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1325            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   600A         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FE         ADD     A,#-0x2
   \   00000F   6018         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   24FE         ADD     A,#-0x2
   \   000013   6021         JZ      ??ZDApp_ProcessSecMsg_2
   \   000015   802F         SJMP    ??ZDApp_ProcessSecMsg_3
   1326            {
   1327              case ZDO_TRANSPORT_KEY_IND:
   1328                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000017   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7022         JNZ     ??ZDApp_ProcessSecMsg_3
   1329                {
   1330                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000024                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000024   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay; Banked call to: ZDSecMgrTransportKeyInd
   \   000027   801D         SJMP    ??ZDApp_ProcessSecMsg_3
   1331                }
   1332                break;
   1333          
   1334              case ZDO_UPDATE_DEVICE_IND:
   1335                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1336                {
   1337                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1338                }
   1339                break;
   1340          
   1341              case ZDO_REMOVE_DEVICE_IND:
   1342                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000029   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1343                {
   1344                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   \   000031                ; Setup parameters for call to function ZDSecMgrRemoveDeviceInd
   \   000031   12....       LCALL   ??ZDSecMgrRemoveDeviceInd?relay; Banked call to: ZDSecMgrRemoveDeviceInd
   \   000034   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1345                }
   1346                break;
   1347          
   1348              case ZDO_REQUEST_KEY_IND:
   1349                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1350                {
   1351                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1352                  {
   1353                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1354                  }
   1355                }
   1356                break;
   1357          
   1358              case ZDO_SWITCH_KEY_IND:
   1359                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000036   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1360                {
   1361                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000043                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000043   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay; Banked call to: ZDSecMgrSwitchKeyInd
   1362                }
   1363                break;
   1364          
   1365              default:
   1366                // Unsupported messages
   1367                break;
   1368            }
   1369          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000046   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   1370          
   1371          /*********************************************************************
   1372           * @fn      ZDApp_ProcessNetworkJoin()
   1373           *
   1374           * @brief
   1375           *
   1376           *   Save off the Network key information.
   1377           *
   1378           * @param   none
   1379           *
   1380           * @return  none
   1381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1382          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1383          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1384            if ( (devState == DEV_NWK_JOINING) ||
   1385                ((devState == DEV_NWK_ORPHAN)  &&
   1386                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6409         XRL     A,#0x9
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1387            {
   1388              // Result of a Join attempt by this device.
   1389              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   705D         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1390              {
   1391                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   1392          
   1393          #if defined ( POWER_SAVING )
   1394                osal_pwrmgr_device( PWRMGR_BATTERY );
   1395          #endif
   1396          
   1397                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1398                {
   1399                  // wait for auth from trust center
   1400                  devState = DEV_END_DEVICE_UNAUTH;
   1401          
   1402                  // Start the reset timer for MAX UNAUTH time
   1403                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1404                }
   1405                else
   1406                {
   1407                  if ( ZSTACK_ROUTER_BUILD )
   \   000039   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6004         JZ      ??ZDApp_ProcessNetworkJoin_4
   \   00003F   6401         XRL     A,#0x1
   \   000041   7015         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1408                  {
   1409                    if ( devState == DEV_NWK_ORPHAN
   1410                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000043   90....       MOV     DPTR,#devState
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6409         XRL     A,#0x9
   \   000049   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004E   6013         JZ      ??ZDApp_ProcessNetworkJoin_6
   1411                    {
   1412                      // Change NIB state to router for restore
   1413                      _NIB.nwkState = NWK_ROUTER;
   \   000050   90....       MOV     DPTR,#_NIB + 35
   \   000053   7408         MOV     A,#0x8
   \   000055   F0           MOVX    @DPTR,A
   \   000056   800B         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1414                    }
   1415                  }
   1416          
   1417                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000058   90....       MOV     DPTR,#devState
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6402         XRL     A,#0x2
   \   00005E   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1418                  {
   1419                    ZDApp_AnnounceNewAddress();
   \   000060                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000060   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1420                  }
   1421          
   1422                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000063   90....       MOV     DPTR,#devState
   \   000066   7405         MOV     A,#0x5
   \   000068   F0           MOVX    @DPTR,A
   1423                  if ( ZSTACK_ROUTER_BUILD )
   \   000069   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6007         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   00006F   6401         XRL     A,#0x1
   \   000071   6003         JZ      $+5
   \   000073   02....       LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1424                  {
   1425                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1426                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000076   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1427                    {
   1428                      NLME_StartRouterRequest( 0, 0, false );
   \   00007E                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   7A00         MOV     R2,#0x0
   \   000082   7900         MOV     R1,#0x0
   \   000084   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   \   000087   02....       LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1429                    }
   1430                  }
   1431                }
   1432              }
   1433              else
   1434              {
   1435                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00008A   90....       MOV     DPTR,#devStartMode
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6401         XRL     A,#0x1
   \   000090   7031         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000092   90....       MOV     DPTR,#retryCnt
   \   000095   E0           MOVX    A,@DPTR
   \   000096   04           INC     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   C3           CLR     C
   \   000099   9403         SUBB    A,#0x3
   \   00009B   4026         JC      ??ZDApp_ProcessNetworkJoin_9
   1436                {
   1437                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00009D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A0   7003         JNZ     ??ZDApp_ProcessNetworkJoin_10
   \   0000A2   74FF         MOV     A,#-0x1
   \   0000A4   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A5   600A         JZ      ??ZDApp_ProcessNetworkJoin_11
   \   0000A7   74FE         MOV     A,#-0x2
   \   0000A9   68           XRL     A,R0
   \   0000AA   7003         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000AC   74FF         MOV     A,#-0x1
   \   0000AE   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AF   7006         JNZ     ??ZDApp_ProcessNetworkJoin_13
   1438                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000B1   90....       MOV     DPTR,#devStartMode
   \   0000B4   E4           CLR     A
   \   0000B5   800B         SJMP    ??ZDApp_ProcessNetworkJoin_14
   1439                  else
   1440                  {
   1441                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B7   90....       MOV     DPTR,#devStartMode
   \   0000BA   7403         MOV     A,#0x3
   \   0000BC   F0           MOVX    @DPTR,A
   1442                    _tmpRejoinState = true;
   \   0000BD   90....       MOV     DPTR,#_tmpRejoinState
   \   0000C0   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C2   F0           MOVX    @DPTR,A
   1443                  }
   1444                }
   1445          
   1446                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1447                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000C3                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000C3   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   0000C6   8A..         MOV     ?V0,R2
   \   0000C8   8B..         MOV     ?V1,R3
   \   0000CA   74FE         MOV     A,#-0x2
   \   0000CC   65..         XRL     A,?V0
   \   0000CE   7004         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000D0   74FF         MOV     A,#-0x1
   \   0000D2   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000D4   700D         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000D6   90....       MOV     DPTR,#_NIB + 20
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   64FE         XRL     A,#0xfe
   \   0000DC   7003         JNZ     ??ZDApp_ProcessNetworkJoin_17
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000E1   601D         JZ      ??ZDApp_ProcessNetworkJoin_18
   1448                {
   1449                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   74FE         MOV     A,#-0x2
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   04           INC     A
   \   0000EE   F0           MOVX    @DPTR,A
   1450                  // Invalidate nwk addr so end device does not use in its data reqs.
   1451                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000EF   90....       MOV     DPTR,#_NIB + 20
   \   0000F2   14           DEC     A
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   04           INC     A
   \   0000F6   F0           MOVX    @DPTR,A
   1452                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000F7                ; Setup parameters for call to function ZMacSetReq
   \   0000F7   AA..         MOV     R2,?XSP + 0
   \   0000F9   AB..         MOV     R3,?XSP + 1
   \   0000FB   7953         MOV     R1,#0x53
   \   0000FD   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1453                }
   1454          
   1455                // Clear the neighbor Table and network discovery tables.
   1456                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000100                ; Setup parameters for call to function nwkNeighborInitTable
   \   000100   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1457                NLME_NwkDiscTerm();
   \   000103                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000103   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1458          
   1459                zdoDiscCounter = 1;
   \   000106   90....       MOV     DPTR,#zdoDiscCounter
   \   000109   7401         MOV     A,#0x1
   \   00010B   F0           MOVX    @DPTR,A
   1460          
   1461          //      ZDApp_NetworkInit( (uint16)
   1462          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1463          //                          (NWK_START_DELAY * 5)) );
   1464                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1465                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00010C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00010C                ; Setup parameters for call to function osal_rand
   \   00010C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1466              }
   1467            }
   1468            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6403         XRL     A,#0x3
   \   000112   6003         JZ      $+5
   \   000114   02....       LJMP    ??ZDApp_ProcessNetworkJoin_20 & 0xFFFF
   1469            {
   1470              // results of an orphaning attempt by this device
   1471              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000117   90....       MOV     DPTR,#nwkStatus
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   7046         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1472              {
   1473                // Verify NWK key is available before sending Device_annce
   1474                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1475                {
   1476                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1477          
   1478                  // wait for auth from trust center
   1479                  devState = DEV_END_DEVICE_UNAUTH;
   1480          
   1481                  // Start the reset timer for MAX UNAUTH time
   1482                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1483                }
   1484                else
   1485                {
   1486          
   1487                  devState = DEV_END_DEVICE;
   \   00011D   12....       LCALL   ?Subroutine11 & 0xFFFF
   1488                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_1:
   \   000120   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   1489                  // setup Power Manager Device
   1490          #if defined ( POWER_SAVING )
   1491                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1492          #endif
   1493          
   1494                  // The receiver is on, turn network layer polling off.
   1495                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000123   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000126   E0           MOVX    A,@DPTR
   \   000127   A2E3         MOV     C,0xE0 /* A   */.3
   \   000129   501B         JNC     ??ZDApp_ProcessNetworkJoin_22
   1496                  {
   1497          #if defined ( ZIGBEE_CHILD_AGING )
   1498                    // if Child Table Management process is not enabled
   1499                    if ( zgChildAgingEnable == FALSE )
   \   00012B   90....       MOV     DPTR,#zgChildAgingEnable
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   7015         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1500          #endif // ZIGBEE_CHILD_AGING
   1501                    {
   1502                      NLME_SetPollRate( 0 );
   \   000131                ; Setup parameters for call to function NLME_SetPollRate
   \   000131   7A00         MOV     R2,#0x0
   \   000133   7B00         MOV     R3,#0x0
   \   000135   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1503                      NLME_SetQueuedPollRate( 0 );
   \   000138                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000138   7A00         MOV     R2,#0x0
   \   00013A   7B00         MOV     R3,#0x0
   \   00013C   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1504                      NLME_SetResponseRate( 0 );
   \   00013F                ; Setup parameters for call to function NLME_SetResponseRate
   \   00013F   7A00         MOV     R2,#0x0
   \   000141   7B00         MOV     R3,#0x0
   \   000143   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   1505                    }
   1506                  }
   1507          
   1508                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000146   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   6004         JZ      ??ZDApp_ProcessNetworkJoin_23
   \   00014C   6401         XRL     A,#0x1
   \   00014E   700E         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1509                  {
   1510                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1511                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000150   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000153   6009         JZ      ??ZDApp_ProcessNetworkJoin_24
   1512                    {
   1513                      NLME_StartRouterRequest( 0, 0, false );
   \   000155                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000155   7B00         MOV     R3,#0x0
   \   000157   7A00         MOV     R2,#0x0
   \   000159   7900         MOV     R1,#0x0
   \   00015B   12....       LCALL   ??NLME_StartRouterRequest?relay; Banked call to: NLME_StartRouterRequest
   1514                    }
   1515                  }
   1516          
   1517                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00015E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00015E   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   \   000161   806E         SJMP    ??ZDApp_ProcessNetworkJoin_8
   1518                }
   1519              }
   1520              else
   1521              {
   1522                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000163   90....       MOV     DPTR,#devStartMode
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6401         XRL     A,#0x1
   \   000169   7039         JNZ     ??ZDApp_ProcessNetworkJoin_25
   1523                {
   1524                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00016B   90....       MOV     DPTR,#retryCnt
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   04           INC     A
   \   000170   F0           MOVX    @DPTR,A
   \   000171   C3           CLR     C
   \   000172   9404         SUBB    A,#0x4
   \   000174   5021         JNC     ??ZDApp_ProcessNetworkJoin_26
   1525                  {
   1526                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000176   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000179   7003         JNZ     ??ZDApp_ProcessNetworkJoin_27
   \   00017B   74FF         MOV     A,#-0x1
   \   00017D   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   00017E   601F         JZ      ??ZDApp_ProcessNetworkJoin_28
   \   000180   74FE         MOV     A,#-0x2
   \   000182   68           XRL     A,R0
   \   000183   7003         JNZ     ??ZDApp_ProcessNetworkJoin_29
   \   000185   74FF         MOV     A,#-0x1
   \   000187   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   000188   6015         JZ      ??ZDApp_ProcessNetworkJoin_28
   1527                      devStartMode = MODE_JOIN;
   1528                    else
   1529                    {
   1530                      devStartMode = MODE_REJOIN;
   \   00018A   90....       MOV     DPTR,#devStartMode
   \   00018D   7403         MOV     A,#0x3
   \   00018F   F0           MOVX    @DPTR,A
   1531                      _tmpRejoinState = true;
   \   000190   90....       MOV     DPTR,#_tmpRejoinState
   \   000193   7401         MOV     A,#0x1
   \   000195   800C         SJMP    ??ZDApp_ProcessNetworkJoin_30
   1532                    }
   1533                  }
   1534                  // Do a normal join to the network after certain times of rejoin retries
   1535                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000197   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   6401         XRL     A,#0x1
   \   00019D   7005         JNZ     ??ZDApp_ProcessNetworkJoin_25
   1536                  {
   1537                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   00019F   90....       MOV     DPTR,#devStartMode
   \   0001A2   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_30:
   \   0001A3   F0           MOVX    @DPTR,A
   1538                  }
   1539                }
   1540          
   1541                // Clear the neighbor Table and network discovery tables.
   1542                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001A4                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001A4   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1543                NLME_NwkDiscTerm();
   \   0001A7                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001A7   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1544          
   1545                // setup a retry for later...
   1546                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1547                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001AA                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001AA                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001AA   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   0001AD   EA           MOV     A,R2
   \   0001AE   547F         ANL     A,#0x7f
   \   0001B0   2464         ADD     A,#0x64
   \   0001B2   FA           MOV     R2,A
   \   0001B3   7B00         MOV     R3,#0x0
   \   0001B5   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   0001B8   8017         SJMP    ??ZDApp_ProcessNetworkJoin_8
   1548              }
   1549            }
   1550          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1551            else
   1552            {
   1553              // Assume from address conflict
   1554              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001BA   90....       MOV     DPTR,#_NIB + 96
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   6402         XRL     A,#0x2
   \   0001C0   700F         JNZ     ??ZDApp_ProcessNetworkJoin_8
   1555              {
   1556                // Notify the network
   1557                ZDApp_AnnounceNewAddress();
   \   0001C2                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001C2   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1558          
   1559                // Notify apps
   1560                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001C5                ; Setup parameters for call to function osal_set_event
   \   0001C5   7A10         MOV     R2,#0x10
   \   0001C7   7B00         MOV     R3,#0x0
   \   0001C9   90....       MOV     DPTR,#ZDAppTaskID
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F9           MOV     R1,A
   \   0001CE   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   1561              }
   1562            }
   1563          #endif
   1564          }
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0001D1   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#_NIB + 33
   \   000003   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   22           RET
   1565          
   1566          /*********************************************************************
   1567           * @fn      ZDApp_SaveNwkKey()
   1568           *
   1569           * @brief   Save off the Network key information.
   1570           *
   1571           * @param   none
   1572           *
   1573           * @return  none
   1574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1575          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1576          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1577            nwkActiveKeyItems keyItems;
   1578          
   1579            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   ??SSP_ReadNwkActiveKey?relay; Banked call to: SSP_ReadNwkActiveKey
   1580          
   1581            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1582                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1583          
   1584            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1585          
   1586            // Clear copy in RAM before return.
   1587            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1588          
   1589          }
   \   00004B                REQUIRE ?Subroutine9
   \   00004B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   1590          
   1591          /*********************************************************************
   1592           * @fn      ZDApp_ForceConcentratorChange()
   1593           *
   1594           * @brief   Force a network concentrator change by resetting 
   1595           *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
   1596           *          from NV and set nwk event.
   1597           *
   1598           * @param   none
   1599           *
   1600           * @return  none
   1601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1602          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1604            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1605            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1606           
   1607            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1608            {
   1609              // Start next event
   1610              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1611            }
   1612            else
   1613            {
   1614              // Stop the next event
   1615              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   1616            }
   1617          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   80..         SJMP    ??Subroutine35_0
   1618          
   1619          /*********************************************************************
   1620           * @fn      ZDApp_ResetNwkKey()
   1621           *
   1622           * @brief   Reset the Network key information in NV.
   1623           *
   1624           * @param   none
   1625           *
   1626           * @return  none
   1627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1628          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1629          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1630            nwkActiveKeyItems keyItems;
   1631          
   1632            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1633            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1634                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1635          }
   \   00003F   02....       LJMP    ?Subroutine9 & 0xFFFF
   1636          
   1637          /*********************************************************************
   1638           * @fn      ZDApp_RestoreNwkKey()
   1639           *
   1640           * @brief
   1641           *
   1642           *   Save off the Network key information.
   1643           *
   1644           * @param   none
   1645           *
   1646           * @return  true if restored from NV, false if not
   1647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1648          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1650            nwkActiveKeyItems keyItems;
   1651            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1652          
   1653            // Restore the key information
   1654            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1655                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   8E..         MOV     ?V1,R6
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A82         MOV     R2,#-0x7e
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1656            {
   1657              uint8 nullKey[SEC_KEY_LEN];
   1658          
   1659              // initialize default value to compare to
   1660              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV     R4,#0x10
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1661          
   1662              // if stored key is different than default value, then a key has been established
   1663              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V0,R0
   \   00004E   89..         MOV     ?V1,R1
   \   000050   8E..         MOV     ?V2,R6
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   A982         MOV     R1,DPL
   \   000062   AA83         MOV     R2,DPH
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   705A         JNZ     ??ZDApp_RestoreNwkKey_0
   1664              {
   1665                // Increment the frame counter stored in NV
   1666                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1667                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000071   90....       MOV     DPTR,#__Constant_4e2
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   7411         MOV     A,#0x11
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_ADD_TO_X
   1668          
   1669                nwkFrameCounter = keyItems.frameCounter;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?XLOAD_R0123
   \   00008B   90....       MOV     DPTR,#nwkFrameCounter
   \   00008E   12....       LCALL   ?XSTORE_R0123
   1670          
   1671                // Save the updated Frame Counter right away
   1672                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1673                               (void *)&keyItems );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   A8..         MOV     R0,?XSP + 0
   \   000093   A9..         MOV     R1,?XSP + 1
   \   000095   88..         MOV     ?V0,R0
   \   000097   89..         MOV     ?V1,R1
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..15       MOV     ?V0,#0x15
   \   0000A1   8E..         MOV     ?V1,R6
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A82         MOV     R2,#-0x7e
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1674          
   1675                nwkFrameCounterChanges = 0;
   \   0000B8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   F0           MOVX    @DPTR,A
   1676          
   1677                ret = TRUE;
   \   0000BF   0E           INC     R6
   1678          
   1679                // Clear copy in RAM before return.
   1680                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C0                ; Setup parameters for call to function osal_memset
   \   0000C0   7C15         MOV     R4,#0x15
   \   0000C2   FD           MOV     R5,A
   \   0000C3   F9           MOV     R1,A
   \   0000C4   AA..         MOV     R2,?XSP + 0
   \   0000C6   AB..         MOV     R3,?XSP + 1
   \   0000C8   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1681              }
   1682            }
   1683          
   1684            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   F9           MOV     R1,A
   \   0000CD   7425         MOV     A,#0x25
   \   0000CF   02....       LJMP    ?Subroutine1 & 0xFFFF
   1685          }
   1686          
   1687          /*********************************************************************
   1688           * @fn      ZDApp_ResetTimerStart
   1689           *
   1690           * @brief   Start the reset timer.
   1691           *
   1692           * @param   delay - delay time(ms) before reset
   1693           *
   1694           * @return  none
   1695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1696          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1697          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1698            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1699            {
   1700              // Start the rest timer
   1701              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1702            }
   1703          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1704          
   1705          /*********************************************************************
   1706           * @fn      ZDApp_ResetTimerCancel
   1707           *
   1708           * @brief   Cancel the reset timer.
   1709           *
   1710           * @param   none
   1711           *
   1712           * @return  none
   1713           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1714          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1715          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1716            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   1717            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_clear_event?relay; Banked call to: osal_clear_event
   1718          }
   \   00001C   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   1719          
   1720          /*********************************************************************
   1721           * @fn      ZDApp_LeaveCtrlInit
   1722           *
   1723           * @brief   Initialize the leave control logic.
   1724           *
   1725           * @param   none
   1726           *
   1727           * @return  none
   1728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1729          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1731            uint8 status;
   1732          
   1733          
   1734            // Initialize control state
   1735            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1736          
   1737            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1738                                        sizeof(ZDApp_LeaveCtrl),
   1739                                        &ZDApp_LeaveCtrl );
   1740          
   1741            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1742            {
   1743              // Read saved control
   1744              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1745                            0,
   1746                            sizeof( uint8 ),
   1747                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1748            }
   1749          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   1750          
   1751          /*********************************************************************
   1752           * @fn      ZDApp_LeaveCtrlSet
   1753           *
   1754           * @brief   Set the leave control logic.
   1755           *
   1756           * @param   ra - reassociate flag
   1757           *
   1758           * @return  none
   1759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine34_0
   \   000023                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1760          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1761          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1762            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1763          
   1764            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1765            {
   1766              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1767            }
   1768          
   1769            // Write the leave control
   1770            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1771                           0,
   1772                           sizeof( uint8 ),
   1773                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
   1774          }
   1775          
   1776          /*********************************************************************
   1777           * @fn      ZDApp_LeaveCtrlReset
   1778           *
   1779           * @brief   Re-initialize the leave control logic.
   1780           *
   1781           * @param   none
   1782           *
   1783           * @return  none
   1784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1785          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1787            // Set leave control to initialized state
   1788            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1789          
   1790            // Write initialized control
   1791            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1792                          0,
   1793                          sizeof( uint8 ),
   1794                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1795          }
   1796          
   1797          /*********************************************************************
   1798           * @fn      ZDApp_LeaveCtrlBypass
   1799           *
   1800           * @brief   Check if NV restore should be skipped during a leave reset.
   1801           *
   1802           * @param   none
   1803           *
   1804           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1805           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1806          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1807          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1808            uint8 bypass;
   1809          
   1810            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1811            {
   1812              bypass = TRUE;
   1813            }
   1814            else
   1815            {
   1816              bypass = FALSE;
   1817            }
   1818          
   1819            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine36_0
   1820          }
   1821          
   1822          /*********************************************************************
   1823           * @fn      ZDApp_LeaveCtrlStartup
   1824           *
   1825           * @brief   Check for startup conditions during a leave reset.
   1826           *
   1827           * @param   state      - devState_t determined by leave control logic
   1828           * @param   startDelay - startup delay
   1829           *
   1830           * @return  none
   1831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1832          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1833          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1834            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1835          
   1836            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1837            {
   1838              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1839              {
   1840                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1841              }
   1842              else
   1843              {
   1844                *state = DEV_INIT;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1845              }
   1846          
   1847              // Reset leave control logic
   1848              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay; Banked call to: ZDApp_LeaveCtrlReset
   1849            }
   1850          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine36_0
   1851          
   1852          /*********************************************************************
   1853           * @fn      ZDApp_LeaveReset
   1854           *
   1855           * @brief   Setup a device reset due to a leave indication/confirm.
   1856           *
   1857           * @param   ra - reassociate flag
   1858           *
   1859           * @return  none
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1862          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1863            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay; Banked call to: ZDApp_LeaveCtrlSet
   1864          
   1865            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay; Banked call to: ZDApp_ResetTimerStart
   1866          }
   \   00000F   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   1867          
   1868          /*********************************************************************
   1869           * @fn      ZDApp_LeaveUpdate
   1870           *
   1871           * @brief   Update local device data related to leaving device.
   1872           *
   1873           * @param   nwkAddr        - NWK address of leaving device
   1874           * @param   extAddr        - EXT address of leaving device
   1875           * @param   removeChildren - remove children of leaving device
   1876           *
   1877           * @return  none
   1878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1879          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1880                                  uint8 removeChildren )
   1881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   1882            // Remove Apps Key for leaving device
   1883            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   1884          
   1885            // Clear SECURITY bit from Address Manager
   1886            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   ??ZDSecMgrAddrClear?relay; Banked call to: ZDSecMgrAddrClear
   1887          
   1888            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000028   6033         JZ      ??ZDApp_LeaveUpdate_0
   1889            {
   1890              zAddrType_t devAddr;
   1891          
   1892              // Remove bind entry and all related data
   1893              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV     A,#0x10
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   1894              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V4,R6
   \   000034   8F..         MOV     ?V5,R7
   \   000036   75..00       MOV     ?V6,#0x0
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   740B         MOV     A,#0xb
   \   000044   12....       LCALL   ?XSTACK_DISP101_8
   \   000047   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1895          
   1896              pbindRemoveDev(&devAddr);
   \   00004F                ; Setup parameters for indirect call
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   90....       MOV     DPTR,#pbindRemoveDev
   \   000057   12....       LCALL   ?Subroutine20 & 0xFFFF
   1897            }
   \                     ??CrossCallReturnLabel_69:
   \   00005A   12....       LCALL   ?CALL_IND
   1898          
   1899            // Remove if child
   1900            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6004         JZ      ??ZDApp_LeaveUpdate_1
   \   000063   6401         XRL     A,#0x1
   \   000065   7047         JNZ     ??ZDApp_LeaveUpdate_2
   1901            {
   1902              // Router shall notify the Trust Center that a child device has left the network
   1903              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_1:
   \   000067                ; Setup parameters for call to function AssocIsChild
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   ??AssocIsChild?relay ; Banked call to: AssocIsChild
   \   00006E   E9           MOV     A,R1
   \   00006F   6401         XRL     A,#0x1
   \   000071   7032         JNZ     ??ZDApp_LeaveUpdate_3
   1904              {
   1905                  APSME_UpdateDeviceReq_t req;
   1906          
   1907                  // forward authorization to the Trust Center
   1908                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
   1909                  req.devAddr    = nwkAddr;
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   1910                  req.devExtAddr = extAddr;
   \                     ??CrossCallReturnLabel_47:
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   EE           MOV     A,R6
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   EF           MOV     A,R7
   \   00008E   F0           MOVX    @DPTR,A
   1911                  req.status = APSME_UD_DEVICE_LEFT;
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   7402         MOV     A,#0x2
   \   000096   F0           MOVX    @DPTR,A
   1912          
   1913                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1914                  {
   1915                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1916                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1917                    // with legacy Coordinator devices which can only handle one or the other.
   1918                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1919                    {
   1920                      req.apsSecure = FALSE;
   1921          
   1922                      // send and APSME_UPDATE_DEVICE request to the trust center
   1923                      APSME_UpdateDeviceReq( &req );
   1924                    }
   1925          
   1926                    // send the message APS encrypted
   1927                    req.apsSecure = TRUE;
   1928          
   1929                    // send and APSME_UPDATE_DEVICE request to the trust center
   1930                    APSME_UpdateDeviceReq( &req );
   1931                  }
   1932                  else
   1933                  {
   1934                    req.apsSecure = FALSE;
   \   000097   7407         MOV     A,#0x7
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   1935          
   1936                    // send and APSME_UPDATE_DEVICE request to the trust center
   1937                    APSME_UpdateDeviceReq( &req );
   \   00009E                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   00009E   AA..         MOV     R2,?XSP + 0
   \   0000A0   AB..         MOV     R3,?XSP + 1
   \   0000A2   12....       LCALL   ??APSME_UpdateDeviceReq?relay; Banked call to: APSME_UpdateDeviceReq
   1938                  }
   1939              }
   1940          
   1941              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_3:
   \   0000A5                ; Setup parameters for call to function NLME_RemoveChild
   \   0000A5   A9..         MOV     R1,?V2
   \   0000A7   EE           MOV     A,R6
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   ??NLME_RemoveChild?relay; Banked call to: NLME_RemoveChild
   1942            }
   1943          
   1944            // Remove Routing table related entry
   1945            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000AE                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000AE   7900         MOV     R1,#0x0
   \   0000B0   AA..         MOV     R2,?V0
   \   0000B2   AB..         MOV     R3,?V1
   \   0000B4   12....       LCALL   ??RTG_RemoveRtgEntry?relay; Banked call to: RTG_RemoveRtgEntry
   1946          
   1947            // Remove entry from neighborTable
   1948            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000B7                ; Setup parameters for call to function nwkNeighborRemove
   \   0000B7   90....       MOV     DPTR,#_NIB + 33
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FC           MOV     R4,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   FD           MOV     R5,A
   \   0000BF   AA..         MOV     R2,?V0
   \   0000C1   AB..         MOV     R3,?V1
   \   0000C3   12....       LCALL   ??nwkNeighborRemove?relay; Banked call to: nwkNeighborRemove
   1949          
   1950            // Schedule to save data to NV
   1951            ZDApp_NwkWriteNVRequest();
   1952          }
   \   0000C6   7411         MOV     A,#0x11
   \   0000C8                REQUIRE ?Subroutine6
   \   0000C8                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0
   1953          
   1954          /*********************************************************************
   1955           * @fn      ZDApp_NetworkDiscoveryReq
   1956           *
   1957           * @brief   Request a network discovery.
   1958           *
   1959           * @param  scanChannels -
   1960           * @param  scanDuration -
   1961           *
   1962           * @return  ZStatus_t
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1966            // Setup optional filters - tbd
   1967          
   1968            // Request NLME network discovery
   1969            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1970          }
   1971          
   1972          /*********************************************************************
   1973           * @fn      ZDApp_JoinReq
   1974           *
   1975           * @brief   Request the device to join a parent in a network.
   1976           *
   1977           * @param   channel -
   1978           * @param   panID -
   1979           *
   1980           * @return  ZStatus_t
   1981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1982          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   1983                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   1985            // Sync up the node with the stack profile (In the case where a pro device
   1986            // joins a non-pro network, or verse versa)
   1987            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   1988          
   1989            // Request NLME Join Request
   1990            return NLME_JoinRequest(extendedPanID, panID,channel,
   1991                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   1992                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV     A,#0x4
   \   000048   02....       LJMP    ?Subroutine1 & 0xFFFF
   1993          
   1994          }
   1995          
   1996          /*********************************************************************
   1997           * @fn      ZDApp_DeviceConfigured
   1998           *
   1999           * @brief   Check to see if the local device is configured (i.e., part
   2000           *          of a network).
   2001           *
   2002           * @param   none
   2003           *
   2004           * @return  TRUE if configured. FALSE, otherwise.
   2005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2006          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2007          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2008            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2009          
   2010            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2011                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2012          
   2013            // Does the NIB have anything more than default?
   2014            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   02....       LJMP    ?Subroutine8 & 0xFFFF
   2015          }
   2016          
   2017          /*********************************************************************
   2018           * CALLBACK FUNCTIONS
   2019           */
   2020          
   2021          
   2022          /*********************************************************************
   2023           * @fn      ZDApp_SendEventMsg()
   2024           *
   2025           * @brief
   2026           *
   2027           *   Sends a Network Join message
   2028           *
   2029           * @param  cmd - command ID
   2030           * @param  len - length (in bytes) of the buf field
   2031           * @param  buf - buffer for the rest of the message.
   2032           *
   2033           * @return  none
   2034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2035          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2036          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2037            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2038          }
   \   000013   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   2039          
   2040          /*********************************************************************
   2041           * @fn      ZDApp_SendMsg()
   2042           *
   2043           * @brief   Sends a OSAL message
   2044           *
   2045           * @param  taskID - Where to send the message
   2046           * @param  cmd - command ID
   2047           * @param  len - length (in bytes) of the buf field
   2048           * @param  buf - buffer for the rest of the message.
   2049           *
   2050           * @return  none
   2051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2052          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2054            osal_event_hdr_t *msgPtr;
   2055          
   2056            // Send the address to the task
   2057            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0,DPL
   \   000014   75..00       MOV     ?V1,#0x0
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   AA..         MOV     R2,?V0
   \   000019   AB..         MOV     R3,?V1
   \   00001B   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00001E   8A..         MOV     ?V8,R2
   \   000020   8B..         MOV     ?V9,R3
   \   000022   AE..         MOV     R6,?V8
   \   000024   AF..         MOV     R7,?V9
   2058            if ( msgPtr )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   6034         JZ      ??ZDApp_SendMsg_0
   2059            {
   2060              if ( (len > 0) && (buf != NULL) )
   \   00002A   E5..         MOV     A,?V5
   \   00002C   6020         JZ      ??ZDApp_SendMsg_1
   \   00002E   E5..         MOV     A,?V2
   \   000030   45..         ORL     A,?V3
   \   000032   601A         JZ      ??ZDApp_SendMsg_1
   2061                osal_memcpy( msgPtr, buf, len );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   85....       MOV     ?V8,?V2
   \   000037   85....       MOV     ?V9,?V3
   \   00003A   75..00       MOV     ?V10,#0x0
   \   00003D   78..         MOV     R0,#?V8
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   AC..         MOV     R4,?V0
   \   000044   AD..         MOV     R5,?V1
   \   000046   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   2062          
   2063              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   E5..         MOV     A,?V6
   \   000054   F0           MOVX    @DPTR,A
   2064              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V4
   \   00005B   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   2065            }
   2066          }
   \                     ??ZDApp_SendMsg_0:
   \   00005E   7F0B         MOV     R7,#0xb
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
   2067          
   2068          /*********************************************************************
   2069           * Call Back Functions from NWK  - API
   2070           */
   2071          
   2072          /*********************************************************************
   2073           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2074           *
   2075           * @brief       This function returns a choice of PAN to join.
   2076           *
   2077           * @param       status - return status of the nwk discovery confirm
   2078           *
   2079           * @return      ZStatus_t
   2080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2081          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2082          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2083            osal_event_hdr_t msg;
   2084          
   2085            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2086            // Send ZDO_MGMT_NWK_DISC_RSP back
   2087          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2088            if ( zdappMgmtNwkDiscReqInProgress )
   2089            {
   2090              zdappMgmtNwkDiscReqInProgress = false;
   2091              ZDO_FinishProcessingMgmtNwkDiscReq();
   2092            }
   2093            else
   2094          #endif
   2095            {
   2096              // Pass the confirm to another task if it registers the callback
   2097              // Otherwise, pass the confirm to ZDApp.
   2098              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000017   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2099              {
   2100                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   \   000020   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2101              }
   2102              else
   2103              {
   2104                // Otherwise, send scan confirm to ZDApp task to proceed
   2105                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   2106                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC     A
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7B02         MOV     R3,#0x2
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2107              }
   2108            }
   2109            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine3 & 0xFFFF
   2110          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2111          
   2112          /*********************************************************************
   2113           * @fn          ZDApp_NwkDescListProcessing
   2114           *
   2115           * @brief       This function process the network discovery result and select
   2116           *              a parent device to join itself.
   2117           *
   2118           * @param       none
   2119           *
   2120           * @return      ZStatus_t
   2121           */
   2122          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2123          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2125            networkDesc_t *pNwkDesc;
   2126            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   2127            uint8 stackProfile;
   2128            uint8 stackProfilePro;
   2129            uint8 selected;
   2130          
   2131            // Count the number of nwk descriptors in the list
   2132            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_63
   2133            while (pNwkDesc)
   2134            {
   2135              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V0
   2136              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine18 & 0xFFFF
   2137            }
   \                     ??CrossCallReturnLabel_63:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2138          
   2139            // process discovery results
   2140            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V3,#0x0
   2141            selected = FALSE;
   2142          
   2143          
   2144            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V1,#0x0
   2145            {
   2146              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2147              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V2,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_64
   2148              {
   2149                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2150                {
   2151                  // If the extended Pan ID is commissioned to a non zero value
   2152                  // Only join the Pan that has match EPID
   2153                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2154                    continue;
   2155          
   2156                }
   2157                else if ( zgConfigPANID != 0xFFFF )
   2158                {
   2159                  // PAN Id is preconfigured. check if it matches
   2160                  if ( pNwkDesc->panId != zgConfigPANID )
   2161                    continue;
   2162                }
   2163          
   2164                // check that network is allowing joining
   2165                if ( ZSTACK_ROUTER_BUILD )
   2166                {
   2167                  if ( stackProfilePro == FALSE )
   2168                  {
   2169                    if ( !pNwkDesc->routerCapacity )
   2170                    {
   2171                      continue;
   2172                    }
   2173                  }
   2174                  else
   2175                  {
   2176                    if ( !pNwkDesc->deviceCapacity )
   2177                    {
   2178                      continue;
   2179                    }
   2180                  }
   2181                }
   2182                else if ( ZSTACK_END_DEVICE_BUILD )
   2183                {
   2184                  if ( !pNwkDesc->deviceCapacity )
   2185                  {
   2186                    continue;
   2187                  }
   2188                }
   2189          
   2190                // check version of zigbee protocol
   2191                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2192                  continue;
   2193          
   2194                // check version of stack profile
   2195                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2196                {
   2197                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2198                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2199                  {
   2200                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V3,#0x1
   2201                  }
   2202          
   2203                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V1
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V2
   \   00004A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00004D   E5..         MOV     A,?V2
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V0
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV     DPTR,#zgConfigPANID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F4           CPL     A
   \   00007B   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000085   90....       MOV     DPTR,#zgConfigPANID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   68           XRL     A,R0
   \   00008A   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000094   E0           MOVX    A,@DPTR
   \   000095   6004         JZ      ??ZDApp_NwkDescListProcessing_12
   \   000097   6401         XRL     A,#0x1
   \   000099   7010         JNZ     ??ZDApp_NwkDescListProcessing_13
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009B   E5..         MOV     A,?V3
   \   00009D   7011         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   7012         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   0000A9   809D         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6402         XRL     A,#0x2
   \   0000AE   700B         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   608D         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   90....       MOV     DPTR,#_NIB + 17
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   68           XRL     A,R0
   \   0000CB   6003         JZ      $+5
   \   0000CD   02....       LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F8           MOV     R0,A
   \   0000DC   90....       MOV     DPTR,#zgStackProfile
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   68           XRL     A,R0
   \   0000E1   602F         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6401         XRL     A,#0x1
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   68           XRL     A,R0
   \   0000EE   6003         JZ      $+5
   \   0000F0   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000F3   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2204                  {
   2205                    continue;
   2206                  }
   2207                }
   2208          
   2209                break;
   2210              }
   2211          
   2212              if (i < ResultCount)
   2213              {
   2214               selected = TRUE;
   2215                break;
   2216              }
   2217          
   2218              // break if selected or stack profile pro wasn't found
   2219              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000F6   E5..         MOV     A,?V3
   \   0000F8   600C         JZ      ??ZDApp_NwkDescListProcessing_16
   2220              {
   2221                break;
   2222              }
   2223            }
   \   0000FA   05..         INC     ?V1
   \   0000FC   E5..         MOV     A,?V1
   \   0000FE   C3           CLR     C
   \   0000FF   9402         SUBB    A,#0x2
   \   000101   5003         JNC     $+5
   \   000103   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2224          
   2225            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   000106   E5..         MOV     A,?V0
   \   000108   65..         XRL     A,?V2
   \   00010A   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2226            {
   2227              return (NULL);   // couldn't find appropriate PAN to join !
   \   00010C   7A00         MOV     R2,#0x0
   \   00010E   7B00         MOV     R3,#0x0
   \   000110   8004         SJMP    ??ZDApp_NwkDescListProcessing_17
   2228            }
   2229            else
   2230            {
   2231              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000112   EE           MOV     A,R6
   \   000113   FA           MOV     R2,A
   \   000114   EF           MOV     A,R7
   \   000115   FB           MOV     R3,A
   2232            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000116   80..         SJMP    ??Subroutine38_0
   2233          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine41_0
   \   000009                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2234          
   2235          /*********************************************************************
   2236           * @fn          ZDO_NetworkFormationConfirmCB
   2237           *
   2238           * @brief       This function reports the results of the request to
   2239           *              initialize a coordinator in a network.
   2240           *
   2241           * @param       Status - Result of NLME_NetworkFormationRequest()
   2242           *
   2243           * @return      none
   2244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2245          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2246          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2247            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2248          
   2249            if ( Status == ZSUCCESS )
   \   00000A   700D         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2250            {
   2251              // LED on shows Coordinator started
   2252              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7902         MOV     R1,#0x2
   \   000010   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2253          
   2254              // LED off forgets HOLD_AUTO_START
   2255              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   8004         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2256          
   2257          #if defined ( ZBIT )
   2258              SIM_SetColor(0xd0ffd0);
   2259          #endif
   2260          
   2261            }
   2262          #if defined(BLINK_LEDS)
   2263            else
   2264            {
   2265              HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   7902         MOV     R1,#0x2
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001D   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2266            }
   2267          #endif
   2268          
   2269            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \   000020                ; Setup parameters for call to function osal_set_event
   \   000020   7A02         MOV     R2,#0x2
   \   000022   02....       LJMP    ?Subroutine0 & 0xFFFF
   2270          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine42_0
   \   00000A                ; // Fall through to label ??Subroutine42_0
   2271          
   2272          /****************************************************************************
   2273           * @fn          ZDApp_beaconIndProcessing
   2274           *
   2275           * @brief       This function processes the incoming beacon indication.
   2276           *
   2277           *              When another task (MT or App) is registered to process
   2278           *              beacon indication themselves, this function will parse the
   2279           *              beacon payload and pass the beacon descriptor to that task
   2280           *              If no other tasks registered, this function will process
   2281           *              the beacon payload and generate the network descriptor link
   2282           *              list.
   2283           *
   2284           * @param
   2285           *
   2286           * @return      none
   2287           *
   2288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2289          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2290          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2291            // Pass the beacon Indication to another task if it registers the callback
   2292            // Otherwise, process the beacon notification here.
   2293            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2294            {
   2295              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2296            }
   2297            else
   2298            {
   2299              networkDesc_t *pNwkDesc;
   2300              networkDesc_t *pLastNwkDesc;
   2301              uint8 found = false;
   2302          
   2303              // Add the network to the Network Descriptor List
   2304              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2305              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_60:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V1
   \   00002F   F5..         MOV     ?V7,A
   \   000031   EA           MOV     A,R2
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   802B         SJMP    ??CrossCallReturnLabel_65
   2306              while (pNwkDesc)
   2307              {
   2308                if ((pNwkDesc->panId == pBeacon->panID) &&
   2309                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000040   85..82       MOV     DPL,?V4
   \   000043   85..83       MOV     DPH,?V5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   68           XRL     A,R0
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   85..82       MOV     DPL,?V6
   \   00005A   85..83       MOV     DPH,?V7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2310                {
   2311                  found = true;
   2312                  break;
   2313                }
   2314                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV     ?V2,R6
   \   000063   8F..         MOV     ?V3,R7
   2315                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL   ?Subroutine18 & 0xFFFF
   2316              }
   \                     ??CrossCallReturnLabel_65:
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2317          
   2318              // If no existing descriptor found, make a new one and add to the list
   2319              if (found == false)
   2320              {
   2321                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV     R2,#0x16
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   AE..         MOV     R6,?V8
   \   000079   AF..         MOV     R7,?V9
   2322                if ( !pNwkDesc )
   \   00007B   EE           MOV     A,R6
   \   00007C   4F           ORL     A,R7
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2323                {
   2324                  // Memory alloc failed, discard this beacon
   2325                  return;
   2326                }
   2327          
   2328                // Clear the network descriptor
   2329                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV     R4,#0x16
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2330          
   2331                // Initialize the descriptor
   2332                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   74FE         MOV     A,#-0x2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   04           INC     A
   \   00009B   F0           MOVX    @DPTR,A
   2333                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   2334          
   2335                // Save new entry into the descriptor list
   2336                if ( !NwkDescList )
   \   0000AB   90....       MOV     DPTR,#NwkDescList
   \   0000AE   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000B1   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2337                {
   2338                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV     DPTR,#NwkDescList
   \   0000B6   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2339                }
   2340                else
   2341                {
   2342                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   2343                }
   2344              }
   2345          
   2346              // Update the descriptor with the incoming beacon
   2347              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   2348              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2408         ADD     A,#0x8
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000EC   F0           MOVX    @DPTR,A
   2349              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2350              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2351              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_87:
   \   00010B   E5..         MOV     A,?V0
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   EE           MOV     A,R6
   \   00011A   2413         ADD     A,#0x13
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   3F           ADDC    A,R7
   \   000120   F583         MOV     DPH,A
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   2352          
   2353              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2354              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   3F           ADDC    A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2355              {
   2356                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV     A,?V0
   \   000137   240D         ADD     A,#0xd
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V1
   \   00013D   FD           MOV     R5,A
   \   00013E   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2357              }
   2358              else
   2359              {
   2360                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   79FF         MOV     R1,#-0x1
   \   000149   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2361              }
   2362          
   2363              // check if this device is a better choice to join...
   2364              // ...dont bother checking assocPermit flag is doing a rejoin
   2365              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2366                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240A         ADD     A,#0xa
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   35..         ADDC    A,?V1
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V4,A
   \   00015C   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C3           CLR     C
   \   000161   95..         SUBB    A,?V4
   \   000163   4003         JC      $+5
   \   000165   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000168   85..82       MOV     DPL,?V0
   \   00016B   85..83       MOV     DPH,?V1
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   6401         XRL     A,#0x1
   \   000176   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000178   90....       MOV     DPTR,#_tmpRejoinState
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2367              {
   2368                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000181   75..00       MOV     ?V6,#0x0
   2369                uint8 capacity = FALSE;
   2370          
   2371                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000184   EE           MOV     A,R6
   \   000185   240A         ADD     A,#0xa
   \   000187   FA           MOV     R2,A
   \   000188   E4           CLR     A
   \   000189   3F           ADDC    A,R7
   \   00018A   FB           MOV     R3,A
   \   00018B   E5..         MOV     A,?V0
   \   00018D   240B         ADD     A,#0xb
   \   00018F   FC           MOV     R4,A
   \   000190   E4           CLR     A
   \   000191   35..         ADDC    A,?V1
   \   000193   FD           MOV     R5,A
   \   000194   EE           MOV     A,R6
   \   000195   2409         ADD     A,#0x9
   \   000197   F5..         MOV     ?V2,A
   \   000199   E4           CLR     A
   \   00019A   3F           ADDC    A,R7
   \   00019B   F5..         MOV     ?V3,A
   \   00019D   90....       MOV     DPTR,#_NIB + 96
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   6402         XRL     A,#0x2
   \   0001A3   7020         JNZ     ??ZDO_beaconNotifyIndCB_11
   2372                {
   2373                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2374                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2375                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2376                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   0001A5   85..82       MOV     DPL,?V2
   \   0001A8   85..83       MOV     DPH,?V3
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   F5..         MOV     ?V5,A
   \   0001AE   C3           CLR     C
   \   0001AF   95..         SUBB    A,?V4
   \   0001B1   500C         JNC     ??ZDO_beaconNotifyIndCB_12
   \   0001B3   8C82         MOV     DPL,R4
   \   0001B5   8D83         MOV     DPH,R5
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   C3           CLR     C
   \   0001B9   9414         SUBB    A,#0x14
   \   0001BB   4019         JC      ??ZDO_beaconNotifyIndCB_13
   \   0001BD   801A         SJMP    ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001BF   E5..         MOV     A,?V5
   \   0001C1   65..         XRL     A,?V4
   \   0001C3   7014         JNZ     ??ZDO_beaconNotifyIndCB_14
   2377                  {
   2378                    selected = TRUE;
   2379                  }
   2380                }
   2381                else
   2382                {
   2383                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001C5   8A82         MOV     DPL,R2
   \   0001C7   8B83         MOV     DPH,R3
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   F5..         MOV     ?V4,A
   \   0001CC   8C82         MOV     DPL,R4
   \   0001CE   8D83         MOV     DPH,R5
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   C3           CLR     C
   \   0001D2   95..         SUBB    A,?V4
   \   0001D4   5003         JNC     ??ZDO_beaconNotifyIndCB_14
   2384                  {
   2385                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D6   75..01       MOV     ?V6,#0x1
   2386                  }
   2387                }
   2388          
   2389                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001D9   E5..         MOV     A,?V0
   \   0001DB   2406         ADD     A,#0x6
   \   0001DD   F5..         MOV     ?V4,A
   \   0001DF   E4           CLR     A
   \   0001E0   35..         ADDC    A,?V1
   \   0001E2   F5..         MOV     ?V5,A
   \   0001E4   E5..         MOV     A,?V0
   \   0001E6   2407         ADD     A,#0x7
   \   0001E8   F5..         MOV     ?V8,A
   \   0001EA   E4           CLR     A
   \   0001EB   35..         ADDC    A,?V1
   \   0001ED   F5..         MOV     ?V9,A
   \   0001EF   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   6004         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0001F5   6401         XRL     A,#0x1
   \   0001F7   7008         JNZ     ??ZDO_beaconNotifyIndCB_16
   2390                {
   2391                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001F9   85..82       MOV     DPL,?V4
   \   0001FC   85..83       MOV     DPH,?V5
   \   0001FF   800B         SJMP    ??ZDO_beaconNotifyIndCB_17
   2392                }
   2393                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000201   E0           MOVX    A,@DPTR
   \   000202   6402         XRL     A,#0x2
   \   000204   703E         JNZ     ??ZDO_beaconNotifyIndCB_18
   2394                {
   2395                  capacity = pBeacon->deviceCapacity;
   \   000206   85..82       MOV     DPL,?V8
   \   000209   85..83       MOV     DPH,?V9
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   00020C   E0           MOVX    A,@DPTR
   2396                }
   2397          
   2398                if ( (capacity) && (selected) )
   \   00020D   6035         JZ      ??ZDO_beaconNotifyIndCB_18
   \   00020F   E5..         MOV     A,?V6
   \   000211   A2E0         MOV     C,0xE0 /* A   */.0
   \   000213   502F         JNC     ??ZDO_beaconNotifyIndCB_18
   2399                {
   2400                  // this is the new chosen router for joining...
   2401                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000215   85..82       MOV     DPL,?V0
   \   000218   85..83       MOV     DPH,?V1
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   F5..         MOV     ?V0,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F5..         MOV     ?V1,A
   \   000222   8E82         MOV     DPL,R6
   \   000224   8F83         MOV     DPH,R7
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   12....       LCALL   ?Subroutine12 & 0xFFFF
   2402                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_48:
   \   00022E   8882         MOV     DPL,R0
   \   000230   8983         MOV     DPH,R1
   \   000232   E0           MOVX    A,@DPTR
   \   000233   85..82       MOV     DPL,?V2
   \   000236   85..83       MOV     DPH,?V3
   \   000239   F0           MOVX    @DPTR,A
   2403                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   00023A   8C82         MOV     DPL,R4
   \   00023C   8D83         MOV     DPH,R5
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   8A82         MOV     DPL,R2
   \   000241   8B83         MOV     DPH,R3
   \   000243   F0           MOVX    @DPTR,A
   2404                }
   2405          
   2406                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_18:
   \   000244   85..82       MOV     DPL,?V8
   \   000247   85..83       MOV     DPH,?V9
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   600B         JZ      ??ZDO_beaconNotifyIndCB_19
   2407                  pNwkDesc->deviceCapacity = 1;
   \   00024D   8E82         MOV     DPL,R6
   \   00024F   8F83         MOV     DPH,R7
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   7401         MOV     A,#0x1
   \   000257   F0           MOVX    @DPTR,A
   2408          
   2409                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_19:
   \   000258   85..82       MOV     DPL,?V4
   \   00025B   85..83       MOV     DPH,?V5
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2410                  pNwkDesc->routerCapacity = 1;
   \   000261   8E82         MOV     DPL,R6
   \   000263   8F83         MOV     DPH,R7
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   7401         MOV     A,#0x1
   \   00026A   F0           MOVX    @DPTR,A
   2411              }
   2412            }
   2413          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00026B   7F0A         MOV     R7,#0xa
   \   00026D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine39_0
   \   000002                ; // Fall through to label ??Subroutine39_0
   2414          
   2415          /*********************************************************************
   2416           * @fn          ZDO_StartRouterConfirmCB
   2417           *
   2418           * @brief       This function reports the results of the request to
   2419           *              start functioning as a router in a network.
   2420           *
   2421           * @param       Status - Result of NLME_StartRouterRequest()
   2422           *
   2423           * @return      none
   2424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2425          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2426          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2427            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2428          
   2429            if ( Status == ZSUCCESS )
   \   00000A   700D         JNZ     ??ZDO_StartRouterConfirmCB_0
   2430            {
   2431              // LED on shows Router started
   2432              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7902         MOV     R1,#0x2
   \   000010   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2433              // LED off forgets HOLD_AUTO_START
   2434              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   8004         SJMP    ??ZDO_StartRouterConfirmCB_1
   2435            }
   2436          #if defined(BLINK_LEDS)
   2437            else
   2438            {
   2439              HalLedSet( HAL_LED_2, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   7902         MOV     R1,#0x2
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001D   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2440            }
   2441          #endif
   2442          
   2443            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \   000020                ; Setup parameters for call to function osal_set_event
   \   000020   7A20         MOV     R2,#0x20
   \   000022   02....       LJMP    ?Subroutine0 & 0xFFFF
   2444          }
   2445          
   2446          /*********************************************************************
   2447           * @fn          ZDO_JoinConfirmCB
   2448           *
   2449           * @brief       This function allows the next higher layer to be notified
   2450           *              of the results of its request to join itself or another
   2451           *              device to a network.
   2452           *
   2453           * @param       Status - Result of NLME_JoinRequest()
   2454           *
   2455           * @return      none
   2456           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2457          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2458          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2459            (void)PanId;  // remove if this parameter is used.
   2460          
   2461            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2462          
   2463            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2464            {
   2465              if ( ZSTACK_END_DEVICE_BUILD
   2466                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6402         XRL     A,#0x2
   \   00001C   600F         JZ      ??ZDO_JoinConfirmCB_1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6004         JZ      ??ZDO_JoinConfirmCB_2
   \   000021   6401         XRL     A,#0x1
   \   000023   707C         JNZ     ??ZDO_JoinConfirmCB_3
   \                     ??ZDO_JoinConfirmCB_2:
   \   000025   90....       MOV     DPTR,#_NIB + 14
   \   000028   E0           MOVX    A,@DPTR
   \   000029   A2E1         MOV     C,0xE0 /* A   */.1
   \   00002B   4074         JC      ??ZDO_JoinConfirmCB_3
   2467              {
   2468                neighborEntry_t *pItem;
   2469           
   2470                // We don't need the neighbor table entries.  
   2471                // Clear the neighbor Table to remove beacon information
   2472                nwkNeighborInitTable();
   \                     ??ZDO_JoinConfirmCB_1:
   \   00002D                ; Setup parameters for call to function nwkNeighborInitTable
   \   00002D   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   2473           
   2474                // Force a neighbor table entry for the parent
   2475                pItem = nwkNeighborFindEmptySlot();
   \   000030                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000030   12....       LCALL   ??nwkNeighborFindEmptySlot?relay; Banked call to: nwkNeighborFindEmptySlot
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   \   000037   AE..         MOV     R6,?V2
   \   000039   AF..         MOV     R7,?V3
   2476                if ( pItem != NULL )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   6062         JZ      ??ZDO_JoinConfirmCB_3
   2477                {
   2478                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   00003F                ; Setup parameters for call to function osal_memset
   \   00003F   7C17         MOV     R4,#0x17
   \   000041   7D00         MOV     R5,#0x0
   \   000043   7900         MOV     R1,#0x0
   \   000045   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2479                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000048   90....       MOV     DPTR,#_NIB + 23
   \   00004B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004E   E8           MOV     A,R0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E9           MOV     A,R1
   \   000052   F0           MOVX    @DPTR,A
   2480                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000055   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000057   EE           MOV     A,R6
   \   000058   2402         ADD     A,#0x2
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   3F           ADDC    A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2481                  pItem->panId = _NIB. nwkPanId;
   \   000061   90....       MOV     DPTR,#_NIB + 33
   \   000064   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   F0           MOVX    @DPTR,A
   2482                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000076   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000079   74AA         MOV     A,#-0x56
   \   00007B   F0           MOVX    @DPTR,A
   2483                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00007C   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   00007F   E4           CLR     A
   \   000080   93           MOVC    A,@A+DPTR
   \   000081   7900         MOV     R1,#0x0
   \   000083   2401         ADD     A,#0x1
   \   000085   F8           MOV     R0,A
   \   000086   5001         JNC     ??ZDO_JoinConfirmCB_4
   \   000088   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_4:
   \   000089   7A02         MOV     R2,#0x2
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   12....       LCALL   ?S_DIV_MOD
   \   000090   EE           MOV     A,R6
   \   000091   240D         ADD     A,#0xd
   \   000093   F582         MOV     DPL,A
   \   000095   E4           CLR     A
   \   000096   3F           ADDC    A,R7
   \   000097   F583         MOV     DPH,A
   \   000099   E8           MOV     A,R0
   \   00009A   F0           MOVX    @DPTR,A
   2484                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00009B   12....       LCALL   ?Subroutine29 & 0xFFFF
   2485                }
   2486              }
   \                     ??CrossCallReturnLabel_32:
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   F0           MOVX    @DPTR,A
   2487              
   2488              // LED on shows device joined
   2489              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000A1                ; Setup parameters for call to function HalLedSet
   \   0000A1   7A01         MOV     R2,#0x1
   \   0000A3   7901         MOV     R1,#0x1
   \   0000A5   8004         SJMP    ??ZDO_JoinConfirmCB_5
   2490          	
   2491              if ( !ZG_SECURE_ENABLED ) {
   2492                // Notify to save info into NV
   2493                ZDApp_NVUpdate();
   2494              }
   2495            }
   2496            else
   2497            {
   2498          #if defined(BLINK_LEDS)
   2499              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000A7                ; Setup parameters for call to function HalLedSet
   \   0000A7   7A04         MOV     R2,#0x4
   \   0000A9   7904         MOV     R1,#0x4
   \                     ??ZDO_JoinConfirmCB_5:
   \   0000AB   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2500          #endif
   2501            }
   2502          
   2503            // Pass the join confirm to higher layer if callback registered
   2504            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \   0000AE   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000B1   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000B4   6030         JZ      ??ZDO_JoinConfirmCB_6
   2505            {
   2506              zdoJoinCnf_t joinCnf;
   2507          
   2508              joinCnf.status = Status;
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   E5..         MOV     A,?V0
   \   0000BE   F0           MOVX    @DPTR,A
   2509              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000BF   90....       MOV     DPTR,#_NIB + 20
   \   0000C2   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2510              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_88:
   \   0000CD   90....       MOV     DPTR,#_NIB + 23
   \   0000D0   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2511          
   2512              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_89:
   \   0000DB                ; Setup parameters for indirect call
   \   0000DB   AA..         MOV     R2,?XSP + 0
   \   0000DD   AB..         MOV     R3,?XSP + 1
   \   0000DF   8882         MOV     DPL,R0
   \   0000E1   8983         MOV     DPH,R1
   \   0000E3   12....       LCALL   ?CALL_IND
   2513            }
   2514          
   2515            // Notify ZDApp
   2516            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_6:
   \   0000E6                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000E6   7C00         MOV     R4,#0x0
   \   0000E8   7D00         MOV     R5,#0x0
   \   0000EA   7B02         MOV     R3,#0x2
   \   0000EC   7A02         MOV     R2,#0x2
   \   0000EE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2517          
   2518          }
   \   0000F6   7405         MOV     A,#0x5
   \   0000F8   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2519          
   2520          /*********************************************************************
   2521           * @fn          ZDO_PermitJoinCB
   2522           *
   2523           * @brief      This function is called when there is a change in the
   2524           *             device's permit join status.
   2525           *
   2526           * @param       duration - the new duration
   2527           *
   2528           * @return      none
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2531          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2532            // Pass the Permit Join status to higher layer if callback registered
   2533            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2534            {
   2535              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2536            }
   2537          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   02....       LJMP    ?Subroutine3 & 0xFFFF
   2538          
   2539          /*********************************************************************
   2540           * @fn          ZDO_AddrChangeIndicationCB
   2541           *
   2542           * @brief       This function notifies the application that this
   2543           *              device's address has changed.  Could happen in
   2544           *              a network with stochastic addressing (PRO).
   2545           *
   2546           * @param       newAddr - the new address
   2547           *
   2548           * @return      none
   2549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2550          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2552            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2553            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2554          
   2555            // Notify to save info into NV
   2556            ZDApp_NVUpdate();
   2557          
   2558            // Notify the applications
   2559            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_61:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   7A10         MOV     R2,#0x10
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#ZDAppTaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00001B   8041         SJMP    ??CrossCallReturnLabel_62
   2560          
   2561            while (pItem != NULL)
   2562            {
   2563              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00001D   EE           MOV     A,R6
   \   00001E   2402         ADD     A,#0x2
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3F           ADDC    A,R7
   \   000023   F9           MOV     R1,A
   \   000024   88..         MOV     ?V2,R0
   \   000026   89..         MOV     ?V3,R1
   \   000028   8882         MOV     DPL,R0
   \   00002A   F583         MOV     DPH,A
   \   00002C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002F   6026         JZ      ??ZDO_AddrChangeIndicationCB_1
   2564              {
   2565                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000031                ; Setup parameters for call to function osal_msg_allocate
   \   000031   7A04         MOV     R2,#0x4
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   2566                if (pZDOAddrChangeMsg != NULL)
   \   000038   EA           MOV     A,R2
   \   000039   4B           ORL     A,R3
   \   00003A   601B         JZ      ??ZDO_AddrChangeIndicationCB_1
   2567                {
   2568                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   74D6         MOV     A,#-0x2a
   \   000042   F0           MOVX    @DPTR,A
   2569                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000043   12....       LCALL   ?Subroutine12 & 0xFFFF
   2570                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \                     ??CrossCallReturnLabel_49:
   \   000046                ; Setup parameters for call to function osal_msg_send
   \   000046   85..82       MOV     DPL,?V2
   \   000049   85..83       MOV     DPH,?V3
   \   00004C   12....       LCALL   ?Subroutine20 & 0xFFFF
   2571                }
   2572              }
   \                     ??CrossCallReturnLabel_70:
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   2573              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2574            }
   \                     ??CrossCallReturnLabel_62:
   \   00005E   EE           MOV     A,R6
   \   00005F   4F           ORL     A,R7
   \   000060   70BB         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2575          
   2576            // Send out a device announce
   2577            ZDApp_AnnounceNewAddress();
   \   000062                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000062   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   2578          }
   \   000065   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2579          
   2580          /*********************************************************************
   2581           * @fn          ZDO_JoinIndicationCB
   2582           *
   2583           * @brief       This function allows the next higher layer of a
   2584           *              coordinator to be notified of a remote join request.
   2585           *
   2586           * @param       ShortAddress - 16-bit address
   2587           * @param       ExtendedAddress - IEEE (64-bit) address
   2588           * @param       CapabilityFlags - Association Capability Flags
   2589           * @param       type - of joining -
   2590           *                          NWK_ASSOC_JOIN
   2591           *                          NWK_ASSOC_REJOIN_UNSECURE
   2592           *                          NWK_ASSOC_REJOIN_SECURE
   2593           *
   2594           * @return      ZStatus_t
   2595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2596          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2597                                          uint8 CapabilityFlags, uint8 type)
   2598          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2599            (void)ExtendedAddress;
   2600          #if ZDO_NV_SAVE_RFDs
   2601            (void)CapabilityFlags;
   2602          
   2603          #else  // if !ZDO_NV_SAVE_RFDs
   2604            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2605          #endif
   2606            {
   2607              ZDApp_NVUpdate();  // Notify to save info into NV.
   2608            }
   2609          
   2610            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2611            {
   2612              if ( type == NWK_ASSOC_JOIN ||
   2613                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2614                   type == NWK_ASSOC_REJOIN_SECURE )
   2615              {
   2616                uint16 timeToFire;
   2617                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2618          
   2619                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   2620          
   2621                if ( pNewDevice == NULL )
   2622                {
   2623                  // Memory alloc failed
   2624                  return ZMemError;
   2625                }
   2626          
   2627                // Add the new device to the New Device List
   2628                if ( ZDApp_NewDeviceList == NULL )
   2629                {
   2630                  // The list is empty, add the first element
   2631                  ZDApp_NewDeviceList = pNewDevice;
   2632                }
   2633                else
   2634                {
   2635                  pDeviceList = ZDApp_NewDeviceList;
   2636          
   2637                  // Walk the list to last element
   2638                  while ( pDeviceList->next )
   2639                  {
   2640                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   2641                  }
   2642          
   2643                  // Add new device at the end
   2644                  pDeviceList->next = pNewDevice;
   2645                }
   2646          
   2647                // get the remaining time of the timer
   2648                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   2649          
   2650                pNewDevice->next = NULL;
   2651                pNewDevice->shortAddr = ShortAddress;
   2652                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   2653          
   2654                // Start the timer only if there is no pending timer
   2655                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   2656                {
   2657                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   2658                }
   2659              }
   2660            }
   2661          
   2662            return ZSuccess;
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2663          }
   2664          
   2665          /*********************************************************************
   2666           * @fn          ZDO_ConcentratorIndicationCB
   2667           *
   2668           * @brief       This function allows the next higher layer of a
   2669           *              device to be notified of existence of the concentrator.
   2670           *
   2671           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2672           * @param       extAddr - pointer to extended Address
   2673           *                        NULL if not available
   2674           * @param       pktCost - PktCost from RREQ
   2675           *
   2676           * @return      void
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2679          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2680            zdoConcentratorInd_t conInd;
   2681          
   2682            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
   2683            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_93:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2684            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2685          
   2686            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   2687            {
   2688              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   2689            }
   2690          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D                REQUIRE ?Subroutine7
   \   00002D                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   80..         SJMP    ??Subroutine42_0
   2691          
   2692          /*********************************************************************
   2693           * @fn          ZDO_LeaveCnf
   2694           *
   2695           * @brief       This function allows the next higher layer to be
   2696           *              notified of the results of its request for this or
   2697           *              a child device to leave the network.
   2698           *
   2699           * @param       cnf - NLME_LeaveCnf_t
   2700           *
   2701           * @return      none
   2702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2703          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2705            // Check for this device
   2706            if ( osal_ExtAddrEqual( cnf->extAddr,
   2707                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   EE           MOV     A,R6
   \   00000A   2402         ADD     A,#0x2
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F5..         MOV     ?V1,A
   \   000012                ; Setup parameters for call to function sAddrExtCmp
   \   000012                ; Setup parameters for call to function NLME_GetExtAddr
   \   000012   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000015   EA           MOV     A,R2
   \   000016   FC           MOV     R4,A
   \   000017   EB           MOV     A,R3
   \   000018   FD           MOV     R5,A
   \   000019   AA..         MOV     R2,?V0
   \   00001B   AB..         MOV     R3,?V1
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   6401         XRL     A,#0x1
   \   000023   701F         JNZ     ??ZDO_LeaveCnf_0
   2708            {
   2709              // Pass the leave confirm to higher layer if callback registered
   2710              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2711                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000028   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002B   600E         JZ      ??ZDO_LeaveCnf_1
   \   00002D                ; Setup parameters for indirect call
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   EF           MOV     A,R7
   \   000030   FB           MOV     R3,A
   \   000031   12....       LCALL   ?CALL_IND
   \   000034   8B..         MOV     ?V1,R3
   \   000036   EA           MOV     A,R2
   \   000037   45..         ORL     A,?V1
   \   000039   702D         JNZ     ??ZDO_LeaveCnf_2
   2712              {
   2713                // Prepare to leave with reset
   2714                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00003B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00003B   12....       LCALL   ?Subroutine27 & 0xFFFF
   2715              }
   2716            }
   \                     ??CrossCallReturnLabel_28:
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   000042   8024         SJMP    ??ZDO_LeaveCnf_2
   2717            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   000044   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6004         JZ      ??ZDO_LeaveCnf_3
   \   00004A   6401         XRL     A,#0x1
   \   00004C   701A         JNZ     ??ZDO_LeaveCnf_2
   2718            {
   2719              // Remove device address(optionally descendents) from data
   2720              ZDApp_LeaveUpdate( cnf->dstAddr,
   2721                                 cnf->extAddr,
   2722                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_3:
   \   00004E                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   AC..         MOV     R4,?V0
   \   000060   AD..         MOV     R5,?V1
   \   000062   12....       LCALL   ?Subroutine15 & 0xFFFF
   2723            }
   \                     ??CrossCallReturnLabel_58:
   \   000065   12....       LCALL   ??ZDApp_LeaveUpdate?relay; Banked call to: ZDApp_LeaveUpdate
   2724          }
   \                     ??ZDO_LeaveCnf_2:
   \   000068   02....       LJMP    ??Subroutine35_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   2725          
   2726          /*********************************************************************
   2727           * @fn          ZDO_LeaveInd
   2728           *
   2729           * @brief       This function allows the next higher layer of a
   2730           *              device to be notified of a remote leave request or
   2731           *              indication.
   2732           *
   2733           * @param       ind - NLME_LeaveInd_t
   2734           *
   2735           * @return      none
   2736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2737          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2739            uint8 leave;
   2740          
   2741          
   2742            // Parent is requesting the leave - NWK layer filters out illegal
   2743            // requests
   2744            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240B         ADD     A,#0xb
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   EE           MOV     A,R6
   \   00001A   240C         ADD     A,#0xc
   \   00001C   08           INC     R0
   \   00001D   E4           CLR     A
   \   00001E   3F           ADDC    A,R7
   \   00001F   F9           MOV     R1,A
   \   000020   88..         MOV     ?V2,R0
   \   000022   89..         MOV     ?V3,R1
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6401         XRL     A,#0x1
   \   000035   704C         JNZ     ??ZDO_LeaveInd_0
   2745            {
   2746              // Only respond if we are not rejoining the network
   2747              if ( ind->rejoin == FALSE )
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7034         JNZ     ??ZDO_LeaveInd_1
   2748              {
   2749                // Notify network of leave
   2750                NLME_LeaveRsp_t rsp;
   2751                rsp.rejoin = ind->rejoin;
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
   2752          
   2753                if ( ZSTACK_ROUTER_BUILD )
   \   000045   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6004         JZ      ??ZDO_LeaveInd_2
   \   00004B   6401         XRL     A,#0x1
   \   00004D   700F         JNZ     ??ZDO_LeaveInd_3
   2754                {
   2755                  rsp.removeChildren = ind->removeChildren;
   \                     ??ZDO_LeaveInd_2:
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   85..83       MOV     DPH,?V1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   800C         SJMP    ??ZDO_LeaveInd_4
   2756                }
   2757                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_3:
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6402         XRL     A,#0x2
   \   000061   7008         JNZ     ??ZDO_LeaveInd_5
   2758                {
   2759                  rsp.removeChildren = 0;
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   E4           CLR     A
   \                     ??ZDO_LeaveInd_4:
   \   00006A   F0           MOVX    @DPTR,A
   2760                }
   2761          
   2762                NLME_LeaveRsp( &rsp );
   \                     ??ZDO_LeaveInd_5:
   \   00006B                ; Setup parameters for call to function NLME_LeaveRsp
   \   00006B   AA..         MOV     R2,?XSP + 0
   \   00006D   AB..         MOV     R3,?XSP + 1
   \   00006F   12....       LCALL   ??NLME_LeaveRsp?relay; Banked call to: NLME_LeaveRsp
   2763              }
   2764          
   2765              if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_1:
   \   000072   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6402         XRL     A,#0x2
   \   000078   702F         JNZ     ??ZDO_LeaveInd_6
   2766              {
   2767                // Stop polling and get ready to reset
   2768                NLME_SetPollRate( 0 );
   \   00007A                ; Setup parameters for call to function NLME_SetPollRate
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   \   000081   8026         SJMP    ??ZDO_LeaveInd_6
   2769              }
   2770          
   2771              // Prepare to leave with reset
   2772              ZDApp_LeaveReset( ind->rejoin );
   2773            }
   2774            else
   2775            {
   2776              leave = FALSE;
   2777          
   2778              // Check if this device needs to leave as a child or descendent
   2779              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000083                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000083   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000086   8A..         MOV     ?V4,R2
   \   000088   8B..         MOV     ?V5,R3
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000095   E5..         MOV     A,?V4
   \   000097   6A           XRL     A,R2
   \   000098   7003         JNZ     ??ZDO_LeaveInd_7
   \   00009A   E5..         MOV     A,?V5
   \   00009C   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_7:
   \   00009D   7017         JNZ     ??ZDO_LeaveInd_8
   2780              {
   2781                if ( ( ind->removeChildren == TRUE               ) ||
   2782                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2783                       NODETYPE_DEVICE                           )    )
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   69           XRL     A,R1
   \   0000A2   6005         JZ      ??ZDO_LeaveInd_6
   \   0000A4   12....       LCALL   ?Subroutine19 & 0xFFFF
   2784                {
   2785                  leave = TRUE;
   2786                }
   2787              }
   \                     ??CrossCallReturnLabel_17:
   \   0000A7   700D         JNZ     ??ZDO_LeaveInd_8
   2788              else if ( ind->removeChildren == TRUE )
   2789              {
   2790                // Check NWK address allocation algorithm
   2791                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2792              }
   2793          
   2794              if ( leave == TRUE )
   2795              {
   2796                // Prepare to leave with reset
   2797                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_6:
   \   0000A9                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000A9   85..82       MOV     DPL,?V2
   \   0000AC   85..83       MOV     DPH,?V3
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   0000B4   800A         SJMP    ??ZDO_LeaveInd_9
   2798              }
   2799              else
   2800              {
   2801                // Remove device address(optionally descendents) from data
   2802                ZDApp_LeaveUpdate( ind->srcAddr,
   2803                                   ind->extAddr,
   2804                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_8:
   \   0000B6                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000B6   EE           MOV     A,R6
   \   0000B7   2402         ADD     A,#0x2
   \   0000B9   FC           MOV     R4,A
   \   0000BA   E4           CLR     A
   \   0000BB   3F           ADDC    A,R7
   \   0000BC   FD           MOV     R5,A
   \   0000BD   12....       LCALL   ??ZDApp_LeaveUpdate?relay; Banked call to: ZDApp_LeaveUpdate
   2805              }
   2806            }
   2807          
   2808            // Pass the leave indication to higher layer if callback registered.
   2809            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_9:
   \   0000C0   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000C3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C6   6007         JZ      ??ZDO_LeaveInd_10
   2810            {
   2811              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000C8                ; Setup parameters for indirect call
   \   0000C8   EE           MOV     A,R6
   \   0000C9   FA           MOV     R2,A
   \   0000CA   EF           MOV     A,R7
   \   0000CB   FB           MOV     R3,A
   \   0000CC   12....       LCALL   ?CALL_IND
   2812            }
   2813          }
   \                     ??ZDO_LeaveInd_10:
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   02....       LJMP    ?Subroutine5 & 0xFFFF
   2814          
   2815          /*********************************************************************
   2816           * @fn          ZDO_SyncIndicationCB
   2817           *
   2818           * @brief       This function allows the next higher layer of a
   2819           *              coordinator to be notified of a loss of synchronization
   2820           *                          with the parent/child device.
   2821           *
   2822           * @param       type: 0 - child; 1 - parent
   2823           *
   2824           *
   2825           * @return      none
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2828          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2829            (void)shortAddr;  // Remove this line if this parameter is used.
   2830          
   2831            if ( ZSTACK_END_DEVICE_BUILD
   2832              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   600F         JZ      ??ZDO_SyncIndicationCB_0
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6004         JZ      ??ZDO_SyncIndicationCB_1
   \   000012   6401         XRL     A,#0x1
   \   000014   7020         JNZ     ??ZDO_SyncIndicationCB_2
   \                     ??ZDO_SyncIndicationCB_1:
   \   000016   90....       MOV     DPTR,#_NIB + 14
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001C   4018         JC      ??ZDO_SyncIndicationCB_2
   2833            {
   2834              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001E   7401         MOV     A,#0x1
   \   000020   6E           XRL     A,R6
   \   000021   7013         JNZ     ??ZDO_SyncIndicationCB_2
   2835              {
   2836                // We lost contact with our parent.  Clear the neighbor Table.
   2837                nwkNeighborInitTable();
   \   000023                ; Setup parameters for call to function nwkNeighborInitTable
   \   000023   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   2838          
   2839                // Start the rejoin process.
   2840                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000026                ; Setup parameters for call to function ZDApp_SendMsg
   \   000026   7C00         MOV     R4,#0x0
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7B02         MOV     R3,#0x2
   \   00002C   7A03         MOV     R2,#0x3
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2841              }
   2842            }
   2843          }
   \                     ??ZDO_SyncIndicationCB_2:
   \   000036   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   2844          
   2845          /*********************************************************************
   2846           * @fn          ZDO_ManytoOneFailureIndicationCB
   2847           *
   2848           * @brief       This function allows the next higher layer of a
   2849           *              concentrator to be notified of a many-to-one route
   2850           *              failure.
   2851           *
   2852           * @param       none
   2853           *
   2854           *
   2855           * @return      none
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2858          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2859            // By default, the concentrator automatically redo many-to-one route
   2860            // discovery to update all many-to-one routes in the network
   2861            // If you want anything processing other than the default,
   2862            // please replace the following code.
   2863          
   2864            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay; Banked call to: RTG_MTORouteReq
   2865          }
   \   000007   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   2866          
   2867          /*********************************************************************
   2868           * @fn          ZDO_PollConfirmCB
   2869           *
   2870           * @brief       This function allows the next higher layer to be
   2871           *              notified of a Poll Confirm.
   2872           *
   2873           * @param       none
   2874           *
   2875           * @return      none
   2876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2877          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2878          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2879            (void)status;  // Remove this line if this parameter is used.
   2880            return;
   \   000000   02....       LJMP    ?BRET
   2881          }
   2882          
   2883          /*********************************************************************
   2884           * @fn          ZDO_NetworkStatusCB
   2885           *
   2886           * @brief       Network Status Callback function
   2887           *
   2888           * @param       nwkDstAddr - message's destination address- used to determine
   2889           *                           if the message was intended for this device or
   2890           *                           a sleeping end device.
   2891           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2892           * @param       dstAddr - the destination address related to the status code
   2893           *
   2894           * @return      none
   2895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2896          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2897          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2898            (void)dstAddr;     // Remove this line if this parameter is used.
   2899          
   2900            if ( (nwkDstAddr == NLME_GetShortAddr())
   2901                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   2902            {
   2903              // Routing error for dstAddr, this is informational and a Route
   2904              // Request should happen automatically.
   2905            }
   2906          }
   \   000007   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   2907          
   2908          /******************************************************************************
   2909           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2910           *
   2911           * @brief       Stub routine implemented by NHLE. NHLE should call
   2912           *              <AddrMgrWriteNV> when appropriate.
   2913           *
   2914           * @param       none
   2915           *
   2916           * @return      none
   2917           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2918          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2919          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2920          #if defined ( NV_RESTORE )
   2921            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2922            {
   2923              // Trigger to save info into NV
   2924              ZDApp_NVUpdate();
   2925            }
   2926          #endif
   2927          }
   \   000000   02....       LJMP    ?BRET
   2928          
   2929          /*********************************************************************
   2930           * Call Back Functions from Security  - API
   2931           */
   2932          
   2933           /*********************************************************************
   2934           * @fn          ZDO_UpdateDeviceIndication
   2935           *
   2936           * @brief       This function notifies the "Trust Center" of a
   2937           *              network when a device joins or leaves the network.
   2938           *
   2939           * @param       extAddr - pointer to 64 bit address of new device
   2940           * @param       status  - 0 if a new device joined securely
   2941           *                      - 1 if a new device joined un-securely
   2942           *                      - 2 if a device left the network
   2943           *
   2944           * @return      true if newly joined device should be allowed to
   2945           *                                              remain on network
   2946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2947          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2948          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2949            // can implement a network access policy based on the
   2950            // IEEE address of newly joining devices...
   2951            (void)extAddr;
   2952            (void)status;
   2953          
   2954            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine4 & 0xFFFF
   2955          }
   2956          
   2957          /*********************************************************************
   2958           * @fn          ZDApp_InMsgCB
   2959           *
   2960           * @brief       This function is called to pass up any message that is
   2961           *              not yet supported.  This allows for the developer to
   2962           *              support features themselves..
   2963           *
   2964           * @return      none
   2965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2966          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2967          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2968            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000015   5480         ANL     A,#0x80
   \   000017   703F         JNZ     ??ZDApp_InMsgCB_0
   2969            {
   2970              // Handle the response message
   2971            }
   2972            else
   2973            {
   2974              // Handle the request message by sending a generic "not supported".
   2975              // Device Announce doesn't have a response.
   2976              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00001C   703A         JNZ     ??ZDApp_InMsgCB_0
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000024   6032         JZ      ??ZDApp_InMsgCB_0
   2977              {
   2978                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2979                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E9           MOV     A,R1
   \   00002A   4480         ORL     A,#0x80
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   E4           CLR     A
   \   000034   F5..         MOV     ?V0,A
   \   000036   F5..         MOV     ?V1,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   12....       LCALL   ?Subroutine29 & 0xFFFF
   2980              }
   2981            }
   \                     ??CrossCallReturnLabel_33:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   7C84         MOV     R4,#-0x7c
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   FA           MOV     R2,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   2982          }
   \                     ??ZDApp_InMsgCB_0:
   \   000058   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   2983          
   2984          
   2985          /*********************************************************************
   2986           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2987           *
   2988           * @brief   Changes the Match Descriptor Response permission.
   2989           *
   2990           * @param   endpoint - endpoint to allow responses
   2991           * @param   action - true to allow responses, false to not
   2992           *
   2993           * @return  none
   2994           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2995          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2996          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2997            // Store the action
   2998            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay   ; Banked call to: afSetMatch
   2999          }
   \   000008   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   3000          
   3001          /*********************************************************************
   3002           * @fn      ZDApp_NetworkInit()
   3003           *
   3004           * @brief   Used to start the network joining process
   3005           *
   3006           * @param   delay - mSec delay to wait before starting
   3007           *
   3008           * @return  none
   3009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3010          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3011          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3012            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3013            {
   3014              // Wait awhile before starting the device
   3015              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3016            }
   3017            else
   3018            {
   3019              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   3020            }
   3021          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3022          
   3023          /*********************************************************************
   3024           * @fn      ZDApp_NwkStateUpdateCB()
   3025           *
   3026           * @brief   This function notifies that this device's network
   3027           *          state info has been changed.
   3028           *
   3029           * @param   none
   3030           *
   3031           * @return  none
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3034          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3035            // Notify to save info into NV
   3036            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   3037            {
   3038              // Trigger to save info into NV
   3039              ZDApp_NVUpdate();
   3040            }
   3041          }
   \   000010   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3042          
   3043          /*********************************************************************
   3044           * @fn      ZDApp_NodeProfileSync()
   3045           *
   3046           * @brief   Sync node with stack profile.
   3047           *
   3048           * @param   stackProfile - stack profile of the network to join
   3049           *
   3050           * @return  none
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3053          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3054            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   3055            {
   3056              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   3057              {
   3058                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   3059                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   3060                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
   3061              }
   3062            }
   3063          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   3064          
   3065          /*********************************************************************
   3066           * @fn      ZDApp_StartJoiningCycle()
   3067           *
   3068           * @brief   Starts the joining cycle of a device.  This will only
   3069           *          continue an already started (or stopped) joining cycle.
   3070           *
   3071           * @param   none
   3072           *
   3073           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3074           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3075          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3076          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3077            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3078            {
   3079              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   00000E   90....       MOV     DPTR,#continueJoining
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
   3080              ZDApp_NetworkInit( 0 );
   \   000014                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000014   7A00         MOV     R2,#0x0
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   3081          
   3082              return ( TRUE );
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3083            }
   3084            else
   3085              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   00001F   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000021   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3086          }
   3087          
   3088          /*********************************************************************
   3089           * @fn      ZDApp_StopJoiningCycle()
   3090           *
   3091           * @brief   Stops the joining or rejoining process of a device.
   3092           *
   3093           * @param   none
   3094           *
   3095           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3097          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3098          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3099            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3100            {
   3101              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   00000E   90....       MOV     DPTR,#continueJoining
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   3102              return ( TRUE );
   \   000013   7901         MOV     R1,#0x1
   \   000015   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3103            }
   3104            else
   3105              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   000017   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000019   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3106          }
   3107          
   3108          /*********************************************************************
   3109           * @fn      ZDApp_AnnounceNewAddress()
   3110           *
   3111           * @brief   Send Device Announce and hold all transmissions for
   3112           *          new address timeout.
   3113           *
   3114           * @param   none
   3115           *
   3116           * @return  none
   3117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3118          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3120          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3121            // Turn off data request hold
   3122            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   3123          #endif
   3124          
   3125            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3126                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3127          
   3128          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3129            // Setup the timeout
   3130            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   3131          #endif
   3132          }
   \   000038   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   3133          
   3134          /*********************************************************************
   3135           * @fn          ZDApp_NVUpdate
   3136           *
   3137           * @brief       Set the NV Update Timer.
   3138           *
   3139           * @param       none
   3140           *
   3141           * @return      none
   3142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3143          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3144          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3145          #if defined ( NV_RESTORE )
   3146            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3147          #endif
   3148          }
   \   000000   02....       LJMP    ?BRET
   3149          
   3150          /*********************************************************************
   3151           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3152           *
   3153           * @brief   Returns a PAN ID for the network layer to use during
   3154           *          a coordinator start and there is another network with
   3155           *          the intended PANID.
   3156           *
   3157           * @param   panid - the intended PAN ID
   3158           *
   3159           * @return  PANID to try
   3160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3161          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3162          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3163            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3164          }
   3165          
   3166          /*********************************************************************
   3167           * @fn          ZDO_SrcRtgIndCB
   3168           *
   3169           * @brief       This function notifies the ZDO available src route record received.
   3170           *
   3171           * @param       srcAddr - source address of the source route
   3172           * @param       relayCnt - number of devices in the relay list
   3173           * @param       relayList - relay list of the source route
   3174           *
   3175           * @return      none
   3176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3177          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3178          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3179            zdoSrcRtg_t srcRtg;
   3180          
   3181            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
   3182            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_94:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3183            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3184          
   3185            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3186            {
   3187              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   3188            }
   \                     ??CrossCallReturnLabel_68:
   \   00002D   12....       LCALL   ?CALL_IND
   3189          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP    ?Subroutine7 & 0xFFFF
   3190          
   3191          /*********************************************************************
   3192           * @fn          ZDApp_InitZdoCBFunc
   3193           *
   3194           * @brief       Call this function to initialize zdoCBFunc[]
   3195           *
   3196           * @param       none
   3197           *
   3198           * @return      none
   3199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3200          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3201          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3202            uint8 i;
   3203          
   3204            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3205            {
   3206              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine26 & 0xFFFF
   3207            }
   \                     ??CrossCallReturnLabel_26:
   \   00000C   0A           INC     R2
   \   00000D   EA           MOV     A,R2
   \   00000E   C3           CLR     C
   \   00000F   9409         SUBB    A,#0x9
   \   000011   40F3         JC      ??ZDApp_InitZdoCBFunc_0
   3208          }
   \   000013   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3209          
   3210          /*********************************************************************
   3211           * @fn          ZDO_RegisterForZdoCB
   3212           *
   3213           * @brief       Call this function to register the higher layer (for
   3214           *              example, the Application layer or MT layer) with ZDO
   3215           *              callbacks to get notified of some ZDO indication like
   3216           *              existence of a concentrator or receipt of a source
   3217           *              route record.
   3218           *
   3219           * @param       indID - ZDO Indication ID
   3220           * @param       pFn   - Callback function pointer
   3221           *
   3222           * @return      ZSuccess - successful, ZInvalidParameter if not
   3223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3224          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3226            // Check the range of the indication ID
   3227            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500C         JNC     ??ZDO_RegisterForZdoCB_0
   3228            {
   3229              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000010   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   3230              return ZSuccess;
   \                     ??CrossCallReturnLabel_90:
   \   000013   7900         MOV     R1,#0x0
   \   000015   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3231            }
   3232          
   3233            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000017   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000019   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3234          }
   3235          
   3236          /*********************************************************************
   3237           * @fn          ZDO_DeregisterForZdoCB
   3238           *
   3239           * @brief       Call this function to de-register the higher layer (for
   3240           *              example, the Application layer or MT layer) with ZDO
   3241           *              callbacks to get notified of some ZDO indication like
   3242           *              existence of a concentrator or receipt of a source
   3243           *              route record.
   3244           *
   3245           * @param       indID - ZDO Indication ID
   3246           *
   3247           * @return      ZSuccess - successful, ZInvalidParameter if not
   3248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3249          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3251            // Check the range of the indication ID
   3252            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   5008         JNC     ??ZDO_DeregisterForZdoCB_0
   3253            {
   3254              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine26 & 0xFFFF
   3255              return ZSuccess;
   \                     ??CrossCallReturnLabel_27:
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3256            }
   3257          
   3258            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000013   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000015   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3259          }
   3260          
   3261          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3262          #if defined ( REFLECTOR )
   3263          /*********************************************************************
   3264           * @fn          ZDApp_SetPendingBindDefault
   3265           *
   3266           * @brief       This function initializes a specific entry of pending
   3267           *              Bind Request.
   3268           *
   3269           * @param       pendBindReq - pointer to the entry in the table
   3270           *
   3271           * @return      none
   3272           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3273          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3274          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3275            // Set it to an initial value
   3276            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   3277          
   3278            // We are checking for age 0 for aged-out records
   3279            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3280          }
   \   00001D   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   3281          
   3282          /*********************************************************************
   3283           * @fn          ZDApp_InitPendingBind
   3284           *
   3285           * @brief       This function initializes the buffer that holds
   3286           *              pending Bind Request messages if no valid NWK address
   3287           *              exists in Address Manager and a Network Address Req
   3288           *              has been sent out.
   3289           *
   3290           * @param       none
   3291           *
   3292           * @return      none
   3293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3294          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3295          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3296            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3297            {
   3298              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000017   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3299              {
   3300                uint8 i;
   3301          
   3302                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3303                {
   3304                  // Set to default values
   3305                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   3306                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3307              }
   3308            }
   3309          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   3310          
   3311          /*********************************************************************
   3312           * @fn          ZDApp_GetEmptyPendingBindReq
   3313           *
   3314           * @brief       This function looks for an empty entry.
   3315           *
   3316           * @param       none
   3317           *
   3318           * @return      Pointer to entry
   3319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3320          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3321          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3322            uint8 i;
   3323          
   3324            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000007   6027         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3325            {
   3326              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV     R4,#0x0
   3327              {
   3328                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   A9F0         MOV     R1,B
   \   000013   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX    A,@DPTR
   \   000017   28           ADD     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   39           ADDC    A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2420         ADD     A,#0x20
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   3B           ADDC    A,R3
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   600B         JZ      ??ZDApp_GetEmptyPendingBindReq_2
   3329                {
   3330                  return ( &ZDAppPendingBindReq[i] );
   3331                }
   3332              }
   \   000029   0C           INC     R4
   \   00002A   EC           MOV     A,R4
   \   00002B   C3           CLR     C
   \   00002C   9403         SUBB    A,#0x3
   \   00002E   40DB         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3333            }
   3334          
   3335            // No empty entry was found
   3336            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000034   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3337          }
   3338          
   3339          /*********************************************************************
   3340           * @fn          ZDApp_ProcessPendingBindReq
   3341           *
   3342           * @brief       Process pending entry based on EXT address.
   3343           *
   3344           * @param       extAddr - of device to look up
   3345           *
   3346           * @return      none
   3347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3348          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3350            uint8 i;
   3351          
   3352            // Loop through all the pending entries for that Ext Address
   3353            // to create Bind Entries and send Bind Rsp
   3354            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3355            {
   3356              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3357              {
   3358                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3359                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV     A,?V0
   \   00001B   75F021       MOV     B,#0x21
   \   00001E   A4           MUL     AB
   \   00001F   FE           MOV     R6,A
   \   000020   AFF0         MOV     R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV     ?V4,?V2
   \   000025   85....       MOV     ?V5,?V3
   \   000028   75..00       MOV     ?V6,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000037   240B         ADD     A,#0xb
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   A9..         MOV     R1,?V4
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3360                {
   3361                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   748C         MOV     A,#-0x74
   \   00005A   F0           MOVX    @DPTR,A
   3362          
   3363                  // Add Bind entry
   3364                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3365                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3366                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3367                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005B   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   2E           ADD     A,R6
   \   000060   F5..         MOV     ?V4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   3F           ADDC    A,R7
   \   000065   F5..         MOV     ?V5,A
   \   000067                ; Setup parameters for call to function APSME_BindRequest
   \   000067   E5..         MOV     A,?V4
   \   000069   2414         ADD     A,#0x14
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V1,A
   \   000075   78..         MOV     R0,#?V1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV     A,?V4
   \   00007C   240B         ADD     A,#0xb
   \   00007E   FC           MOV     R4,A
   \   00007F   E4           CLR     A
   \   000080   35..         ADDC    A,?V5
   \   000082   FD           MOV     R5,A
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000095   85..82       MOV     DPL,?V4
   \   000098   85..83       MOV     DPH,?V5
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??APSME_BindRequest?relay; Banked call to: APSME_BindRequest
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV     A,R1
   \   0000AE   7008         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3368                  {
   3369                    // valid entry
   3370                    bindStat = ZDP_SUCCESS;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
   3371          
   3372                    // Notify to save info into NV
   3373                    ZDApp_NVUpdate();
   3374                  }
   3375          
   3376                  // Send back a response message
   3377                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3378                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000B8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000BB   F5..         MOV     ?V1,A
   \   0000BD   78..         MOV     R0,#?V1
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   7401         MOV     A,#0x1
   \   0000C4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C7   88..         MOV     ?V4,R0
   \   0000C9   89..         MOV     ?V5,R1
   \   0000CB   78..         MOV     R0,#?V4
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   75..21       MOV     ?V4,#0x21
   \   0000D3   75..80       MOV     ?V5,#-0x80
   \   0000D6   78..         MOV     R0,#?V4
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000DE   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000E0   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000E1   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000E4   7405         MOV     A,#0x5
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   3379          
   3380                  // Set the pending request entry to default values
   3381                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E9                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E9   12....       LCALL   ?Subroutine32 & 0xFFFF
   3382                }
   3383              }
   \                     ??CrossCallReturnLabel_36:
   \   0000EC   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000EF   05..         INC     ?V0
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   C3           CLR     C
   \   0000F4   9403         SUBB    A,#0x3
   \   0000F6   5003         JNC     $+5
   \   0000F8   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3384            }
   3385          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003   EA           MOV     A,R2
   \   000004   241E         ADD     A,#0x1e
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3B           ADDC    A,R3
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   3386          
   3387          /*********************************************************************
   3388           * @fn          ZDApp_AgeOutPendingBindEntry
   3389           *
   3390           * @brief       Age out pending Bind Req entries.
   3391           *
   3392           * @param       none
   3393           *
   3394           * @return      none
   3395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3396          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3398            uint8 i;
   3399            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V1,#0x0
   3400          
   3401            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3402            {
   3403              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V0,#0x0
   3404              {
   3405                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V0
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   FE           MOV     R6,A
   \   00001F   AFF0         MOV     R7,B
   \   000021   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000024   2420         ADD     A,#0x20
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   C3           CLR     C
   \   00002F   9402         SUBB    A,#0x2
   \   000031   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3406                {
   3407                  ZDAppPendingBindReq[i].age--;
   \   000033   E0           MOVX    A,@DPTR
   \   000034   14           DEC     A
   \   000035   F0           MOVX    @DPTR,A
   3408          
   3409                  entryFound = TRUE;
   \   000036   75..01       MOV     ?V1,#0x1
   \   000039   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3410                }
   3411                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   6A           XRL     A,R2
   \   00003F   707F         JNZ     ??ZDApp_AgeOutPendingBindEntry_3
   3412                {
   3413                  // The record has aged out and has valid data
   3414                  AddrMgrEntry_t entry;
   3415                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   748C         MOV     A,#-0x74
   \   000049   F0           MOVX    @DPTR,A
   3416          
   3417                  entry.user = ADDRMGR_USER_BINDING;
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7404         MOV     A,#0x4
   \   000051   F0           MOVX    @DPTR,A
   3418          
   3419                  // Remove the entry in address manager so we do not keep entries
   3420                  // with invalid addresses
   3421                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000052                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000052   E8           MOV     A,R0
   \   000053   240B         ADD     A,#0xb
   \   000055   FC           MOV     R4,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FD           MOV     R5,A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   3422          
   3423                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000065                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP101_8
   \   00006A   12....       LCALL   ??AddrMgrEntryLookupExt?relay; Banked call to: AddrMgrEntryLookupExt
   \   00006D   E9           MOV     A,R1
   \   00006E   6401         XRL     A,#0x1
   \   000070   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3424                  {
   3425                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FE         XRL     A,#0xfe
   \   00007A   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00007F   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3426                    {
   3427                      // Release the entry that contains an invalid NWK address
   3428                      AddrMgrEntryRelease( &entry );
   \   000081                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP101_8
   \   000086   12....       LCALL   ??AddrMgrEntryRelease?relay; Banked call to: AddrMgrEntryRelease
   3429                    }
   3430                  }
   3431          
   3432                  // Send the Bind Response with failure status
   3433                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3434                               &(ZDAppPendingBindReq[i].srcAddr),
   3435                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000089   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP100_8
   \   000098   88..         MOV     ?V2,R0
   \   00009A   89..         MOV     ?V3,R1
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   75..21       MOV     ?V2,#0x21
   \   0000A4   75..80       MOV     ?V3,#-0x80
   \   0000A7   78..         MOV     R0,#?V2
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000AF   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000B1   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000B2   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   3436          
   3437                  // Clear the record and set to default values
   3438                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000BA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000BA   12....       LCALL   ?Subroutine32 & 0xFFFF
   3439                }
   3440              }
   \                     ??CrossCallReturnLabel_37:
   \   0000BD   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000C0   05..         INC     ?V0
   \   0000C2   E5..         MOV     A,?V0
   \   0000C4   C3           CLR     C
   \   0000C5   9403         SUBB    A,#0x3
   \   0000C7   5003         JNC     $+5
   \   0000C9   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3441            }
   3442          
   3443            if ( entryFound == FALSE )
   \   0000CC   E5..         MOV     A,?V1
   \   0000CE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D0   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3444            {
   3445              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000D2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B10         MOV     R3,#0x10
   \   0000D6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   \   0000DE   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3446            }
   3447            else
   3448            {
   3449              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3450                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   90....       MOV     DPTR,#__Constant_3e8
   \   0000E3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E6   7A00         MOV     R2,#0x0
   \   0000E8   7B10         MOV     R3,#0x10
   \   0000EA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   3451            }
   3452          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9                REQUIRE ?Subroutine1
   \   0000F9                ; // Fall through to label ?Subroutine1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ForceConcentratorChange?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PermitJoinCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkStatusCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetPendingBindDefault?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitPendingBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_GetEmptyPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AgeOutPendingBindEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3453          #endif
   3454          #endif
   3455          
   3456          /*********************************************************************
   3457          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     43   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2     12   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     25   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     51   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AssocIsChild
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     31   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     12   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     50   ZDApp_ProcessMsgCBs
        0     35   -> ZDApp_ProcessPendingBindReq
        0     35   -> ZDO_ParseAddrRsp
        0     35   -> ZDO_ParseBindUnbindReq
        0     35   -> ZDO_ProcessBindUnbindReq
        0     35   -> ZDO_UpdateAddrManager
        0     35   -> osal_mem_free
      0     27   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     31   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_NetworkInit
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> sAddrExtCpy
      0     56   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     20   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      2      0   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrRemoveDeviceInd
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     25   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     53   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0      0   ZDApp_SaveNetworkStateEvt
      0     51   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0      9   ZDApp_SecInit
        0      9   -> ZDSecMgrInit
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     16   ZDApp_event_loop
        0     12   -> Onboard_soft_reset
        0     12   -> ZDApp_AgeOutPendingBindEntry
        0     12   -> ZDApp_NetworkStartEvt
        0     12   -> ZDApp_ProcessOSALMsg
        0     12   -> ZDO_StartDevice
        0     12   -> ZDO_UpdateNwkStatus
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_pwrmgr_device
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrInit
        0     12   -> osal_rand
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0      1   ZDO_JoinIndicationCB
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     16   ZDO_LeaveInd
        0     16   -> NLME_GetCoordShortAddr
        0     16   -> NLME_LeaveRsp
        0     16   -> NLME_SetPollRate
        0     16   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
       6  ??AddrMgrWriteNVRequest?relay
       3  ??Subroutine34_0
       5  ??Subroutine35_0
       7  ??Subroutine36_0
       4  ??Subroutine37_0
       5  ??Subroutine38_0
       8  ??Subroutine39_0
       6  ??Subroutine40_0
       6  ??Subroutine41_0
       5  ??Subroutine42_0
       6  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??Subroutine45_0
       5  ??Subroutine46_0
       6  ??ZDAppDetermineDeviceType?relay
       6  ??ZDApp_AgeOutPendingBindEntry?relay
       6  ??ZDApp_AnnounceNewAddress?relay
       6  ??ZDApp_ChangeMatchDescRespPermission?relay
       6  ??ZDApp_CoordStartPANIDConflictCB?relay
       6  ??ZDApp_DeviceAuthEvt?relay
       6  ??ZDApp_DeviceConfigured?relay
       6  ??ZDApp_ForceConcentratorChange?relay
       6  ??ZDApp_GetEmptyPendingBindReq?relay
       6  ??ZDApp_InMsgCB?relay
       6  ??ZDApp_Init?relay
       6  ??ZDApp_InitPendingBind?relay
       6  ??ZDApp_InitUserDesc?relay
       6  ??ZDApp_InitZdoCBFunc?relay
       6  ??ZDApp_JoinReq?relay
       6  ??ZDApp_LeaveCtrlBypass?relay
       6  ??ZDApp_LeaveCtrlInit?relay
       6  ??ZDApp_LeaveCtrlReset?relay
       6  ??ZDApp_LeaveCtrlSet?relay
       6  ??ZDApp_LeaveCtrlStartup?relay
       6  ??ZDApp_LeaveReset?relay
       6  ??ZDApp_LeaveUpdate?relay
       6  ??ZDApp_NVUpdate?relay
       6  ??ZDApp_NetworkDiscoveryReq?relay
       6  ??ZDApp_NetworkInit?relay
       6  ??ZDApp_NetworkStartEvt?relay
       6  ??ZDApp_NodeProfileSync?relay
       6  ??ZDApp_NwkDescListProcessing?relay
       6  ??ZDApp_NwkStateUpdateCB?relay
       6  ??ZDApp_ProcessMsgCBs?relay
       6  ??ZDApp_ProcessNetworkJoin?relay
       6  ??ZDApp_ProcessOSALMsg?relay
       6  ??ZDApp_ProcessPendingBindReq?relay
       6  ??ZDApp_ProcessSecEvent?relay
       6  ??ZDApp_ProcessSecMsg?relay
       6  ??ZDApp_ReadNetworkRestoreState?relay
       6  ??ZDApp_RegisterCBs?relay
       6  ??ZDApp_ResetNwkKey?relay
       6  ??ZDApp_ResetTimerCancel?relay
       6  ??ZDApp_ResetTimerStart?relay
       6  ??ZDApp_RestoreNwkKey?relay
       6  ??ZDApp_SaveNetworkStateEvt?relay
       6  ??ZDApp_SaveNwkKey?relay
       6  ??ZDApp_SecInit?relay
       6  ??ZDApp_SendEventMsg?relay
       6  ??ZDApp_SendMsg?relay
       6  ??ZDApp_SetPendingBindDefault?relay
       6  ??ZDApp_StartJoiningCycle?relay
       6  ??ZDApp_StopJoiningCycle?relay
       6  ??ZDApp_event_loop?relay
       6  ??ZDOInitDevice?relay
       6  ??ZDO_AddrChangeIndicationCB?relay
       6  ??ZDO_ConcentratorIndicationCB?relay
       6  ??ZDO_DeregisterForZdoCB?relay
       6  ??ZDO_JoinConfirmCB?relay
       6  ??ZDO_JoinIndicationCB?relay
       6  ??ZDO_LeaveCnf?relay
       6  ??ZDO_LeaveInd?relay
       6  ??ZDO_ManytoOneFailureIndicationCB?relay
       6  ??ZDO_NetworkDiscoveryConfirmCB?relay
       6  ??ZDO_NetworkFormationConfirmCB?relay
       6  ??ZDO_NetworkStatusCB?relay
       6  ??ZDO_PermitJoinCB?relay
       6  ??ZDO_PollConfirmCB?relay
       6  ??ZDO_RegisterForZdoCB?relay
       6  ??ZDO_SrcRtgIndCB?relay
       6  ??ZDO_StartRouterConfirmCB?relay
       6  ??ZDO_SyncIndicationCB?relay
       6  ??ZDO_UpdateDeviceIndication?relay
       6  ??ZDO_beaconNotifyIndCB?relay
      10  ?Subroutine0
       3  ?Subroutine1
       6  ?Subroutine10
      16  ?Subroutine11
       2  ?Subroutine12
      12  ?Subroutine13
       3  ?Subroutine14
       4  ?Subroutine15
      14  ?Subroutine16
      10  ?Subroutine17
       9  ?Subroutine18
       9  ?Subroutine19
      35  ?Subroutine2
       3  ?Subroutine20
      11  ?Subroutine21
       8  ?Subroutine22
      10  ?Subroutine23
       4  ?Subroutine24
      12  ?Subroutine25
       8  ?Subroutine26
      11  ?Subroutine27
      10  ?Subroutine28
      10  ?Subroutine29
       3  ?Subroutine3
      14  ?Subroutine30
       6  ?Subroutine31
      11  ?Subroutine32
      15  ?Subroutine33
       5  ?Subroutine4
       3  ?Subroutine5
       8  ?Subroutine6
       7  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
      77  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     249  ZDApp_AgeOutPendingBindEntry
      59  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      10  ZDApp_CoordStartPANIDConflictCB
      79  ZDApp_DeviceAuthEvt
      87  ZDApp_DeviceConfigured
     128  ZDApp_ForceConcentratorChange
      55  ZDApp_GetEmptyPendingBindReq
      91  ZDApp_InMsgCB
      57  ZDApp_Init
      61  ZDApp_InitPendingBind
     111  ZDApp_InitUserDesc
      22  ZDApp_InitZdoCBFunc
      75  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      75  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
      18  ZDApp_LeaveReset
     200  ZDApp_LeaveUpdate
       3  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      57  ZDApp_NetworkInit
      89  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     280  ZDApp_NwkDescListProcessing
      19  ZDApp_NwkStateUpdateCB
     150  ZDApp_ProcessMsgCBs
     468  ZDApp_ProcessNetworkJoin
     628  ZDApp_ProcessOSALMsg
     256  ZDApp_ProcessPendingBindReq
     240  ZDApp_ProcessSecEvent
      73  ZDApp_ProcessSecMsg
      21  ZDApp_ReadNetworkRestoreState
      55  ZDApp_RegisterCBs
      66  ZDApp_ResetNwkKey
      31  ZDApp_ResetTimerCancel
      57  ZDApp_ResetTimerStart
     210  ZDApp_RestoreNwkKey
       3  ZDApp_SaveNetworkStateEvt
      75  ZDApp_SaveNwkKey
       2  ZDApp_SavedPollRate
      11  ZDApp_SecInit
      22  ZDApp_SendEventMsg
      99  ZDApp_SendMsg
      32  ZDApp_SetPendingBindDefault
      36  ZDApp_StartJoiningCycle
      28  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     271  ZDApp_event_loop
      96  ZDOInitDevice
     104  ZDO_AddrChangeIndicationCB
      45  ZDO_ConcentratorIndicationCB
      24  ZDO_DeregisterForZdoCB
     251  ZDO_JoinConfirmCB
       0  ZDO_JoinIndicationCB
     107  ZDO_LeaveCnf
     212  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      64  ZDO_NetworkDiscoveryConfirmCB
      37  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      28  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      37  ZDO_StartRouterConfirmCB
      57  ZDO_SyncIndicationCB
       3  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     624  ZDO_beaconNotifyIndCB
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 7 074 bytes in segment BANKED_CODE
   426 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    61 bytes in segment XDATA_Z
 
 7 510 bytes of CODE  memory
     0 bytes of CONST memory (+ 12 bytes shared)
    71 bytes of XDATA memory

Errors: none
Warnings: 1

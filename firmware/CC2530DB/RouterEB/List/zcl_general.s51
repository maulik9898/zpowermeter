///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            02/Nov/2015  18:36:30 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zcl\zcl_general.c            /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zcl\zcl_general.c -D         /
//                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D     /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\zcl_general.s51        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_general

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_Z

        FUNCTION ??zclGeneral_HdlIncoming?relay,0203H
        PUBLIC ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,0203H
        FUNCTION zclGeneral_HdlIncoming,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
??zcl_registerPlugin?relay SYMBOL "?relay", zcl_registerPlugin
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks

        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??zcl_registerPlugin?relay
        FUNCTION ??zcl_registerPlugin?relay,00H
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zcl\zcl_general.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_general.c
//    3   Revised:        $Date: 2014-06-06 07:08:25 -0700 (Fri, 06 Jun 2014) $
//    4   Revision:       $Revision: 38850 $
//    5 
//    6   Description:    Zigbee Cluster Library - General.  This application receives all
//    7                   ZCL messages and initially parses them before passing to application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "zcl.h"
//   46 #include "zcl_general.h"
//   47 //#include "ZDApp.h"
//   48 #include "zcl_ezmode.h"
//   49 
//   50 #if defined ( INTER_PAN )
//   51   #include "stub_aps.h"
//   52 #endif
//   53 
//   54 /*********************************************************************
//   55  * MACROS
//   56  */
//   57 #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
//   58 #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
//   59 #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
//   60 
//   61 #ifdef ZCL_SCENES
//   62 #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
//   63 #endif // ZCL_SCENES
//   64 
//   65 /*********************************************************************
//   66  * CONSTANTS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * TYPEDEFS
//   71  */
//   72 typedef struct zclGenCBRec
//   73 {
//   74   struct zclGenCBRec        *next;
//   75   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   76   zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
//   77 } zclGenCBRec_t;
//   78 
//   79 typedef struct zclGenSceneItem
//   80 {
//   81   struct zclGenSceneItem    *next;
//   82   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   83   zclGeneral_Scene_t        scene;    // Scene info
//   84 } zclGenSceneItem_t;
//   85 
//   86 typedef struct zclGenAlarmItem
//   87 {
//   88   struct zclGenAlarmItem    *next;
//   89   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   90   zclGeneral_Alarm_t        alarm;    // Alarm info
//   91 } zclGenAlarmItem_t;
//   92 
//   93 // Scene NV types
//   94 typedef struct
//   95 {
//   96   uint16                    numRecs;
//   97 } nvGenScenesHdr_t;
//   98 
//   99 typedef struct zclGenSceneNVItem
//  100 {
//  101   uint8                     endpoint;
//  102   zclGeneral_Scene_t        scene;
//  103 } zclGenSceneNVItem_t;
//  104 
//  105 /*********************************************************************
//  106  * GLOBAL VARIABLES
//  107  */
//  108 
//  109 /*********************************************************************
//  110  * GLOBAL FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * LOCAL VARIABLES
//  115  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
zclGenCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 static uint8 zclGenPluginRegisted = FALSE;
zclGenPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  118 
//  119 #if defined( ZCL_SCENES )
//  120   #if !defined ( ZCL_STANDALONE )
//  121     static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
//  122   #endif
//  123 #endif // ZCL_SCENES
//  124 
//  125 #ifdef ZCL_ALARMS
//  126 static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
//  127 #endif // ZCL_ALARMS
//  128 
//  129 /*********************************************************************
//  130  * LOCAL FUNCTIONS
//  131  */
//  132 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
//  133 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//  134 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
//  135 
//  136 // Device Configuration and Installation clusters
//  137 #ifdef ZCL_BASIC
//  138 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  139 #endif // ZCL_BASIC
//  140 
//  141 #ifdef ZCL_IDENTIFY
//  142 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  143 #endif // ZCL_IDENTIFY
//  144 
//  145 // Groups and Scenes clusters
//  146 #ifdef ZCL_GROUPS
//  147 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
//  148 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  149 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
//  150 #endif // ZCL_GROUPS
//  151 
//  152 #ifdef ZCL_SCENES
//  153 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  154 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  155 #endif // ZCL_SCENES
//  156 
//  157 // On/Off and Level Control Configuration clusters
//  158 #ifdef ZCL_ON_OFF
//  159 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  160 #endif // ZCL_ONOFF
//  161 
//  162 #ifdef ZCL_LEVEL_CTRL
//  163 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  164 #endif // ZCL_LEVEL_CTRL
//  165 
//  166 // Alarms cluster
//  167 #ifdef ZCL_ALARMS
//  168 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  169 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  170 #endif // ZCL_ALARMS
//  171 
//  172 // Location cluster
//  173 #ifdef ZCL_LOCATION
//  174 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  175 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  176 #endif // ZCL_LOCATION
//  177 
//  178 #ifdef ZCL_SCENES
//  179   #if !defined ( ZCL_STANDALONE )
//  180     static uint8 zclGeneral_ScenesInitNV( void );
//  181     static void zclGeneral_ScenesSetDefaultNV( void );
//  182     static void zclGeneral_ScenesWriteNV( void );
//  183     static uint16 zclGeneral_ScenesRestoreFromNV( void );
//  184   #endif
//  185 #endif // ZCL_SCENES
//  186 
//  187 /*********************************************************************
//  188  * @fn      zclGeneral_RegisterCmdCallbacks
//  189  *
//  190  * @brief   Register an applications command callbacks
//  191  *
//  192  * @param   endpoint - application's endpoint
//  193  * @param   callbacks - pointer to the callback record.
//  194  *
//  195  * @return  ZMemError if not able to allocate
//  196  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  197 ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
zclGeneral_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
        CODE
//  198 {
        FUNCALL zclGeneral_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  199   zclGenCBRec_t *pNewItem;
//  200   zclGenCBRec_t *pLoop;
//  201 
//  202   // Register as a ZCL Plugin
//  203   if ( zclGenPluginRegisted == FALSE )
        MOV     DPTR,#zclGenPluginRegisted
        MOVX    A,@DPTR
        JNZ     ??zclGeneral_RegisterCmdCallbacks_0
//  204   {
//  205     zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
//  206                         ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  207                         zclGeneral_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV     ?V2,#??zclGeneral_HdlIncoming?relay & 0xff
        MOV     ?V3,#(??zclGeneral_HdlIncoming?relay >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zcl_registerPlugin?relay; Banked call to: zcl_registerPlugin
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  208 
//  209 #ifdef ZCL_SCENES
//  210     // Initialize the Scenes Table
//  211     zclGeneral_ScenesInit();
//  212 #endif // ZCL_SCENES
//  213 
//  214     zclGenPluginRegisted = TRUE;
        MOV     DPTR,#zclGenPluginRegisted
        MOV     A,#0x1
        MOVX    @DPTR,A
//  215   }
//  216 
//  217   // Fill in the new profile list
//  218   pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
??zclGeneral_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
//  219   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zclGeneral_RegisterCmdCallbacks_1
//  220     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??zclGeneral_RegisterCmdCallbacks_2
//  221 
//  222   pNewItem->next = (zclGenCBRec_t *)NULL;
??zclGeneral_RegisterCmdCallbacks_1:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  223   pNewItem->endpoint = endpoint;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
//  224   pNewItem->CBs = callbacks;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  225 
//  226   // Find spot in list
//  227   if (  zclGenCBs == NULL )
        MOV     DPTR,#zclGenCBs
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        MOV     DPTR,#zclGenCBs
        JZ      ??zclGeneral_RegisterCmdCallbacks_3
//  228   {
//  229     zclGenCBs = pNewItem;
//  230   }
//  231   else
//  232   {
//  233     // Look for end of list
//  234     pLoop = zclGenCBs;
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??zclGeneral_RegisterCmdCallbacks_4
//  235     while ( pLoop->next != NULL )
//  236       pLoop = pLoop->next;
??zclGeneral_RegisterCmdCallbacks_5:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
??zclGeneral_RegisterCmdCallbacks_4:
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zclGeneral_RegisterCmdCallbacks_5
//  237 
//  238     // Put new item at end of list
//  239     pLoop->next = pNewItem;
        MOV     DPL,R4
        MOV     DPH,R5
??zclGeneral_RegisterCmdCallbacks_3:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  240   }
//  241 
//  242   return ( ZSuccess );
        MOV     R1,#0x0
??zclGeneral_RegisterCmdCallbacks_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  243 }
//  244 
//  245 #ifdef ZCL_IDENTIFY
//  246 /*********************************************************************
//  247  * @fn      zclGeneral_SendIdentify
//  248  *
//  249  * @brief   Call to send out an Identify Command
//  250  *
//  251  * @param   srcEP - Sending application's endpoint
//  252  * @param   dstAddr - where you want the message to go
//  253  * @param   identifyTime - how long the device will continue to identify itself (in seconds)
//  254  * @param   seqNum - identification number for the transaction
//  255  *
//  256  * @return  ZStatus_t
//  257  */
//  258 ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
//  259                                    uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
//  260 {
//  261   uint8 buf[2];
//  262 
//  263   buf[0] = LO_UINT16( identifyTime );
//  264   buf[1] = HI_UINT16( identifyTime );
//  265 
//  266   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  267                           COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  268                           disableDefaultRsp, 0, seqNum, 2, buf );
//  269 }
//  270 
//  271 /*********************************************************************
//  272  * @fn      zclGeneral_SendIdentifyEZModeInvoke
//  273  *
//  274  * @brief   Call to send out an Identify EZ-Mode Invoke Command
//  275  *
//  276  * @param   srcEP - Sending application's endpoint
//  277  * @param   dstAddr - where you want the message to go
//  278  * @param   action - describes the EZ-Mode action to be performed
//  279  * @param   seqNum - identification number for the transaction
//  280  *
//  281  * @return  ZStatus_t
//  282  */
//  283 ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
//  284                                                uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
//  285 {
//  286   uint8 buf[1];
//  287 
//  288   buf[0] = action;
//  289 
//  290   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  291                           COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  292                           disableDefaultRsp, 0, seqNum, 1, buf );
//  293 }
//  294 
//  295 /*********************************************************************
//  296  * @fn      zclGeneral_SendIdentifyUpdateCommState
//  297  *
//  298  * @brief   Call to send out an Identify Update Commission State Command
//  299  *
//  300  * @param   srcEP - Sending application's endpoint
//  301  * @param   dstAddr - where you want the message to go
//  302  * @param   action - describes the EZ-Mode action to be performed
//  303  * @param   commissionStateMask - updates the device's commission state
//  304  * @param   seqNum - identification number for the transaction
//  305  *
//  306  * @return  ZStatus_t
//  307  */
//  308 ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
//  309                                                   uint8 action, uint8 commissionStateMask,
//  310                                                   uint8 disableDefaultRsp, uint8 seqNum )
//  311 {
//  312   uint8 buf[2];
//  313 
//  314   buf[0] = action;
//  315   buf[1] = commissionStateMask;
//  316 
//  317   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  318                           COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  319                           disableDefaultRsp, 0, seqNum, 2, buf );
//  320 }
//  321 
//  322 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  323 /*********************************************************************
//  324  * @fn      zclGeneral_SendIdentifyTriggerEffect
//  325  *
//  326  * @brief   Call to send out a Trigger Effect Command
//  327  *
//  328  * @param   srcEP - Sending application's endpoint
//  329  * @param   dstAddr - where you want the message to go
//  330  * @param   effectId - identify effect to use
//  331  * @param   effectVariant - which variant of effect to be triggered
//  332  * @param   disableDefaultRsp - whether to disable the Default Response command
//  333  * @param   seqNum - identification number for the transaction
//  334  *
//  335  * @return  ZStatus_t
//  336  */
//  337 ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  338                                                 uint8 effectId, uint8 effectVariant,
//  339                                                 uint8 disableDefaultRsp, uint8 seqNum )
//  340 {
//  341   uint8 buf[2];
//  342 
//  343   buf[0] = effectId;
//  344   buf[1] = effectVariant;
//  345 
//  346   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  347                           COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  348                           disableDefaultRsp, 0, seqNum, 2, buf );
//  349 }
//  350 #endif // ZCL_LIGHT_LINK_ENHANCE
//  351 
//  352 /*********************************************************************
//  353  * @fn      zclGeneral_SendIdentifyQueryResponse
//  354  *
//  355  * @brief   Call to send out an Identify Query Response Command
//  356  *
//  357  * @param   srcEP - Sending application's endpoint
//  358  * @param   dstAddr - where you want the message to go
//  359  * @param   timeout - how long the device will continue to identify itself (in seconds)
//  360  * @param   seqNum - identification number for the transaction
//  361  *
//  362  * @return  ZStatus_t
//  363  */
//  364 ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  365                                                 uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
//  366 {
//  367   uint8 buf[2];
//  368 
//  369   buf[0] = LO_UINT16( timeout );
//  370   buf[1] = HI_UINT16( timeout );
//  371 
//  372   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  373                           COMMAND_IDENTIFY_QUERY_RSP, TRUE,
//  374                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
//  375 }
//  376 #endif // ZCL_IDENTIFY
//  377 
//  378 #ifdef ZCL_GROUPS
//  379 /*********************************************************************
//  380  * @fn      zclGeneral_SendGroupRequest
//  381  *
//  382  * @brief   Send a Group Request to a device.  You can also use the
//  383  *          appropriate macro.
//  384  *
//  385  * @param   srcEP - Sending Apps endpoint
//  386  * @param   dstAddr - where to send the request
//  387  * @param   cmd - one of the following:
//  388  *              COMMAND_GROUP_VIEW
//  389  *              COMMAND_GROUP_REMOVE
//  390  * @param   groupID -
//  391  *
//  392  * @return  ZStatus_t
//  393  */
//  394 ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  395                                        uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  396 {
//  397   uint8 buf[2];
//  398 
//  399   buf[0] = LO_UINT16( groupID );
//  400   buf[1] = HI_UINT16( groupID );
//  401 
//  402   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  403                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  404                             disableDefaultRsp, 0, seqNum, 2, buf ) );
//  405 }
//  406 
//  407 /*********************************************************************
//  408  * @fn      zclGeneral_SendAddGroupRequest
//  409  *
//  410  * @brief   Send the Add Group Request to a device
//  411  *
//  412  * @param   srcEP - Sending Apps endpoint
//  413  * @param   dstAddr - where to send the request
//  414  * @param   cmd - one of the following:
//  415  *                COMMAND_GROUP_ADD
//  416  *                COMMAND_GROUP_ADD_IF_IDENTIFYING
//  417  * @param   groupID - pointer to the group structure
//  418  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  419  *          string data type, so the first byte is the length of the
//  420  *          name (in bytes), then the name.
//  421  *
//  422  * @return  ZStatus_t
//  423  */
//  424 ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  425                                           uint8 cmd, uint16 groupID, uint8 *groupName,
//  426                                           uint8 disableDefaultRsp, uint8 seqNum )
//  427 {
//  428   uint8 *buf;
//  429   uint8 *pBuf;
//  430   uint8 len;
//  431   ZStatus_t status;
//  432 
//  433   len = 2;    // Group ID
//  434   len += groupName[0] + 1;  // String + 1 for length
//  435 
//  436   buf = zcl_mem_alloc( len );
//  437   if ( buf )
//  438   {
//  439     pBuf = buf;
//  440     *pBuf++ = LO_UINT16( groupID );
//  441     *pBuf++ = HI_UINT16( groupID );
//  442     *pBuf++ = groupName[0]; // string length
//  443     zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
//  444 
//  445     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  446                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  447                               disableDefaultRsp, 0, seqNum, len, buf );
//  448     zcl_mem_free( buf );
//  449   }
//  450   else
//  451     status = ZMemError;
//  452 
//  453   return ( status );
//  454 }
//  455 
//  456 /*********************************************************************
//  457  * @fn      zclGeneral_SendGroupGetMembershipRequest
//  458  *
//  459  * @brief   Send a Get Group Membership (Resposne) Command to a device
//  460  *
//  461  * @param   srcEP - Sending Apps endpoint
//  462  * @param   dstAddr - where to send the request
//  463  * @param   cmd - one of the following:
//  464  *                COMMAND_GROUP_GET_MEMBERSHIP
//  465  *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
//  466  * @param   groupID - pointer to the group structure
//  467  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  468  *          string data type, so the first byte is the length of the
//  469  *          name (in bytes), then the name.
//  470  *
//  471  * @return  ZStatus_t
//  472  */
//  473 ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  474                                                     uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
//  475                                                     uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
//  476 {
//  477   uint8 *buf;
//  478   uint8 *pBuf;
//  479   uint8 len = 0;
//  480   uint8 i;
//  481   ZStatus_t status;
//  482 
//  483   if ( rspCmd )
//  484     len++;  // Capacity
//  485 
//  486   len++;  // Group Count
//  487   len += sizeof ( uint16 ) * grpCnt;  // Group List
//  488 
//  489   buf = zcl_mem_alloc( len );
//  490   if ( buf )
//  491   {
//  492     pBuf = buf;
//  493     if ( rspCmd )
//  494       *pBuf++ = capacity;
//  495 
//  496     *pBuf++ = grpCnt;
//  497     for ( i = 0; i < grpCnt; i++ )
//  498     {
//  499       *pBuf++ = LO_UINT16( grpList[i] );
//  500       *pBuf++ = HI_UINT16( grpList[i] );
//  501     }
//  502 
//  503     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  504                               cmd, TRUE, direction,
//  505                               disableDefaultRsp, 0, seqNum, len, buf );
//  506     zcl_mem_free( buf );
//  507   }
//  508   else
//  509     status = ZMemError;
//  510 
//  511   return ( status );
//  512 }
//  513 
//  514 /*********************************************************************
//  515  * @fn      zclGeneral_SendGroupResponse
//  516  *
//  517  * @brief   Send Group Response (not Group View Response)
//  518  *
//  519  * @param   srcEP - Sending application's endpoint
//  520  * @param   dstAddr - where you want the message to go
//  521  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  522  * @param   status - group command status
//  523  * @param   groupID - what group
//  524  *
//  525  * @return  ZStatus_t
//  526  */
//  527 ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  528                                         uint8 cmd, uint8 status, uint16 groupID,
//  529                                         uint8 disableDefaultRsp, uint8 seqNum )
//  530 {
//  531   uint8 buf[3];
//  532 
//  533   buf[0] = status;
//  534   buf[1] = LO_UINT16( groupID );
//  535   buf[2] = HI_UINT16( groupID );
//  536 
//  537   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  538                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  539                           disableDefaultRsp, 0, seqNum, 3, buf );
//  540 }
//  541 
//  542 /*********************************************************************
//  543  * @fn      zclGeneral_SendGroupViewResponse
//  544  *
//  545  * @brief   Call to send Group Response Command
//  546  *
//  547  * @param   srcEP - Sending application's endpoint
//  548  * @param   dstAddr - where you want the message to go
//  549  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  550  * @param   status - group command status
//  551  * @param   grp - group info
//  552  *
//  553  * @return  ZStatus_t
//  554  */
//  555 ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  556                                             uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
//  557 {
//  558   uint8 *buf;
//  559   uint8 len;
//  560   ZStatus_t stat;
//  561 
//  562   len = 1 + 2 + 1; // Status + Group ID + name length
//  563 
//  564   if ( status == ZCL_STATUS_SUCCESS )
//  565   {
//  566     len += grp->name[0];  // String length
//  567   }
//  568 
//  569   buf = zcl_mem_alloc( len );
//  570   if ( buf )
//  571   {
//  572     buf[0] = status;
//  573     buf[1] = LO_UINT16( grp->ID );
//  574     buf[2] = HI_UINT16( grp->ID );
//  575 
//  576     if ( status == ZCL_STATUS_SUCCESS )
//  577     {
//  578       buf[3] = grp->name[0]; // string length
//  579       zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
//  580     }
//  581     else //ZCL_STATUS_NOT_FOUND
//  582     {
//  583       buf[3] = 0;
//  584     }
//  585 
//  586     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  587                             COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  588                             disableDefaultRsp, 0, seqNum, len, buf );
//  589     zcl_mem_free( buf );
//  590   }
//  591   else
//  592   {
//  593     stat = ZMemError;
//  594   }
//  595 
//  596   return ( stat );
//  597 }
//  598 #endif // ZCL_GROUPS
//  599 
//  600 #ifdef ZCL_SCENES
//  601 /*********************************************************************
//  602  * @fn      zclGeneral_SendAddSceneRequest
//  603  *
//  604  * @brief   Send the (Enhanced) Add Scene Request to a device. You can
//  605  *           also use the appropriate macro.
//  606  *
//  607  * @param   srcEP - Sending Apps endpoint
//  608  * @param   dstAddr - where to send the request
//  609  * @param   scene - pointer to the scene structure
//  610  * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
//  611  * @param   disableDefaultRsp - whether to disable the Default Response command
//  612  * @param   seqNum - sequence number
//  613  *
//  614  * @return  ZStatus_t
//  615  */
//  616 ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  617                                           uint8 cmd, zclGeneral_Scene_t *scene,
//  618                                           uint8 disableDefaultRsp, uint8 seqNum )
//  619 {
//  620   uint8 *buf;
//  621   uint8 *pBuf;
//  622   uint8 len;
//  623   ZStatus_t status;
//  624 
//  625   len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
//  626   len += scene->name[0] + 1; // String + 1 for length
//  627 
//  628   // Add something for the extension field length
//  629   len += scene->extLen;
//  630 
//  631   buf = zcl_mem_alloc( len );
//  632   if ( buf )
//  633   {
//  634     pBuf = buf;
//  635     *pBuf++ = LO_UINT16( scene->groupID );
//  636     *pBuf++ = HI_UINT16( scene->groupID );
//  637     *pBuf++ = scene->ID;
//  638     *pBuf++ = LO_UINT16( scene->transTime );
//  639     *pBuf++ = HI_UINT16( scene->transTime );
//  640     *pBuf++ = scene->name[0]; // string length
//  641     zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  642     pBuf += scene->name[0]; // move pass name
//  643 
//  644     // Add the extension fields
//  645     if ( scene->extLen > 0 )
//  646       zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  647 
//  648     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  649                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  650                               disableDefaultRsp, 0, seqNum, len, buf );
//  651     zcl_mem_free( buf );
//  652   }
//  653   else
//  654     status = ZMemError;
//  655 
//  656   return ( status );
//  657 }
//  658 
//  659 /*********************************************************************
//  660  * @fn      zclGeneral_SendSceneRequest
//  661  *
//  662  * @brief   Send a Scene Request to a device.  You can also use the
//  663  *          appropriate macro.
//  664  *
//  665  * @param   srcEP - Sending Apps endpoint
//  666  * @param   dstAddr - where to send the request
//  667  * @param   cmd - one of the following:
//  668  *              COMMAND_SCENE_VIEW
//  669  *              COMMAND_SCENE_REMOVE
//  670  *              COMMAND_SCENE_REMOVE_ALL
//  671  *              COMMAND_SCENE_STORE
//  672  *              COMMAND_SCENE_RECALL
//  673  *              COMMAND_SCENE_GET_MEMBERSHIP
//  674  *              COMMAND_SCENE_ENHANCED_VIEW
//  675  * @param   groupID - group ID
//  676  * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
//  677  *                    COMMAND_SCENE_GET_MEMBERSHIP)
//  678  * @param   disableDefaultRsp - whether to disable the Default Response command
//  679  * @param   seqNum - sequence number
//  680  * @return  ZStatus_t
//  681  */
//  682 ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  683                                        uint8 cmd, uint16 groupID, uint8 sceneID,
//  684                                        uint8 disableDefaultRsp, uint8 seqNum )
//  685 {
//  686   uint8 buf[3];
//  687   uint8 len = 2;
//  688 
//  689   buf[0] = LO_UINT16( groupID );
//  690   buf[1] = HI_UINT16( groupID );
//  691 
//  692   if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
//  693   {
//  694     buf[2] = sceneID;
//  695     len++;
//  696   }
//  697 
//  698   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  699                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  700                             disableDefaultRsp, 0, seqNum, len, buf ) );
//  701 }
//  702 
//  703 /*********************************************************************
//  704  * @fn      zclGeneral_SendSceneResponse
//  705  *
//  706  * @brief   Send Group Response (not Group View Response)
//  707  *
//  708  * @param   srcEP - Sending application's endpoint
//  709  * @param   dstAddr - where you want the message to go
//  710  * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
//  711  *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
//  712  * @param   status - scene command status
//  713  * @param   groupID - what group
//  714  * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
//  715  *
//  716  * @return  ZStatus_t
//  717  */
//  718 ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  719                                         uint8 cmd, uint8 status, uint16 groupID,
//  720                                         uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
//  721 {
//  722   uint8 buf[4];
//  723   uint8 len = 1 + 2; // Status + Group ID
//  724 
//  725   buf[0] = status;
//  726   buf[1] = LO_UINT16( groupID );
//  727   buf[2] = HI_UINT16( groupID );
//  728 
//  729   if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
//  730   {
//  731     buf[3] = sceneID;
//  732     len++;
//  733   }
//  734 
//  735   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  736                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  737                           disableDefaultRsp, 0, seqNum, len, buf );
//  738 }
//  739 
//  740 /*********************************************************************
//  741  * @fn      zclGeneral_SendSceneViewResponse
//  742  *
//  743  * @brief   Call to send Scene (Enahced) View Response Command. You can
//  744  *           also use the appropriate macro.
//  745  *
//  746  * @param   srcEP - Sending application's endpoint
//  747  * @param   dstAddr - where you want the message to go
//  748  * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
//  749  * @param   status - scene command status
//  750  * @param   scene - scene info
//  751  *
//  752  * @return  ZStatus_t
//  753  */
//  754 ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
//  755                                        uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
//  756                                        uint8 disableDefaultRsp, uint8 seqNum )
//  757 {
//  758   uint8 *buf;
//  759   uint8 *pBuf;
//  760   uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
//  761   ZStatus_t stat;
//  762 
//  763   if ( status == ZCL_STATUS_SUCCESS )
//  764   {
//  765     len += 2; // Transition Time
//  766     len += scene->name[0] + 1; // string + 1 for length
//  767 
//  768     // Add something for the extension field length
//  769     len += scene->extLen;
//  770   }
//  771 
//  772   buf = zcl_mem_alloc( len );
//  773   if ( buf )
//  774   {
//  775     pBuf = buf;
//  776     *pBuf++ = status;
//  777     *pBuf++ = LO_UINT16( scene->groupID );
//  778     *pBuf++ = HI_UINT16( scene->groupID );
//  779     *pBuf++ = scene->ID;
//  780     if ( status == ZCL_STATUS_SUCCESS )
//  781     {
//  782       uint16 transTime = scene->transTime;
//  783       if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
//  784       {
//  785         // Transition time is in 1/10s
//  786         transTime *= 10;
//  787         transTime += scene->transTime100ms;
//  788       }
//  789 
//  790       *pBuf++ = LO_UINT16( transTime );
//  791       *pBuf++ = HI_UINT16( transTime );
//  792       *pBuf++ = scene->name[0]; // string length
//  793       if ( scene->name[0] != 0 )
//  794       {
//  795         zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  796         pBuf += scene->name[0]; // move pass name
//  797       }
//  798 
//  799       // Add the extension fields
//  800       if ( scene->extLen > 0 )
//  801         zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  802     }
//  803 
//  804     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  805                             cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  806                             disableDefaultRsp, 0, seqNum, len, buf );
//  807     zcl_mem_free( buf );
//  808   }
//  809   else
//  810     stat = ZMemError;
//  811 
//  812   return ( stat );
//  813 }
//  814 
//  815 /*********************************************************************
//  816  * @fn      zclGeneral_SendSceneGetMembershipResponse
//  817  *
//  818  * @brief   Call to send Scene Get Membership Response Command
//  819  *
//  820  * @param   srcEP - Sending application's endpoint
//  821  * @param   dstAddr - where you want the message to go
//  822  * @param   status - scene command status
//  823  * @param   capacity - remaining capacity of the scene table
//  824  * @param   sceneCnt - number of scenes in the scene list
//  825  * @param   sceneList - list of scene IDs
//  826  * @param   groupID - group ID that scene belongs to
//  827  * @param   seqNum - sequence number
//  828  *
//  829  * @return  ZStatus_t
//  830  */
//  831 ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  832                                                      uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
//  833                                                      uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  834 {
//  835   uint8 *buf;
//  836   uint8 *pBuf;
//  837   uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
//  838   uint8 i;
//  839   ZStatus_t stat;
//  840 
//  841   if ( status == ZCL_STATUS_SUCCESS )
//  842   {
//  843     len++; // Scene Count
//  844     len += sceneCnt; // Scene List (Scene ID is a single octet)
//  845   }
//  846 
//  847   buf = zcl_mem_alloc( len );
//  848   if ( buf )
//  849   {
//  850     pBuf = buf;
//  851     *pBuf++ = status;
//  852     *pBuf++ = capacity;
//  853     *pBuf++ = LO_UINT16( groupID );
//  854     *pBuf++ = HI_UINT16( groupID );
//  855     if ( status == ZCL_STATUS_SUCCESS )
//  856     {
//  857       *pBuf++ = sceneCnt;
//  858       for ( i = 0; i < sceneCnt; i++ )
//  859         *pBuf++ = sceneList[i];
//  860     }
//  861 
//  862     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  863                             COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
//  864                             ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
//  865     zcl_mem_free( buf );
//  866   }
//  867   else
//  868     stat = ZMemError;
//  869 
//  870   return ( stat );
//  871 }
//  872 
//  873 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  874 /*********************************************************************
//  875  * @fn      zclGeneral_SendSceneCopy
//  876  *
//  877  * @brief   Send Scene Copy Request to a device
//  878  *
//  879  * @param   srcEP - sending application's endpoint
//  880  * @param   dstAddr - where to send the request
//  881  * @param   mode - how scene copy is to proceed
//  882  * @param   groupIDFrom - group from which scene to be copied
//  883  * @param   sceneIDFrom - scene from which scene to be copied
//  884  * @param   groupIDTo - group to which scene to be copied
//  885  * @param   sceneIDTo - scene to which scene to be copied
//  886  * @param   disableDefaultRsp - disable Default Response command
//  887  * @param   seqNum - the identification number for the transaction
//  888  *
//  889  * @return  ZStatus_t
//  890  */
//  891 ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
//  892                                     uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
//  893                                     uint16 groupIDTo, uint8 sceneIDTo,
//  894                                     uint8 disableDefaultRsp, uint8 seqNum )
//  895 {
//  896   uint8 buf[7];
//  897 
//  898   buf[0] = mode;
//  899   buf[1] = LO_UINT16( groupIDFrom );
//  900   buf[2] = HI_UINT16( groupIDFrom );
//  901   buf[3] = sceneIDFrom;
//  902   buf[4] = LO_UINT16( groupIDTo );
//  903   buf[5] = HI_UINT16( groupIDTo );
//  904   buf[6] = sceneIDTo;
//  905 
//  906   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  907                             COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  908                             disableDefaultRsp, 0, seqNum, 7, buf ) );
//  909 }
//  910 
//  911 /*********************************************************************
//  912  * @fn      zclGeneral_SendSceneCopyResponse
//  913  *
//  914  * @brief   Send Scene Copy Response to a device
//  915  *
//  916  * @param   srcEP - sending application's endpoint
//  917  * @param   dstAddr - where to send the request
//  918  * @param   status - status of copy scene attemp
//  919  * @param   groupIDFrom - group from which scene was copied
//  920  * @param   sceneIDFrom - scene from which scene was copied
//  921  * @param   disableDefaultRsp - disable Default Response command
//  922  * @param   seqNum - the identification number for the transaction
//  923  *
//  924  * @return  ZStatus_t
//  925  */
//  926 ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  927                                             uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
//  928                                             uint8 disableDefaultRsp, uint8 seqNum )
//  929 {
//  930   uint8 buf[4];
//  931 
//  932   buf[0] = status;
//  933   buf[1] = LO_UINT16( groupIDFrom );
//  934   buf[2] = HI_UINT16( groupIDFrom );
//  935   buf[3] = sceneIDFrom;
//  936 
//  937   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  938                             COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  939                             disableDefaultRsp, 0, seqNum, 4, buf ) );
//  940 }
//  941 #endif // ZCL_LIGHT_LINK_ENHANCE
//  942 #endif // ZCL_SCENES
//  943 
//  944 #ifdef ZCL_ON_OFF
//  945 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  946 /*********************************************************************
//  947  * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
//  948  *
//  949  * @brief   Call to send out an Off with Effect Command.
//  950  *
//  951  * @param   srcEP - Sending application's endpoint
//  952  * @param   dstAddr - where you want the message to go
//  953  * @param   effectId - fading effect to use when switching light off
//  954  * @param   effectVariant - which variant of effect to be triggered
//  955  * @param   disableDefaultRsp - whether to disable the Default Response command
//  956  * @param   seqNum - sequence number
//  957  *
//  958  * @return  ZStatus_t
//  959  */
//  960 ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  961                                                  uint8 effectId, uint8 effectVariant,
//  962                                                  uint8 disableDefaultRsp, uint8 seqNum )
//  963 {
//  964   uint8 buf[2];
//  965 
//  966   buf[0] = effectId;
//  967   buf[1] = effectVariant;
//  968 
//  969   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
//  970                           COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  971                           disableDefaultRsp, 0, seqNum, 2, buf );
//  972 }
//  973 
//  974 /*********************************************************************
//  975  * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
//  976  *
//  977  * @brief   Call to send out an On with Timed Off Command.
//  978  *
//  979  * @param   srcEP - Sending application's endpoint
//  980  * @param   dstAddr - where you want the message to go
//  981  * @param   onOffCtrl - how the lamp is to be operated
//  982  * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
//  983  * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
//  984  * @param   disableDefaultRsp - whether to disable the Default Response command
//  985  * @param   seqNum - sequence number
//  986  *
//  987  * @return  ZStatus_t
//  988  */
//  989 ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
//  990                                                    zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
//  991                                                    uint8 disableDefaultRsp, uint8 seqNum )
//  992 {
//  993   uint8 buf[5];
//  994 
//  995   buf[0] = onOffCtrl.byte;
//  996   buf[1] = LO_UINT16( onTime );
//  997   buf[2] = HI_UINT16( onTime );
//  998   buf[3] = LO_UINT16( offWaitTime );
//  999   buf[4] = HI_UINT16( offWaitTime );
// 1000 
// 1001   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
// 1002                           COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1003                           disableDefaultRsp, 0, seqNum, 5, buf );
// 1004 }
// 1005 #endif // ZCL_LIGHT_LINK_ENHANCE
// 1006 #endif // ZCL_ON_OFF
// 1007 
// 1008 #ifdef ZCL_LEVEL_CTRL
// 1009 /*********************************************************************
// 1010  * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
// 1011  *
// 1012  * @brief   Call to send out a Level Control Request. You can also use
// 1013  *          the appropriate macro.
// 1014  *
// 1015  * @param   srcEP - Sending application's endpoint
// 1016  * @param   dstAddr - where you want the message to go
// 1017  * @param   cmd - one of the following:
// 1018  *              COMMAND_LEVEL_MOVE_TO_LEVEL or
// 1019  *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
// 1020  * @param   level - what level to move to
// 1021  * @param   transitionTime - how long to take to get to the level (in seconds)
// 1022  *
// 1023  * @return  ZStatus_t
// 1024  */
// 1025 ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1026                                                          uint8 cmd, uint8 level, uint16 transTime,
// 1027                                                          uint8 disableDefaultRsp, uint8 seqNum )
// 1028 {
// 1029   uint8 buf[3];
// 1030 
// 1031   buf[0] = level;
// 1032   buf[1] = LO_UINT16( transTime );
// 1033   buf[2] = HI_UINT16( transTime );
// 1034 
// 1035   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1036                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1037                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1038 }
// 1039 
// 1040 /*********************************************************************
// 1041  * @fn      zclGeneral_SendLevelControlMoveRequest
// 1042  *
// 1043  * @brief   Call to send out a Level Control Request. You can also use
// 1044  *          the appropriate macro.
// 1045  *
// 1046  * @param   srcEP - Sending application's endpoint
// 1047  * @param   dstAddr - where you want the message to go
// 1048  * @param   cmd - one of the following:
// 1049  *              COMMAND_LEVEL_MOVE or
// 1050  *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
// 1051  * @param   moveMode - LEVEL_MOVE_UP or
// 1052  *                     LEVEL_MOVE_DOWN
// 1053  * @param   rate - number of steps to take per second
// 1054  *
// 1055  * @return  ZStatus_t
// 1056  */
// 1057 ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1058                                                   uint8 cmd, uint8 moveMode, uint8 rate,
// 1059                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1060 {
// 1061   uint8 buf[2];
// 1062 
// 1063   buf[0] = moveMode;
// 1064   buf[1] = rate;
// 1065 
// 1066   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1067                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1068                           disableDefaultRsp, 0, seqNum, 2, buf );
// 1069 }
// 1070 
// 1071 /*********************************************************************
// 1072  * @fn      zclGeneral_SendLevelControlStepRequest
// 1073  *
// 1074  * @brief   Call to send out a Level Control Request. You can also use
// 1075  *          the appropriate macro.
// 1076  *
// 1077  * @param   srcEP - Sending application's endpoint
// 1078  * @param   dstAddr - where you want the message to go
// 1079  * @param   cmd - one of the following:
// 1080  *              COMMAND_LEVEL_STEP
// 1081  *              COMMAND_LEVEL_STEP_WITH_ON_OFF
// 1082  * @param   stepMode - LEVEL_STEP_UP or
// 1083  *                     LEVEL_STEP_DOWN
// 1084  * @param   amount - number of levels to step
// 1085  * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
// 1086  *
// 1087  * @return  ZStatus_t
// 1088  */
// 1089 ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1090                                                   uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
// 1091                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1092 {
// 1093   uint8 buf[4];
// 1094 
// 1095   buf[0] = stepMode;
// 1096   buf[1] = stepSize;
// 1097   buf[2] = LO_UINT16( transTime );
// 1098   buf[3] = HI_UINT16( transTime );
// 1099 
// 1100   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1101                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1102                           disableDefaultRsp, 0, seqNum, 4, buf );
// 1103 }
// 1104 
// 1105 /*********************************************************************
// 1106  * @fn      zclGeneral_SendLevelControlStepRequest
// 1107  *
// 1108  * @brief   Call to send out a Level Control Request. You can also use
// 1109  *          the appropriate macro.
// 1110  *
// 1111  * @param   srcEP - Sending application's endpoint
// 1112  * @param   dstAddr - where you want the message to go
// 1113  * @param   cmd - one of the following:
// 1114  *              COMMAND_LEVEL_STOP
// 1115  *              COMMAND_LEVEL_STOP_WITH_ON_OFF
// 1116  *
// 1117  * @return  ZStatus_t
// 1118  */
// 1119 ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1120                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1121 {
// 1122   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1123                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1124                           disableDefaultRsp, 0, seqNum, 0, NULL );
// 1125 }
// 1126 #endif // ZCL_LEVEL_CTRL
// 1127 
// 1128 #ifdef ZCL_ALARMS
// 1129 /*********************************************************************
// 1130  * @fn      zclGeneral_SendAlarm
// 1131  *
// 1132  * @brief   Call to send out an Alarm Request Command
// 1133  *
// 1134  * @param   srcEP - Sending application's endpoint
// 1135  * @param   dstAddr - where you want the message to go
// 1136  * @param   cmd - COMMAND_ALARMS_ALARM
// 1137  * @param   alarmCode - code for the cause of the alarm
// 1138  * @param   clusterID - cluster whose attribute generate the alarm
// 1139  *
// 1140  * @return  ZStatus_t
// 1141  */
// 1142 ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
// 1143                                 uint8 alarmCode, uint16 clusterID,
// 1144                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1145 {
// 1146   uint8 buf[3];
// 1147 
// 1148   buf[0] = alarmCode;
// 1149   buf[1] = LO_UINT16( clusterID );
// 1150   buf[2] = HI_UINT16( clusterID );
// 1151 
// 1152   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1153                           COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1154                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1155 }
// 1156 
// 1157 /*********************************************************************
// 1158  * @fn      zclGeneral_SendAlarmReset
// 1159  *
// 1160  * @brief   Call to send out an Alarm Reset Command
// 1161  *
// 1162  * @param   srcEP - Sending application's endpoint
// 1163  * @param   dstAddr - where you want the message to go
// 1164  * @param   alarmCode - code for the cause of the alarm
// 1165  * @param   clusterID - cluster whose attribute generate the alarm
// 1166  *
// 1167  * @return  ZStatus_t
// 1168 */
// 1169 ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
// 1170                                      uint8 alarmCode, uint16 clusterID,
// 1171                                      uint8 disableDefaultRsp, uint8 seqNum )
// 1172 {
// 1173   uint8 buf[3];
// 1174 
// 1175   buf[0] = alarmCode;
// 1176   buf[1] = LO_UINT16( clusterID );
// 1177   buf[2] = HI_UINT16( clusterID );
// 1178 
// 1179   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1180                           COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1181                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1182 }
// 1183 
// 1184 /*********************************************************************
// 1185  * @fn      zclGeneral_SendAlarmGetResponse
// 1186  *
// 1187  * @brief   Call to send out an Alarm Get Response Command
// 1188  *
// 1189  * @param   srcEP - Sending application's endpoint
// 1190  * @param   dstAddr - where you want the message to go
// 1191  * @param   status - SUCCESS or NOT_FOUND
// 1192  * @param   alarmCode - code for the cause of the alarm
// 1193  * @param   clusterID - cluster whose attribute generate the alarm
// 1194  * @param   timeStamp - time at which the alarm occured
// 1195  *
// 1196  * @return  ZStatus_t
// 1197  */
// 1198 ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1199                                            uint8 status, uint8 alarmCode, uint16 clusterID,
// 1200                                            uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
// 1201 {
// 1202   uint8 buf[8];
// 1203   uint8 len = 1; // Status
// 1204 
// 1205   buf[0] = status;
// 1206   if ( status == ZCL_STATUS_SUCCESS )
// 1207   {
// 1208     len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
// 1209     buf[1] = alarmCode;
// 1210     buf[2] = LO_UINT16( clusterID );
// 1211     buf[3] = HI_UINT16( clusterID );
// 1212     zcl_buffer_uint32( &buf[4], timeStamp );
// 1213   }
// 1214 
// 1215   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1216                           COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1217                           disableDefaultRsp, 0, seqNum, len, buf );
// 1218 }
// 1219 
// 1220 #ifdef SE_UK_EXT
// 1221 /*********************************************************************
// 1222  * @fn      zclGeneral_SendAlarmGetEventLog
// 1223  *
// 1224  * @brief   Call to send out an Alarm Get Event Log Command
// 1225  *
// 1226  * @param   srcEP - Sending application's endpoint
// 1227  * @param   dstAddr - where you want the message to go
// 1228  * @param   pEventLog - pointer to Get Event Log Command
// 1229  * @param   disableDefaultRsp - disable default response
// 1230  * @param   seqNum - ZCL sequence number
// 1231  *
// 1232  * @return  ZStatus_t
// 1233  */
// 1234 ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1235                                            zclGetEventLog_t *pEventLog,
// 1236                                            uint8 disableDefaultRsp, uint8 seqNum )
// 1237 {
// 1238   uint8 buf[10];
// 1239 
// 1240   buf[0] = pEventLog->logID;
// 1241   zcl_buffer_uint32( &buf[1], pEventLog->startTime );
// 1242   zcl_buffer_uint32( &buf[5], pEventLog->endTime );
// 1243   buf[9] = pEventLog->numEvents;
// 1244 
// 1245   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1246                           COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1247                           disableDefaultRsp, 0, seqNum, 10, buf );
// 1248 }
// 1249 
// 1250 /*********************************************************************
// 1251  * @fn      zclGeneral_SendAlarmPublishEventLog
// 1252  *
// 1253  * @brief   Call to send out an Alarm Publish Event Log Command
// 1254  *
// 1255  * @param   srcEP - Sending application's endpoint
// 1256  * @param   dstAddr - where you want the message to go
// 1257  * @param   pEventLog - pointer to Publish Event Log Command
// 1258  * @param   disableDefaultRsp - disable default response
// 1259  * @param   seqNum - ZCL sequence number
// 1260  *
// 1261  * @return  ZStatus_t
// 1262  */
// 1263 ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1264                                                zclPublishEventLog_t *pEventLog,
// 1265                                                uint8 disableDefaultRsp, uint8 seqNum )
// 1266 {
// 1267   uint8 *buf;
// 1268   uint8 *pBuf;
// 1269   uint8 bufLen;
// 1270 
// 1271   // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
// 1272   bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
// 1273 
// 1274   buf = zcl_mem_alloc( bufLen );
// 1275   if ( buf == NULL )
// 1276   {
// 1277     return (ZMemError);
// 1278   }
// 1279 
// 1280   pBuf = buf;
// 1281   *pBuf++ = pEventLog->logID;
// 1282   *pBuf++ = pEventLog->cmdIndex;
// 1283   *pBuf++ = pEventLog->totalCmds;
// 1284 
// 1285   for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
// 1286   {
// 1287     zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
// 1288 
// 1289     *pBuf++ = pLogs->eventId;
// 1290     pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
// 1291   }
// 1292 
// 1293   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1294                           COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1295                           disableDefaultRsp, 0, seqNum, bufLen, buf );
// 1296 }
// 1297 #endif // SE_UK_EXT
// 1298 #endif // ZCL_ALARMS
// 1299 
// 1300 #ifdef ZCL_LOCATION
// 1301 /*********************************************************************
// 1302  * @fn      zclGeneral_SendLocationSetAbsolute
// 1303  *
// 1304  * @brief   Call to send out a Set Absolute Location Command
// 1305  *
// 1306  * @param   srcEP - Sending application's endpoint
// 1307  * @param   dstAddr - where you want the message to go
// 1308  * @param   absLoc - absolute location info
// 1309  *
// 1310  * @return  ZStatus_t
// 1311  */
// 1312 ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
// 1313                                               zclLocationAbsolute_t *absLoc,
// 1314                                               uint8 disableDefaultRsp, uint8 seqNum )
// 1315 {
// 1316    uint8 buf[10]; // 5 fields (2 octects each)
// 1317 
// 1318    buf[0] = LO_UINT16( absLoc->coordinate1 );
// 1319    buf[1] = HI_UINT16( absLoc->coordinate1 );
// 1320    buf[2] = LO_UINT16( absLoc->coordinate2 );
// 1321    buf[3] = HI_UINT16( absLoc->coordinate2 );
// 1322    buf[4] = LO_UINT16( absLoc->coordinate3 );
// 1323    buf[5] = HI_UINT16( absLoc->coordinate3 );
// 1324    buf[6] = LO_UINT16( absLoc->power );
// 1325    buf[7] = HI_UINT16( absLoc->power );
// 1326    buf[8] = LO_UINT16( absLoc->pathLossExponent );
// 1327    buf[9] = HI_UINT16( absLoc->pathLossExponent );
// 1328 
// 1329    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1330                            COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
// 1331                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
// 1332 }
// 1333 
// 1334 /*********************************************************************
// 1335  * @fn      zclGeneral_SendLocationSetDevCfg
// 1336  *
// 1337  * @brief   Call to send out a Set Device Configuration Command
// 1338  *
// 1339  * @param   srcEP - Sending application's endpoint
// 1340  * @param   dstAddr - where you want the message to go
// 1341  * @param   devCfg - device configuration info
// 1342  *
// 1343  * @return  ZStatus_t
// 1344  */
// 1345 ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1346                                             zclLocationDevCfg_t *devCfg,
// 1347                                             uint8 disableDefaultRsp, uint8 seqNum )
// 1348 {
// 1349    uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
// 1350 
// 1351    buf[0] = LO_UINT16( devCfg->power );
// 1352    buf[1] = HI_UINT16( devCfg->power );
// 1353    buf[2] = LO_UINT16( devCfg->pathLossExponent );
// 1354    buf[3] = HI_UINT16( devCfg->pathLossExponent );
// 1355    buf[4] = LO_UINT16( devCfg->calcPeriod );
// 1356    buf[5] = HI_UINT16( devCfg->calcPeriod );
// 1357    buf[6] = devCfg->numMeasurements;
// 1358    buf[7] = LO_UINT16( devCfg->reportPeriod );
// 1359    buf[8] = HI_UINT16( devCfg->reportPeriod );
// 1360 
// 1361    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1362                            COMMAND_LOCATION_SET_DEV_CFG, TRUE,
// 1363                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
// 1364 }
// 1365 
// 1366 /*********************************************************************
// 1367  * @fn      zclGeneral_SendLocationGetDevCfg
// 1368  *
// 1369  * @brief   Call to send out a Get Device Configuration Command
// 1370  *
// 1371  * @param   srcEP - Sending application's endpoint
// 1372  * @param   dstAddr - where you want the message to go
// 1373  * @param   targetAddr - device for which location parameters are being requested
// 1374  *
// 1375  * @return  ZStatus_t
// 1376  */
// 1377 ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1378                                             uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
// 1379 {
// 1380   uint8 buf[8];
// 1381 
// 1382   zcl_memcpy( buf, targetAddr, 8 );
// 1383 
// 1384   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1385                           COMMAND_LOCATION_GET_DEV_CFG, TRUE,
// 1386                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
// 1387 }
// 1388 
// 1389 /*********************************************************************
// 1390  * @fn      zclGeneral_SendLocationGetData
// 1391  *
// 1392  * @brief   Call to send out a Get Location Data Command
// 1393  *
// 1394  * @param   srcEP - Sending application's endpoint
// 1395  * @param   dstAddr - where you want the message to go
// 1396  * @param   locaData - location information and channel parameters that are requested.
// 1397  *
// 1398  * @return  ZStatus_t
// 1399  */
// 1400 ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
// 1401                                           zclLocationGetData_t *locData,
// 1402                                           uint8 disableDefaultRsp, uint8 seqNum )
// 1403 {
// 1404   uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
// 1405   uint8 *pBuf = buf;
// 1406   uint8 len = 2; // bitmap + number responses
// 1407 
// 1408   *pBuf  = locData->absoluteOnly;
// 1409   *pBuf |= locData->recalculate << 1;
// 1410   *pBuf |= locData->brdcastIndicator << 2;
// 1411   *pBuf |= locData->brdcastResponse << 3;
// 1412   *pBuf |= locData->compactResponse << 4;
// 1413   pBuf++;  // move past the bitmap field
// 1414 
// 1415   *pBuf++ = locData->numResponses;
// 1416 
// 1417   if ( locData->brdcastIndicator == 0 )
// 1418   {
// 1419     zcl_memcpy( pBuf, locData->targetAddr, 8 );
// 1420     len += 8; // ieee addr
// 1421   }
// 1422 
// 1423   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1424                           COMMAND_LOCATION_GET_DATA, TRUE,
// 1425                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1426 }
// 1427 
// 1428 /*********************************************************************
// 1429  * @fn      zclGeneral_SendLocationDevCfgResponse
// 1430  *
// 1431  * @brief   Call to send out a Device Configuration Response Command
// 1432  *
// 1433  * @param   srcEP - Sending application's endpoint
// 1434  * @param   dstAddr - where you want the message to go
// 1435  * @param   devCfg - device's location parameters that are requested
// 1436  *
// 1437  * @return  ZStatus_t
// 1438  */
// 1439 ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1440                                                  zclLocationDevCfgRsp_t *devCfg,
// 1441                                                  uint8 disableDefaultRsp, uint8 seqNum )
// 1442 {
// 1443   uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
// 1444   uint8 len = 1; // Status
// 1445 
// 1446   buf[0] = devCfg->status;
// 1447   if ( devCfg->status == ZCL_STATUS_SUCCESS )
// 1448   {
// 1449     buf[1] = LO_UINT16( devCfg->data.power );
// 1450     buf[2] = HI_UINT16( devCfg->data.power );
// 1451     buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
// 1452     buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
// 1453     buf[5] = LO_UINT16( devCfg->data.calcPeriod );
// 1454     buf[6] = HI_UINT16( devCfg->data.calcPeriod );
// 1455     buf[7] = devCfg->data.numMeasurements;
// 1456     buf[8] = LO_UINT16( devCfg->data.reportPeriod );
// 1457     buf[9] = HI_UINT16( devCfg->data.reportPeriod );
// 1458     len += 9;
// 1459   }
// 1460 
// 1461   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1462                           COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
// 1463                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1464 }
// 1465 
// 1466 /*********************************************************************
// 1467  * @fn      zclGeneral_SendLocationData
// 1468  *
// 1469  * @brief   Call to send out location data
// 1470  *
// 1471  * @param   srcEP - Sending application's endpoint
// 1472  * @param   dstAddr - where you want the message to go
// 1473  * @param   status - indicates whether response to request was successful or not
// 1474  * @param   locData - location information and channel parameters being sent
// 1475  *
// 1476  * @return  ZStatus_t
// 1477  */
// 1478 ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1479                                        uint8 status, zclLocationData_t *locData,
// 1480                                        uint8 disableDefaultRsp, uint8 seqNum )
// 1481 {
// 1482   uint8 buf[16];
// 1483   uint8 *pBuf = buf;
// 1484   uint8 len = 0;
// 1485 
// 1486   if ( cmd == COMMAND_LOCATION_DATA_RSP )
// 1487   {
// 1488     // Only response command includes a status field
// 1489     *pBuf++ = status;
// 1490     len++;
// 1491   }
// 1492 
// 1493   if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
// 1494   {
// 1495     // Notification or Response with successful status
// 1496     *pBuf++ = locData->type;
// 1497     *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
// 1498     *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
// 1499     *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
// 1500     *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
// 1501     len += 5;
// 1502 
// 1503     if ( locationType2D(locData->type) == 0 )
// 1504     {
// 1505       // 2D location doesn't have coordinate 3
// 1506       *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
// 1507       *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
// 1508       len += 2;
// 1509     }
// 1510 
// 1511     if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1512     {
// 1513       // Compact notification doesn't include these fields
// 1514       *pBuf++ = LO_UINT16( locData->absLoc.power );
// 1515       *pBuf++ = HI_UINT16( locData->absLoc.power );
// 1516       *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
// 1517       *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
// 1518       len += 4;
// 1519     }
// 1520 
// 1521     if ( locationTypeAbsolute(locData->type) == 0 )
// 1522     {
// 1523       // Absolute location doesn't include these fields
// 1524       if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1525       {
// 1526         // Compact notification doesn't include this field
// 1527         *pBuf++ = locData->calcLoc.locationMethod;
// 1528         len++;
// 1529       }
// 1530 
// 1531       *pBuf++ = locData->calcLoc.qualityMeasure;
// 1532       *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
// 1533       *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
// 1534       len += 3;
// 1535     }
// 1536   }
// 1537 
// 1538   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1539                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1540                           disableDefaultRsp, 0, seqNum, len, buf );
// 1541 }
// 1542 #endif // ZCL_LOCATION
// 1543 
// 1544 /*********************************************************************
// 1545  * @fn      zclGeneral_FindCallbacks
// 1546  *
// 1547  * @brief   Find the callbacks for an endpoint
// 1548  *
// 1549  * @param   endpoint - endpoint to find the application callbacks for
// 1550  *
// 1551  * @return  pointer to the callbacks
// 1552  */
// 1553 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
// 1554 {
// 1555   zclGenCBRec_t *pCBs;
// 1556 
// 1557   pCBs = zclGenCBs;
// 1558   while ( pCBs )
// 1559   {
// 1560     if ( pCBs->endpoint == endpoint )
// 1561       return ( pCBs->CBs );
// 1562     pCBs = pCBs->next;
// 1563   }
// 1564   return ( (zclGeneral_AppCallbacks_t *)NULL );
// 1565 }
// 1566 
// 1567 /*********************************************************************
// 1568  * @fn      zclGeneral_HdlIncoming
// 1569  *
// 1570  * @brief   Callback from ZCL to process incoming Commands specific
// 1571  *          to this cluster library or Profile commands for attributes
// 1572  *          that aren't in the attribute list
// 1573  *
// 1574  *
// 1575  * @param   pInMsg - pointer to the incoming message
// 1576  *
// 1577  * @return  ZStatus_t
// 1578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1579 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
zclGeneral_HdlIncoming:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclGeneral_HdlIncoming
        CODE
// 1580 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1581   ZStatus_t stat = ZSuccess;
// 1582 
// 1583 #if defined ( INTER_PAN )
// 1584   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
// 1585     return ( stat ); // Cluster not supported thru Inter-PAN
// 1586 #endif
// 1587   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JNZ     ??zclGeneral_HdlIncoming_0
// 1588   {
// 1589     // Is this a manufacturer specific command?
// 1590     if ( pInMsg->hdr.fc.manuSpecific == 0 )
// 1591     {
// 1592       stat = zclGeneral_HdlInSpecificCommands( pInMsg );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zclGenCBs
        SJMP    ??zclGeneral_HdlIncoming_1
??zclGeneral_HdlIncoming_2:
        MOV     DPL,R0
        MOV     DPH,R1
??zclGeneral_HdlIncoming_1:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclGeneral_HdlIncoming_0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??zclGeneral_HdlIncoming_2
// 1593     }
// 1594     else
// 1595     {
// 1596       // We don't support any manufacturer specific command.
// 1597       stat = ZFailure;
// 1598     }
// 1599   }
// 1600   else
// 1601   {
// 1602     // Handle all the normal (Read, Write...) commands -- should never get here
// 1603     stat = ZFailure;
// 1604   }
// 1605   return ( stat );
??zclGeneral_HdlIncoming_0:
        MOV     R1,#0x1
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
// 1606 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGeneral_RegisterCmdCallbacks?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGeneral_HdlIncoming?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlIncoming

        END
// 1607 
// 1608 /*********************************************************************
// 1609  * @fn      zclGeneral_HdlInSpecificCommands
// 1610  *
// 1611  * @brief   Callback from ZCL to process incoming Commands specific
// 1612  *          to this cluster library
// 1613 
// 1614  * @param   pInMsg - pointer to the incoming message
// 1615  *
// 1616  * @return  ZStatus_t
// 1617  */
// 1618 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
// 1619 {
// 1620   ZStatus_t stat;
// 1621   zclGeneral_AppCallbacks_t *pCBs;
// 1622 
// 1623   // make sure endpoint exists
// 1624   pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
// 1625   if ( pCBs == NULL )
// 1626     return ( ZFailure );
// 1627 
// 1628   switch ( pInMsg->msg->clusterId )
// 1629   {
// 1630 #ifdef ZCL_BASIC
// 1631     case ZCL_CLUSTER_ID_GEN_BASIC:
// 1632       stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
// 1633       break;
// 1634 #endif // ZCL_BASIC
// 1635 
// 1636 #ifdef ZCL_IDENTIFY
// 1637     case ZCL_CLUSTER_ID_GEN_IDENTIFY:
// 1638       stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
// 1639       break;
// 1640 #endif // ZCL_IDENTIFY
// 1641 
// 1642 #ifdef ZCL_GROUPS
// 1643     case ZCL_CLUSTER_ID_GEN_GROUPS:
// 1644       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1645         stat = zclGeneral_ProcessInGroupsServer( pInMsg );
// 1646       else
// 1647         stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
// 1648       break;
// 1649 #endif // ZCL_GROUPS
// 1650 
// 1651 #ifdef ZCL_SCENES
// 1652     case ZCL_CLUSTER_ID_GEN_SCENES:
// 1653       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1654         stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
// 1655       else
// 1656         stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
// 1657       break;
// 1658 #endif // ZCL_SCENES
// 1659 
// 1660 #ifdef ZCL_ON_OFF
// 1661     case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1662       stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
// 1663       break;
// 1664 #endif // ZCL_ON_OFF
// 1665 
// 1666 #ifdef ZCL_LEVEL_CTRL
// 1667     case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1668       stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
// 1669       break;
// 1670 #endif // ZCL_LEVEL_CTRL
// 1671 
// 1672 #ifdef ZCL_ALARMS
// 1673     case ZCL_CLUSTER_ID_GEN_ALARMS:
// 1674       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1675         stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
// 1676       else
// 1677         stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
// 1678       break;
// 1679 #endif // ZCL_ALARMS
// 1680 
// 1681 #ifdef ZCL_LOCATION
// 1682     case ZCL_CLUSTER_ID_GEN_LOCATION:
// 1683       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1684         stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
// 1685       else
// 1686         stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
// 1687       break;
// 1688 #endif // ZCL_LOCATION
// 1689 
// 1690     case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1691     case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
// 1692     case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
// 1693     case ZCL_CLUSTER_ID_GEN_TIME:
// 1694     default:
// 1695       stat = ZFailure;
// 1696       break;
// 1697   }
// 1698 
// 1699   return ( stat );
// 1700 }
// 1701 
// 1702 #ifdef ZCL_BASIC
// 1703 /*********************************************************************
// 1704  * @fn      zclGeneral_ProcessInBasic
// 1705  *
// 1706  * @brief   Process in the received Basic Command.
// 1707  *
// 1708  * @param   pInMsg - pointer to the incoming message
// 1709  *
// 1710  * @return  ZStatus_t
// 1711  */
// 1712 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
// 1713                                             zclGeneral_AppCallbacks_t *pCBs )
// 1714 {
// 1715   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1716   {
// 1717     if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
// 1718       return ( ZFailure );   // Error ignore the command
// 1719 
// 1720     if ( pCBs->pfnBasicReset )
// 1721       pCBs->pfnBasicReset();
// 1722   }
// 1723   // no Client command
// 1724 
// 1725   return ( ZSuccess );
// 1726 }
// 1727 #endif // ZCL_BASIC
// 1728 
// 1729 #ifdef ZCL_IDENTIFY
// 1730 /*********************************************************************
// 1731  * @fn      zclGeneral_ProcessInIdentity
// 1732  *
// 1733  * @brief   Process in the received Identity Command.
// 1734  *
// 1735  * @param   pInMsg - pointer to the incoming message
// 1736  *
// 1737  * @return  ZStatus_t
// 1738  */
// 1739 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
// 1740                                                zclGeneral_AppCallbacks_t *pCBs )
// 1741 {
// 1742   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1743   {
// 1744     if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
// 1745     {
// 1746       if ( pCBs->pfnIdentify )
// 1747       {
// 1748         zclIdentify_t cmd;
// 1749 
// 1750         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 1751         cmd.identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1752 
// 1753         pCBs->pfnIdentify( &cmd );
// 1754       }
// 1755     }
// 1756     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
// 1757     {
// 1758       uint16 identifyTime = 0;
// 1759 
// 1760       // Retrieve Identify Time
// 1761       zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 1762                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
// 1763 
// 1764       // Is device identifying itself?
// 1765       if ( identifyTime > 0 )
// 1766       {
// 1767         zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1768                                               identifyTime, true, pInMsg->hdr.transSeqNum );
// 1769 #ifdef ZCL_EZMODE
// 1770         zcl_EZModeAction( EZMODE_ACTION_IDENTIFY_QUERY, NULL );
// 1771 #endif
// 1772         return ( ZCL_STATUS_CMD_HAS_RSP );
// 1773       }
// 1774     }
// 1775 #ifdef ZCL_EZMODE
// 1776     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_EZMODE_INVOKE )
// 1777     {
// 1778       if ( pCBs->pfnIdentifyEZModeInvoke )
// 1779       {
// 1780         pCBs->pfnIdentifyEZModeInvoke( pInMsg->pData[0] );
// 1781       }
// 1782     }
// 1783     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE )
// 1784     {
// 1785       if ( pCBs->pfnIdentifyUpdateCommState )
// 1786       {
// 1787         zclIdentifyUpdateCommState_t cmd;
// 1788 
// 1789         cmd.action = pInMsg->pData[0];
// 1790         cmd.commissionStateMask = pInMsg->pData[1];
// 1791 
// 1792         pCBs->pfnIdentifyUpdateCommState( &cmd );
// 1793       }
// 1794     }
// 1795 #endif
// 1796 
// 1797 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 1798     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
// 1799     {
// 1800       if ( pCBs->pfnIdentifyTriggerEffect )
// 1801       {
// 1802         zclIdentifyTriggerEffect_t cmd;
// 1803 
// 1804         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 1805         cmd.effectId = pInMsg->pData[0];
// 1806         cmd.effectVariant = pInMsg->pData[1];
// 1807 
// 1808         pCBs->pfnIdentifyTriggerEffect( &cmd );
// 1809       }
// 1810     }
// 1811 #endif //ZCL_LIGHT_LINK_ENHANCE
// 1812     else
// 1813     {
// 1814       return ( ZFailure );   // Error ignore the command
// 1815     }
// 1816   }
// 1817   else // Client Command
// 1818   {
// 1819     if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
// 1820       return ( ZFailure );   // Error ignore the command
// 1821 
// 1822     if ( pCBs->pfnIdentifyQueryRsp )
// 1823     {
// 1824       zclIdentifyQueryRsp_t rsp;
// 1825 
// 1826       rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 1827       rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1828 
// 1829       pCBs->pfnIdentifyQueryRsp( &rsp );
// 1830     }
// 1831   }
// 1832 
// 1833   return ( ZSuccess );
// 1834 }
// 1835 #endif // ZCL_IDENTIFY
// 1836 
// 1837 #ifdef ZCL_GROUPS
// 1838 
// 1839 /*********************************************************************
// 1840  * @fn      zclGeneral_AddGroup
// 1841  *
// 1842  * @brief   Add a Group.
// 1843  *
// 1844  * @param   endPoint - application endpoint
// 1845  * @param   group - group to be added
// 1846  * @param   pData - pointer to the group info
// 1847  *
// 1848  * @return  ZStatus_t
// 1849  */
// 1850 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
// 1851 {
// 1852   uint8 nameLen;
// 1853   uint8 nameSupport = FALSE;
// 1854 
// 1855   pData += 2;   // Move past group ID
// 1856   nameLen = *pData++;
// 1857 
// 1858   // Retrieve Name Support attribute
// 1859   zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
// 1860                     ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
// 1861 
// 1862   if ( nameSupport )
// 1863   {
// 1864     if ( nameLen > (APS_GROUP_NAME_LEN-1) )
// 1865        nameLen = (APS_GROUP_NAME_LEN-1);
// 1866     group->name[0] = nameLen;
// 1867     zcl_memcpy( &(group->name[1]), pData, nameLen );
// 1868   }
// 1869 
// 1870   return ( aps_AddGroup( endPoint, group ) );
// 1871 }
// 1872 
// 1873 /*********************************************************************
// 1874  * @fn      zclGeneral_ProcessInGroupsServer
// 1875  *
// 1876  * @brief   Process in the received Groups Command.
// 1877  *
// 1878  * @param   pInMsg - pointer to the incoming message
// 1879  *
// 1880  * @return  ZStatus_t
// 1881  */
// 1882 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
// 1883 {
// 1884   aps_Group_t group;
// 1885   aps_Group_t *pGroup;
// 1886   uint8 *pData;
// 1887   uint8 status;
// 1888   uint8 grpCnt;
// 1889   uint8 grpRspCnt = 0;
// 1890   uint16 *grpList;
// 1891   uint16 identifyTime = 0;
// 1892   uint8 i;
// 1893   ZStatus_t stat = ZSuccess;
// 1894 
// 1895   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
// 1896 
// 1897   pData = pInMsg->pData;
// 1898   group.ID = BUILD_UINT16( pData[0], pData[1] );
// 1899   switch ( pInMsg->hdr.commandID )
// 1900   {
// 1901     case COMMAND_GROUP_ADD:
// 1902       status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
// 1903       if ( status != ZSuccess )
// 1904       {
// 1905         if ( status == ZApsDuplicateEntry )
// 1906         {
// 1907           status = ZCL_STATUS_DUPLICATE_EXISTS;
// 1908         }
// 1909         else
// 1910         {
// 1911           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 1912         }
// 1913       }
// 1914 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1915       if ( UNICAST_MSG( pInMsg->msg ) )
// 1916 #endif
// 1917       {
// 1918         zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1919                                          status, group.ID, true, pInMsg->hdr.transSeqNum );
// 1920         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1921       }
// 1922       break;
// 1923 
// 1924     case COMMAND_GROUP_VIEW:
// 1925 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1926       if ( UNICAST_MSG( pInMsg->msg ) )
// 1927 #endif
// 1928       {
// 1929         pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
// 1930         if ( pGroup )
// 1931         {
// 1932           status = ZCL_STATUS_SUCCESS;
// 1933         }
// 1934         else
// 1935         {
// 1936           // Group not found
// 1937           status = ZCL_STATUS_NOT_FOUND;
// 1938           pGroup = &group;
// 1939         }
// 1940         zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1941                                           status, pGroup, true, pInMsg->hdr.transSeqNum );
// 1942         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1943       }
// 1944       break;
// 1945 
// 1946     case COMMAND_GROUP_GET_MEMBERSHIP:
// 1947 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1948       if ( UNICAST_MSG( pInMsg->msg ) )
// 1949 #endif
// 1950       {
// 1951         grpCnt = *pData++;
// 1952 
// 1953         // Allocate space for the group list
// 1954         grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
// 1955         if ( grpList != NULL )
// 1956         {
// 1957           if ( grpCnt == 0 )
// 1958           {
// 1959             // Find out all the groups of which the endpoint is a member.
// 1960             grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
// 1961           }
// 1962           else
// 1963           {
// 1964             // Find out the groups (in the list) of which the endpoint is a member.
// 1965             for ( i = 0; i < grpCnt; i++ )
// 1966             {
// 1967               group.ID = BUILD_UINT16( pData[0], pData[1] );
// 1968               pData += 2;
// 1969 
// 1970               if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
// 1971                 grpList[grpRspCnt++] = group.ID;
// 1972             }
// 1973           }
// 1974 
// 1975           if ( grpCnt == 0 ||  grpRspCnt != 0 )
// 1976           {
// 1977             zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1978                                                        aps_GroupsRemaingCapacity(), grpRspCnt,
// 1979                                                        grpList, true, pInMsg->hdr.transSeqNum );
// 1980           }
// 1981 
// 1982           zcl_mem_free( grpList );
// 1983         }
// 1984         else
// 1985         {
// 1986           // Couldn't allocate space for the group list -- send a Default Response command back.
// 1987           zclDefaultRspCmd_t defaultRspCmd;
// 1988 
// 1989           defaultRspCmd.commandID = pInMsg->hdr.commandID;
// 1990           defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
// 1991           zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 1992                                  pInMsg->msg->clusterId, &defaultRspCmd,
// 1993                                  ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
// 1994         }
// 1995 
// 1996         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1997       }
// 1998       break;
// 1999 
// 2000     case COMMAND_GROUP_REMOVE:
// 2001       zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
// 2002 
// 2003       if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
// 2004       {
// 2005         status = ZCL_STATUS_SUCCESS;
// 2006       }
// 2007       else
// 2008       {
// 2009         status = ZCL_STATUS_NOT_FOUND;
// 2010       }
// 2011 
// 2012 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 2013       if ( UNICAST_MSG( pInMsg->msg ) )
// 2014 #endif
// 2015       {
// 2016         zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2017                                             status, group.ID, true, pInMsg->hdr.transSeqNum );
// 2018         stat = ZCL_STATUS_CMD_HAS_RSP;
// 2019       }
// 2020       break;
// 2021 
// 2022     case COMMAND_GROUP_REMOVE_ALL:
// 2023       {
// 2024         uint8 numGroups;
// 2025         uint16 groupList[APS_MAX_GROUPS];
// 2026 
// 2027         if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
// 2028         {
// 2029           for ( i = 0; i < numGroups; i++ )
// 2030           {
// 2031             zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
// 2032           }
// 2033 
// 2034           aps_RemoveAllGroup( pInMsg->msg->endPoint );
// 2035         }
// 2036       }
// 2037       break;
// 2038 
// 2039     case COMMAND_GROUP_ADD_IF_IDENTIFYING:
// 2040       // Retrieve Identify Time
// 2041       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2042                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
// 2043 
// 2044       // Is device identifying itself?
// 2045       if ( identifyTime > 0 )
// 2046       {
// 2047         zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
// 2048       }
// 2049       break;
// 2050 
// 2051     default:
// 2052       stat = ZFailure;
// 2053       break;
// 2054   }
// 2055 
// 2056   return ( stat );
// 2057 }
// 2058 
// 2059 /*********************************************************************
// 2060  * @fn      zclGeneral_ProcessInGroupsClient
// 2061  *
// 2062  * @brief   Process in the received Groups Command.
// 2063  *
// 2064  * @param   pInMsg - pointer to the incoming message
// 2065  *
// 2066  * @return  ZStatus_t
// 2067  */
// 2068 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
// 2069                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2070 {
// 2071   aps_Group_t group;
// 2072   uint8 *pData = pInMsg->pData;
// 2073   uint8 grpCnt;
// 2074   uint8 nameLen;
// 2075   zclGroupRsp_t rsp;
// 2076   uint8 i;
// 2077   ZStatus_t stat = ZSuccess;
// 2078 
// 2079   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
// 2080   zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
// 2081 
// 2082   switch ( pInMsg->hdr.commandID )
// 2083   {
// 2084     case COMMAND_GROUP_ADD_RSP:
// 2085     case COMMAND_GROUP_VIEW_RSP:
// 2086     case COMMAND_GROUP_REMOVE_RSP:
// 2087       rsp.status = *pData++;
// 2088       group.ID = BUILD_UINT16( pData[0], pData[1] );
// 2089 
// 2090       if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
// 2091       {
// 2092         pData += 2;   // Move past ID
// 2093         nameLen = *pData++;
// 2094         if ( nameLen > (APS_GROUP_NAME_LEN-1) )
// 2095           nameLen = (APS_GROUP_NAME_LEN-1);
// 2096         group.name[0] = nameLen;
// 2097         zcl_memcpy( &(group.name[1]), pData, nameLen );
// 2098         rsp.grpName = group.name;
// 2099       }
// 2100 
// 2101       if ( pCBs->pfnGroupRsp )
// 2102       {
// 2103         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 2104         rsp.cmdID = pInMsg->hdr.commandID;
// 2105         rsp.grpCnt = 1;
// 2106         rsp.grpList = &group.ID;
// 2107         rsp.capacity = 0;
// 2108 
// 2109         pCBs->pfnGroupRsp( &rsp );
// 2110       }
// 2111       break;
// 2112 
// 2113     case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
// 2114       {
// 2115         uint16 *grpList = NULL;
// 2116         rsp.capacity = *pData++;
// 2117         grpCnt = *pData++;
// 2118 
// 2119         if ( grpCnt > 0 )
// 2120         {
// 2121           // Allocate space for the group list
// 2122           grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
// 2123           if ( grpList != NULL )
// 2124           {
// 2125             rsp.grpCnt = grpCnt;
// 2126             for ( i = 0; i < grpCnt; i++ )
// 2127             {
// 2128               grpList[i] = BUILD_UINT16( pData[0], pData[1] );
// 2129               pData += 2;
// 2130             }
// 2131           }
// 2132         }
// 2133 
// 2134         if ( pCBs->pfnGroupRsp )
// 2135         {
// 2136           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 2137           rsp.cmdID = pInMsg->hdr.commandID;
// 2138           rsp.grpList = grpList;
// 2139 
// 2140           pCBs->pfnGroupRsp( &rsp );
// 2141         }
// 2142 
// 2143         if ( grpList != NULL )
// 2144         {
// 2145           zcl_mem_free( grpList );
// 2146         }
// 2147       }
// 2148       break;
// 2149 
// 2150     default:
// 2151       stat = ZFailure;
// 2152       break;
// 2153   }
// 2154 
// 2155   return ( stat );
// 2156 }
// 2157 #endif // ZCL_GROUPS
// 2158 
// 2159 #if defined( ZCL_SCENES )
// 2160 #if !defined ( ZCL_STANDALONE )
// 2161 /*********************************************************************
// 2162  * @fn      zclGeneral_AddScene
// 2163  *
// 2164  * @brief   Add a scene for an endpoint
// 2165  *
// 2166  * @param   endpoint -
// 2167  * @param   scene - new scene item
// 2168  *
// 2169  * @return  ZStatus_t
// 2170  */
// 2171 ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
// 2172 {
// 2173   zclGenSceneItem_t *pNewItem;
// 2174   zclGenSceneItem_t *pLoop;
// 2175 
// 2176   // Fill in the new profile list
// 2177   pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
// 2178   if ( pNewItem == NULL )
// 2179     return ( ZMemError );
// 2180 
// 2181   // Fill in the plugin record.
// 2182   pNewItem->next = (zclGenSceneItem_t *)NULL;
// 2183   pNewItem->endpoint = endpoint;
// 2184   zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
// 2185 
// 2186   // Find spot in list
// 2187   if (  zclGenSceneTable == NULL )
// 2188   {
// 2189     zclGenSceneTable = pNewItem;
// 2190   }
// 2191   else
// 2192   {
// 2193     // Look for end of list
// 2194     pLoop = zclGenSceneTable;
// 2195     while ( pLoop->next != NULL )
// 2196       pLoop = pLoop->next;
// 2197 
// 2198     // Put new item at end of list
// 2199     pLoop->next = pNewItem;
// 2200   }
// 2201 
// 2202   // Update NV
// 2203   zclGeneral_ScenesWriteNV();
// 2204 
// 2205   return ( ZSuccess );
// 2206 }
// 2207 #endif // ZCL_STANDALONE
// 2208 
// 2209 #if !defined ( ZCL_STANDALONE )
// 2210 /*********************************************************************
// 2211  * @fn      zclGeneral_FindScene
// 2212  *
// 2213  * @brief   Find a scene with endpoint and sceneID
// 2214  *
// 2215  * @param   endpoint -
// 2216  * @param   groupID - what group the scene belongs to
// 2217  * @param   sceneID - ID to look for scene
// 2218  *
// 2219  * @return  a pointer to the scene information, NULL if not found
// 2220  */
// 2221 zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2222 {
// 2223   zclGenSceneItem_t *pLoop;
// 2224 
// 2225   // Look for end of list
// 2226   pLoop = zclGenSceneTable;
// 2227   while ( pLoop )
// 2228   {
// 2229     if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
// 2230         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2231     {
// 2232       return ( &(pLoop->scene) );
// 2233     }
// 2234     pLoop = pLoop->next;
// 2235   }
// 2236 
// 2237   return ( (zclGeneral_Scene_t *)NULL );
// 2238 }
// 2239 #endif // ZCL_STANDALONE
// 2240 
// 2241 #if !defined ( ZCL_STANDALONE )
// 2242 /*********************************************************************
// 2243  * @fn      zclGeneral_FindAllScenesForGroup
// 2244  *
// 2245  * @brief   Find all the scenes with groupID
// 2246  *
// 2247  * @param   endpoint - endpoint to look for
// 2248  * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
// 2249  *
// 2250  * @return  number of scenes copied to sceneList
// 2251  */
// 2252 uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
// 2253 {
// 2254   zclGenSceneItem_t *pLoop;
// 2255   uint8 cnt = 0;
// 2256 
// 2257   // Look for end of list
// 2258   pLoop = zclGenSceneTable;
// 2259   while ( pLoop )
// 2260   {
// 2261     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2262       sceneList[cnt++] = pLoop->scene.ID;
// 2263     pLoop = pLoop->next;
// 2264   }
// 2265   return ( cnt );
// 2266 }
// 2267 #endif // ZCL_STANDALONE
// 2268 
// 2269 #if !defined ( ZCL_STANDALONE )
// 2270 /*********************************************************************
// 2271  * @fn      zclGeneral_RemoveScene
// 2272  *
// 2273  * @brief   Remove a scene with endpoint and sceneID
// 2274  *
// 2275  * @param   endpoint -
// 2276  * @param   groupID - what group the scene belongs to
// 2277  * @param   sceneID - ID to look for scene
// 2278  *
// 2279  * @return  TRUE if removed, FALSE if not found
// 2280  */
// 2281 uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2282 {
// 2283   zclGenSceneItem_t *pLoop;
// 2284   zclGenSceneItem_t *pPrev;
// 2285 
// 2286   // Look for end of list
// 2287   pLoop = zclGenSceneTable;
// 2288   pPrev = NULL;
// 2289   while ( pLoop )
// 2290   {
// 2291     if ( pLoop->endpoint == endpoint
// 2292         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2293     {
// 2294       if ( pPrev == NULL )
// 2295         zclGenSceneTable = pLoop->next;
// 2296       else
// 2297         pPrev->next = pLoop->next;
// 2298 
// 2299       // Free the memory
// 2300       zcl_mem_free( pLoop );
// 2301 
// 2302       // Update NV
// 2303       zclGeneral_ScenesWriteNV();
// 2304 
// 2305       return ( TRUE );
// 2306     }
// 2307     pPrev = pLoop;
// 2308     pLoop = pLoop->next;
// 2309   }
// 2310 
// 2311   return ( FALSE );
// 2312 }
// 2313 #endif // ZCL_STANDALONE
// 2314 
// 2315 #if !defined ( ZCL_STANDALONE )
// 2316 /*********************************************************************
// 2317  * @fn      zclGeneral_RemoveAllScenes
// 2318  *
// 2319  * @brief   Remove all scenes with endpoint and group Id
// 2320  *
// 2321  * @param   endpoint -
// 2322  * @param   groupID - ID to look for group
// 2323  *
// 2324  * @return  none
// 2325  */
// 2326 void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
// 2327 {
// 2328   zclGenSceneItem_t *pLoop;
// 2329   zclGenSceneItem_t *pPrev;
// 2330   zclGenSceneItem_t *pNext;
// 2331 
// 2332   // Look for end of list
// 2333   pLoop = zclGenSceneTable;
// 2334   pPrev = NULL;
// 2335   while ( pLoop )
// 2336   {
// 2337     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2338     {
// 2339       if ( pPrev == NULL )
// 2340         zclGenSceneTable = pLoop->next;
// 2341       else
// 2342         pPrev->next = pLoop->next;
// 2343       pNext = pLoop->next;
// 2344 
// 2345       // Free the memory
// 2346       zcl_mem_free( pLoop );
// 2347       pLoop = pNext;
// 2348     }
// 2349     else
// 2350     {
// 2351       pPrev = pLoop;
// 2352       pLoop = pLoop->next;
// 2353     }
// 2354   }
// 2355 
// 2356   // Update NV
// 2357   zclGeneral_ScenesWriteNV();
// 2358 }
// 2359 #endif // ZCL_STANDALONE
// 2360 
// 2361 #if !defined ( ZCL_STANDALONE )
// 2362 /*********************************************************************
// 2363  * @fn      zclGeneral_CountScenes
// 2364  *
// 2365  * @brief   Count the number of scenes for an endpoint
// 2366  *
// 2367  * @param   endpoint -
// 2368  *
// 2369  * @return  number of scenes assigned to an endpoint
// 2370  */
// 2371 uint8 zclGeneral_CountScenes( uint8 endpoint )
// 2372 {
// 2373   zclGenSceneItem_t *pLoop;
// 2374   uint8 cnt = 0;
// 2375 
// 2376   // Look for end of list
// 2377   pLoop = zclGenSceneTable;
// 2378   while ( pLoop )
// 2379   {
// 2380     if ( pLoop->endpoint == endpoint  )
// 2381       cnt++;
// 2382     pLoop = pLoop->next;
// 2383   }
// 2384   return ( cnt );
// 2385 }
// 2386 #endif
// 2387 
// 2388 #if !defined ( ZCL_STANDALONE )
// 2389 /*********************************************************************
// 2390  * @fn      zclGeneral_CountAllScenes
// 2391  *
// 2392  * @brief   Count the total number of scenes
// 2393  *
// 2394  * @param   none
// 2395  *
// 2396  * @return  number of scenes
// 2397  */
// 2398 uint8 zclGeneral_CountAllScenes( void )
// 2399 {
// 2400   zclGenSceneItem_t *pLoop;
// 2401   uint8 cnt = 0;
// 2402 
// 2403   // Look for end of list
// 2404   pLoop = zclGenSceneTable;
// 2405   while ( pLoop )
// 2406   {
// 2407     cnt++;
// 2408     pLoop = pLoop->next;
// 2409   }
// 2410   return ( cnt );
// 2411 }
// 2412 #endif // ZCL_STANDALONE
// 2413 
// 2414 /*********************************************************************
// 2415  * @fn      zclGeneral_ReadSceneCountCB
// 2416  *
// 2417  * @brief   Read the number of scenes currently in the device's
// 2418  *          scene table (i.e., the Scene Count attribute).
// 2419  *
// 2420  *          Note: This function gets called only when the pointer
// 2421  *                'dataPtr' to the Scene Count attribute value is
// 2422  *                NULL in the attribute database registered with
// 2423  *                the ZCL.
// 2424  *
// 2425  * @param   clusterId - cluster that attribute belongs to
// 2426  * @param   attrId - attribute to be read or written
// 2427  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
// 2428  * @param   pValue - pointer to attribute value
// 2429  * @param   pLen - pointer to length of attribute value read
// 2430  *
// 2431  * @return  status
// 2432  */
// 2433 ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
// 2434                                        uint8 oper, uint8 *pValue, uint16 *pLen )
// 2435 {
// 2436   ZStatus_t status = ZCL_STATUS_SUCCESS;
// 2437 
// 2438   // This callback function should only be called for the Scene Count attribute
// 2439   switch ( oper )
// 2440   {
// 2441     case ZCL_OPER_LEN:
// 2442       *pLen = 1; // uint8
// 2443       break;
// 2444 
// 2445     case ZCL_OPER_READ:
// 2446       *pValue = zclGeneral_CountAllScenes();
// 2447 
// 2448       if ( pLen != NULL )
// 2449       {
// 2450         *pLen = 1;
// 2451       }
// 2452       break;
// 2453 
// 2454     case ZCL_OPER_WRITE:
// 2455       // Fall through
// 2456 
// 2457     default:
// 2458       status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
// 2459       break;
// 2460   }
// 2461 
// 2462   return ( status );
// 2463 }
// 2464 
// 2465 /*********************************************************************
// 2466  * @fn      zclGeneral_ProcessInScenesServer
// 2467  *
// 2468  * @brief   Process in the received Scenes Command.
// 2469  *
// 2470  * @param   pInMsg - pointer to the incoming message
// 2471  *
// 2472  * @return  ZStatus_t
// 2473  */
// 2474 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
// 2475                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2476 {
// 2477   zclGeneral_Scene_t scene;
// 2478   zclGeneral_Scene_t *pScene;
// 2479   uint8 *pData = pInMsg->pData;
// 2480   uint8 nameLen;
// 2481   uint8 status;
// 2482   uint8 sceneCnt = 0;
// 2483   uint8 *sceneList = NULL;
// 2484   uint8 sendRsp = TRUE;
// 2485   uint8 nameSupport = FALSE;
// 2486   ZStatus_t stat = ZSuccess;
// 2487 
// 2488   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2489 
// 2490   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2491   pData += 2;   // Move past group ID
// 2492   scene.ID = *pData++;
// 2493 
// 2494   switch ( pInMsg->hdr.commandID )
// 2495   {
// 2496     case COMMAND_SCENE_ADD:
// 2497 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2498     case COMMAND_SCENE_ENHANCED_ADD:
// 2499 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2500       // Parse the rest of the incoming message
// 2501       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2502       pData += 2;
// 2503 
// 2504       if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
// 2505       {
// 2506         // Received transition time is in 1/10 second
// 2507         scene.transTime100ms = scene.transTime % 10;
// 2508         scene.transTime /= 10;
// 2509       }
// 2510 
// 2511       nameLen= *pData++; // Name length
// 2512 
// 2513       // Retrieve Name Support attribute
// 2514       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
// 2515                         ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
// 2516 
// 2517       if ( nameSupport )
// 2518       {
// 2519         if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2520           nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2521         scene.name[0] = nameLen;
// 2522         zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2523       }
// 2524 
// 2525       pData += nameLen; // move past name, use original length
// 2526 
// 2527       scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
// 2528       if ( scene.extLen > 0 )
// 2529       {
// 2530         // Copy the extention field(s)
// 2531         if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
// 2532         {
// 2533           scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
// 2534         }
// 2535         zcl_memcpy( scene.extField, pData, scene.extLen );
// 2536       }
// 2537 
// 2538       if ( scene.groupID == 0x0000 ||
// 2539            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2540       {
// 2541         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2542         // does and the corresponding Group exits
// 2543         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2544         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2545         {
// 2546           status = ZCL_STATUS_SUCCESS;
// 2547           if ( pScene != NULL )
// 2548           {
// 2549             // The Scene already exists so update it
// 2550             pScene->transTime = scene.transTime;
// 2551             zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
// 2552 
// 2553             // Use the new extention field(s)
// 2554             zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
// 2555             pScene->extLen = scene.extLen;
// 2556 
// 2557             // Save Scenes
// 2558             zclGeneral_ScenesSave();
// 2559           }
// 2560           else
// 2561           {
// 2562             // The Scene doesn't exist so add it
// 2563             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2564           }
// 2565         }
// 2566         else
// 2567         {
// 2568           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2569         }
// 2570       }
// 2571       else
// 2572       {
// 2573         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2574       }
// 2575 
// 2576       if ( UNICAST_MSG( pInMsg->msg ) )
// 2577       {
// 2578         if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
// 2579         {
// 2580           zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2581                                           status, scene.groupID, scene.ID,
// 2582                                           true, pInMsg->hdr.transSeqNum );
// 2583         }
// 2584 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2585         else // COMMAND_SCENE_ENHANCED_ADD
// 2586         {
// 2587           zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2588                                                   status, scene.groupID, scene.ID,
// 2589                                                   true, pInMsg->hdr.transSeqNum );
// 2590         }
// 2591 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2592       }
// 2593       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2594 
// 2595       break;
// 2596 
// 2597     case COMMAND_SCENE_VIEW:
// 2598 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2599     case COMMAND_SCENE_ENHANCED_VIEW:
// 2600 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2601       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2602       if ( pScene != NULL )
// 2603       {
// 2604         status = ZCL_STATUS_SUCCESS;
// 2605       }
// 2606       else
// 2607       {
// 2608         // Scene not found
// 2609         if ( scene.groupID != 0x0000 &&
// 2610              aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2611         {
// 2612           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2613         }
// 2614         else
// 2615         {
// 2616           status = ZCL_STATUS_NOT_FOUND;
// 2617         }
// 2618         pScene = &scene;
// 2619       }
// 2620 
// 2621       if ( UNICAST_MSG( pInMsg->msg ) )
// 2622       {
// 2623         if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
// 2624         {
// 2625           zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2626                                            status, pScene, true, pInMsg->hdr.transSeqNum );
// 2627         }
// 2628 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2629         else
// 2630         {
// 2631           zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2632                                                    status, pScene, true, pInMsg->hdr.transSeqNum );
// 2633         }
// 2634 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2635       }
// 2636       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2637       break;
// 2638 
// 2639     case COMMAND_SCENE_REMOVE:
// 2640       if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
// 2641       {
// 2642         status = ZCL_STATUS_SUCCESS;
// 2643       }
// 2644       else
// 2645       {
// 2646         // Scene not found
// 2647         if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2648         {
// 2649           // The Group is not in the Group Table
// 2650           status = ZCL_STATUS_INVALID_FIELD;
// 2651         }
// 2652         else
// 2653         {
// 2654           status = ZCL_STATUS_NOT_FOUND;
// 2655         }
// 2656       }
// 2657 
// 2658       if ( UNICAST_MSG( pInMsg->msg ) )
// 2659       {
// 2660         // Addressed to this device (not to a group) - send a response back
// 2661         zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2662                                             status, scene.groupID,
// 2663                                             scene.ID, true, pInMsg->hdr.transSeqNum );
// 2664       }
// 2665       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2666       break;
// 2667 
// 2668     case COMMAND_SCENE_REMOVE_ALL:
// 2669       if ( scene.groupID == 0x0000 ||
// 2670            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2671       {
// 2672         zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
// 2673         status = ZCL_STATUS_SUCCESS;
// 2674       }
// 2675       else
// 2676       {
// 2677         status = ZCL_STATUS_INVALID_FIELD;
// 2678       }
// 2679 
// 2680       if ( UNICAST_MSG( pInMsg->msg ) )
// 2681       {
// 2682         // Addressed to this device (not to a group) - send a response back
// 2683         zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2684                                                status, scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2685       }
// 2686       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2687       break;
// 2688 
// 2689     case COMMAND_SCENE_STORE:
// 2690       if ( scene.groupID == 0x0000 ||
// 2691            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2692       {
// 2693         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2694         // does and the corresponding Group exits
// 2695         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2696         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2697         {
// 2698           uint8 sceneChanged = FALSE;
// 2699 
// 2700           status = ZCL_STATUS_SUCCESS;
// 2701           if ( pScene == NULL )
// 2702           {
// 2703             // Haven't been added yet
// 2704             pScene = &scene;
// 2705           }
// 2706 
// 2707           if ( pCBs->pfnSceneStoreReq )
// 2708           {
// 2709             zclSceneReq_t req;
// 2710 
// 2711             req.srcAddr = &(pInMsg->msg->srcAddr);
// 2712             req.scene = pScene;
// 2713 
// 2714             // Get the latest Scene info
// 2715             if ( pCBs->pfnSceneStoreReq( &req ) )
// 2716             {
// 2717               sceneChanged = TRUE;
// 2718             }
// 2719           }
// 2720 
// 2721           if ( pScene == &scene )
// 2722           {
// 2723             // The Scene doesn't exist so add it
// 2724             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2725           }
// 2726           else if ( sceneChanged )
// 2727           {
// 2728             // The Scene already exists so update only NV
// 2729             zclGeneral_ScenesSave();
// 2730           }
// 2731         }
// 2732         else
// 2733         {
// 2734           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2735         }
// 2736       }
// 2737       else
// 2738       {
// 2739         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2740       }
// 2741 
// 2742       if ( UNICAST_MSG( pInMsg->msg ) )
// 2743       {
// 2744         // Addressed to this device (not to a group) - send a response back
// 2745         zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2746                                            status, scene.groupID, scene.ID,
// 2747                                            true, pInMsg->hdr.transSeqNum );
// 2748       }
// 2749       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2750       break;
// 2751 
// 2752     case COMMAND_SCENE_RECALL:
// 2753       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2754       if ( pScene && pCBs->pfnSceneRecallReq )
// 2755       {
// 2756         zclSceneReq_t req;
// 2757 
// 2758         req.srcAddr = &(pInMsg->msg->srcAddr);
// 2759         req.scene = pScene;
// 2760 
// 2761         pCBs->pfnSceneRecallReq( &req );
// 2762       }
// 2763       // No response
// 2764       break;
// 2765 
// 2766     case COMMAND_SCENE_GET_MEMBERSHIP:
// 2767       // Find all the Scenes corresponding to the Group ID
// 2768       if ( scene.groupID == 0x0000 ||
// 2769            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2770       {
// 2771         // Allocate space for the scene list
// 2772         sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
// 2773         if ( sceneList != NULL )
// 2774         {
// 2775           sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2776                                                        scene.groupID, sceneList );
// 2777           status = ZCL_STATUS_SUCCESS;
// 2778           if ( ! UNICAST_MSG( pInMsg->msg ) )
// 2779           {
// 2780             // Addressed to the Group - ONLY send a response if an entry within the
// 2781             // Scene Table corresponds to the Group ID
// 2782             if ( sceneCnt == 0 )
// 2783             {
// 2784               sendRsp = FALSE;
// 2785             }
// 2786           }
// 2787         }
// 2788         else
// 2789         {
// 2790           // Couldn't allocate space for the scene list!
// 2791           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 2792         }
// 2793       }
// 2794       else
// 2795       {
// 2796         // The Group is not in the Group Table - send a response back
// 2797         status = ZCL_STATUS_INVALID_FIELD;
// 2798       }
// 2799 
// 2800 #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
// 2801       if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
// 2802 #else
// 2803       if ( sendRsp )
// 2804 #endif //ZCL_LIGHT_LINK_ENHANCE
// 2805       {
// 2806         zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2807                                     status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
// 2808                                     scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2809       }
// 2810 
// 2811       if ( sceneList != NULL )
// 2812         zcl_mem_free( sceneList );
// 2813 
// 2814       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2815       break;
// 2816 
// 2817 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2818     case COMMAND_SCENE_COPY:
// 2819       {
// 2820         uint8 mode;
// 2821         uint16 groupIDFrom, groupIDTo;
// 2822         uint8 sceneIDFrom, sceneIDTo;
// 2823 
// 2824         pData = pInMsg->pData; // different payload format
// 2825 
// 2826         mode = *pData++;
// 2827         groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
// 2828         pData += 2;
// 2829         sceneIDFrom = *pData++; // from scene ID
// 2830         groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
// 2831         pData += 2;
// 2832         if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
// 2833         {
// 2834           sceneIDTo = *pData++; // to scene ID
// 2835         }
// 2836 
// 2837         // Make sure the groups exist
// 2838         if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
// 2839              ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
// 2840         {
// 2841           // Allocate space for the scene list
// 2842           sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
// 2843           if ( sceneList == NULL )
// 2844           {
// 2845             status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
// 2846           }
// 2847           else
// 2848           {
// 2849             status = ZCL_STATUS_SUCCESS;
// 2850             if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
// 2851             {
// 2852               sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2853                                                            groupIDFrom, sceneList );
// 2854             }
// 2855             else // Copy single scene
// 2856             {
// 2857               // Make sure the scene exists
// 2858               pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
// 2859               if ( pScene != NULL )
// 2860               {
// 2861                 sceneList[0] = sceneIDFrom;
// 2862                 sceneCnt = 1;
// 2863               }
// 2864               else
// 2865               {
// 2866                 status = ZCL_STATUS_INVALID_FIELD; // Scene not found
// 2867               }
// 2868             }
// 2869           }
// 2870 
// 2871           if ( status == ZCL_STATUS_SUCCESS )
// 2872           {
// 2873             uint8 numScenesToAdd = 0;
// 2874             uint8 i;
// 2875             for ( i = 0; i < sceneCnt; i++ )
// 2876             {
// 2877               if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
// 2878               {
// 2879                 numScenesToAdd++;
// 2880               }
// 2881             }
// 2882             if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
// 2883             {
// 2884               // Copy the scenes
// 2885               for ( i = 0; i < sceneCnt; i++ )
// 2886               {
// 2887                 // Ignore scene ID from and scene ID to fields
// 2888                 pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
// 2889                 if ( pScene != NULL )
// 2890                 {
// 2891                   zclGeneral_Scene_t *pToScene;
// 2892                   scene = *pScene;
// 2893                   scene.groupID = groupIDTo;
// 2894                   scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
// 2895 
// 2896                   pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2897                   if( pToScene != NULL )
// 2898                   {
// 2899                     zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2900                   }
// 2901                   // Add the scene
// 2902                   zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2903                 }
// 2904               }
// 2905             }
// 2906             else
// 2907             {
// 2908               status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2909             }
// 2910           }
// 2911         }
// 2912         else
// 2913         {
// 2914           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2915         }
// 2916 
// 2917         if ( UNICAST_MSG( pInMsg->msg ) )
// 2918         {
// 2919           if ( pScene == NULL )
// 2920           {
// 2921             pScene = &scene;
// 2922           }
// 2923           // Addressed to this device (not to a group) - send a response back
// 2924           zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2925                                             status, pScene->groupID, pScene->ID,
// 2926                                             true, pInMsg->hdr.transSeqNum );
// 2927         }
// 2928 
// 2929         if ( sceneList != NULL )
// 2930         {
// 2931           zcl_mem_free( sceneList );
// 2932         }
// 2933       }
// 2934 
// 2935       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2936       break;
// 2937 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2938 
// 2939     default:
// 2940       stat = ZFailure;
// 2941     break;
// 2942   }
// 2943 
// 2944   return ( stat );
// 2945 }
// 2946 
// 2947 /*********************************************************************
// 2948  * @fn      zclGeneral_ProcessInScenesClient
// 2949  *
// 2950  * @brief   Process in the received Scenes Command.
// 2951  *
// 2952  * @param   pInMsg - pointer to the incoming message
// 2953  *
// 2954  * @return  ZStatus_t
// 2955  */
// 2956 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
// 2957                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2958 {
// 2959   zclGeneral_Scene_t scene;
// 2960   uint8 *pData = pInMsg->pData;
// 2961   uint8 nameLen;
// 2962   zclSceneRsp_t rsp;
// 2963   uint8 i;
// 2964   ZStatus_t stat = ZSuccess;
// 2965 
// 2966   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2967   zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
// 2968 
// 2969   // Get the status field first
// 2970   rsp.status = *pData++;
// 2971 
// 2972   if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
// 2973   {
// 2974     rsp.capacity = *pData++;
// 2975   }
// 2976 
// 2977   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2978   pData += 2;   // Move past group ID
// 2979 
// 2980   switch ( pInMsg->hdr.commandID )
// 2981   {
// 2982     case COMMAND_SCENE_VIEW_RSP:
// 2983       // Parse the rest of the incoming message
// 2984       scene.ID = *pData++; // Not applicable to Remove All Response command
// 2985       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2986       pData += 2;
// 2987       nameLen = *pData++; // Name length
// 2988       if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2989         nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2990 
// 2991       scene.name[0] = nameLen;
// 2992       zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2993 
// 2994       pData += nameLen; // move past name, use original length
// 2995 
// 2996       //*** Do something with the extension field(s)
// 2997 
// 2998       // Fall through to callback - break is left off intentionally
// 2999 
// 3000     case COMMAND_SCENE_ADD_RSP:
// 3001     case COMMAND_SCENE_REMOVE_RSP:
// 3002     case COMMAND_SCENE_REMOVE_ALL_RSP:
// 3003     case COMMAND_SCENE_STORE_RSP:
// 3004       if ( pCBs->pfnSceneRsp )
// 3005       {
// 3006         if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
// 3007         {
// 3008           scene.ID = *pData++;
// 3009         }
// 3010         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3011         rsp.cmdID = pInMsg->hdr.commandID;
// 3012         rsp.scene = &scene;
// 3013 
// 3014         pCBs->pfnSceneRsp( &rsp );
// 3015       }
// 3016       break;
// 3017 
// 3018     case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
// 3019       {
// 3020         uint8 *sceneList = NULL;
// 3021 
// 3022         if ( rsp.status == ZCL_STATUS_SUCCESS )
// 3023         {
// 3024           uint8 sceneCnt = *pData++;
// 3025 
// 3026           if ( sceneCnt > 0 )
// 3027           {
// 3028             // Allocate space for the scene list
// 3029             sceneList = zcl_mem_alloc( sceneCnt );
// 3030             if ( sceneList != NULL )
// 3031             {
// 3032               rsp.sceneCnt = sceneCnt;
// 3033               for ( i = 0; i < sceneCnt; i++ )
// 3034                 sceneList[i] = *pData++;
// 3035             }
// 3036           }
// 3037         }
// 3038 
// 3039         if ( pCBs->pfnSceneRsp )
// 3040         {
// 3041           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3042           rsp.cmdID = pInMsg->hdr.commandID;
// 3043           rsp.sceneList = sceneList;
// 3044           rsp.scene = &scene;
// 3045 
// 3046           pCBs->pfnSceneRsp( &rsp);
// 3047         }
// 3048 
// 3049         if ( sceneList != NULL )
// 3050         {
// 3051           zcl_mem_free( sceneList );
// 3052         }
// 3053       }
// 3054       break;
// 3055 
// 3056     default:
// 3057       stat = ZFailure;
// 3058       break;
// 3059   }
// 3060 
// 3061   return ( stat );
// 3062 }
// 3063 #endif // ZCL_SCENES
// 3064 
// 3065 #ifdef ZCL_ON_OFF
// 3066 /*********************************************************************
// 3067  * @fn      zclGeneral_ProcessInCmdOnOff
// 3068  *
// 3069  * @brief   Process in the received On/Off Command.
// 3070  *
// 3071  * @param   pInMsg - pointer to the incoming message
// 3072  *
// 3073  * @return  ZStatus_t
// 3074  */
// 3075 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
// 3076                                             zclGeneral_AppCallbacks_t *pCBs )
// 3077 {
// 3078   ZStatus_t stat = ZSuccess;
// 3079 
// 3080   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3081   {
// 3082     switch ( pInMsg->hdr.commandID )
// 3083     {
// 3084       case COMMAND_OFF:
// 3085       case COMMAND_ON:
// 3086       case COMMAND_TOGGLE:
// 3087         if ( pCBs->pfnOnOff )
// 3088         {
// 3089           pCBs->pfnOnOff( pInMsg->hdr.commandID );
// 3090         }
// 3091         break;
// 3092 
// 3093 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 3094       case COMMAND_OFF_WITH_EFFECT:
// 3095         if ( pCBs->pfnOnOff_OffWithEffect )
// 3096         {
// 3097           zclOffWithEffect_t cmd;
// 3098 
// 3099           cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3100           cmd.effectId = pInMsg->pData[0];
// 3101           cmd.effectVariant = pInMsg->pData[1];
// 3102 
// 3103           pCBs->pfnOnOff_OffWithEffect( &cmd );
// 3104         }
// 3105         break;
// 3106 
// 3107       case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
// 3108         if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
// 3109         {
// 3110           pCBs->pfnOnOff_OnWithRecallGlobalScene();
// 3111         }
// 3112         break;
// 3113 
// 3114       case COMMAND_ON_WITH_TIMED_OFF:
// 3115         if ( pCBs->pfnOnOff_OnWithTimedOff )
// 3116         {
// 3117           zclOnWithTimedOff_t cmd;
// 3118 
// 3119           cmd.onOffCtrl.byte = pInMsg->pData[0];
// 3120           cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3121           cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 3122           pCBs->pfnOnOff_OnWithTimedOff( &cmd );
// 3123         }
// 3124         break;
// 3125 #endif // ZCL_LIGHT_LINK_ENHANCE
// 3126 
// 3127       default:
// 3128         stat = ZFailure;
// 3129         break;
// 3130     }
// 3131   }
// 3132   // no Client command
// 3133 
// 3134   return ( stat );
// 3135 }
// 3136 #endif // ZCL_ON_OFF
// 3137 
// 3138 #ifdef ZCL_LEVEL_CTRL
// 3139 /*********************************************************************
// 3140  * @fn      zclGeneral_ProcessInLevelControl
// 3141  *
// 3142  * @brief   Process in the received Level Control Command.
// 3143  *
// 3144  * @param   pInMsg - pointer to the incoming message
// 3145  *
// 3146  * @return  ZStatus_t
// 3147  */
// 3148 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
// 3149                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3150 {
// 3151   uint8 withOnOff = FALSE;
// 3152   ZStatus_t stat = ZSuccess;
// 3153 
// 3154   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3155   {
// 3156     switch ( pInMsg->hdr.commandID )
// 3157     {
// 3158       case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
// 3159         withOnOff = TRUE;
// 3160         // fall through
// 3161       case COMMAND_LEVEL_MOVE_TO_LEVEL:
// 3162         if ( pCBs->pfnLevelControlMoveToLevel )
// 3163         {
// 3164           zclLCMoveToLevel_t cmd;
// 3165 
// 3166           cmd.level = pInMsg->pData[0];
// 3167 
// 3168           if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
// 3169                ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
// 3170           {
// 3171             cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3172             cmd.withOnOff = withOnOff;
// 3173 
// 3174             pCBs->pfnLevelControlMoveToLevel( &cmd );
// 3175           }
// 3176           else
// 3177           {
// 3178             // level range requested is invalid
// 3179             stat = ZCL_STATUS_INVALID_VALUE;
// 3180           }
// 3181         }
// 3182         break;
// 3183 
// 3184       case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
// 3185         withOnOff = TRUE;
// 3186         // fall through
// 3187       case COMMAND_LEVEL_MOVE:
// 3188         if ( pCBs->pfnLevelControlMove )
// 3189         {
// 3190           zclLCMove_t cmd;
// 3191 
// 3192           cmd.moveMode = pInMsg->pData[0];
// 3193           cmd.rate = pInMsg->pData[1];
// 3194           cmd.withOnOff = withOnOff;
// 3195 
// 3196           pCBs->pfnLevelControlMove( &cmd );
// 3197         }
// 3198         break;
// 3199 
// 3200       case COMMAND_LEVEL_STEP_WITH_ON_OFF:
// 3201         withOnOff = TRUE;
// 3202         // fall through
// 3203       case COMMAND_LEVEL_STEP:
// 3204         if ( pCBs->pfnLevelControlStep )
// 3205         {
// 3206           zclLCStep_t cmd;
// 3207 
// 3208           cmd.stepMode = pInMsg->pData[0];
// 3209           cmd.amount =  pInMsg->pData[1];
// 3210           cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 3211           cmd.withOnOff = withOnOff;
// 3212 
// 3213           pCBs->pfnLevelControlStep( &cmd );
// 3214         }
// 3215         break;
// 3216 
// 3217       case COMMAND_LEVEL_STOP:
// 3218       case COMMAND_LEVEL_STOP_WITH_ON_OFF:
// 3219         // Both Stop commands are identical
// 3220         if ( pCBs->pfnLevelControlStop )
// 3221         {
// 3222           pCBs->pfnLevelControlStop();
// 3223         }
// 3224         break;
// 3225 
// 3226       default:
// 3227         stat = ZFailure;
// 3228         break;
// 3229     }
// 3230   }
// 3231   // no Client command
// 3232 
// 3233   return ( stat );
// 3234 }
// 3235 #endif // ZCL_LEVEL_CTRL
// 3236 
// 3237 #ifdef ZCL_ALARMS
// 3238 /*********************************************************************
// 3239  * @fn      zclGeneral_AddAlarm
// 3240  *
// 3241  * @brief   Add an alarm for a cluster
// 3242  *
// 3243  * @param   endpoint -
// 3244  * @param   alarm - new alarm item
// 3245  *
// 3246  * @return  ZStatus_t
// 3247  */
// 3248 ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
// 3249 {
// 3250   zclGenAlarmItem_t *pNewItem;
// 3251   zclGenAlarmItem_t *pLoop;
// 3252 
// 3253   // Fill in the new profile list
// 3254   pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
// 3255   if ( pNewItem == NULL )
// 3256     return ( ZMemError );
// 3257 
// 3258   // Fill in the plugin record.
// 3259   pNewItem->next = (zclGenAlarmItem_t *)NULL;
// 3260   pNewItem->endpoint =  endpoint;
// 3261   zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
// 3262 
// 3263   // Find spot in list
// 3264   if (  zclGenAlarmTable == NULL )
// 3265   {
// 3266     zclGenAlarmTable = pNewItem;
// 3267   }
// 3268   else
// 3269   {
// 3270     // Look for end of list
// 3271     pLoop = zclGenAlarmTable;
// 3272     while ( pLoop->next != NULL )
// 3273       pLoop = pLoop->next;
// 3274 
// 3275     // Put new item at end of list
// 3276     pLoop->next = pNewItem;
// 3277   }
// 3278 
// 3279   return ( ZSuccess );
// 3280 }
// 3281 
// 3282 /*********************************************************************
// 3283  * @fn      zclGeneral_FindAlarm
// 3284  *
// 3285  * @brief   Find an alarm with alarmCode and clusterID
// 3286  *
// 3287  * @param   endpoint -
// 3288  * @param   groupID - what group the scene belongs to
// 3289  * @param   sceneID - ID to look for scene
// 3290  *
// 3291  * @return  a pointer to the alarm information, NULL if not found
// 3292  */
// 3293 zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3294 {
// 3295   zclGenAlarmItem_t *pLoop;
// 3296 
// 3297   // Look for the alarm
// 3298   pLoop = zclGenAlarmTable;
// 3299   while ( pLoop )
// 3300   {
// 3301     if ( pLoop->endpoint == endpoint &&
// 3302          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3303     {
// 3304       return ( &(pLoop->alarm) );
// 3305     }
// 3306     pLoop = pLoop->next;
// 3307   }
// 3308 
// 3309   return ( (zclGeneral_Alarm_t *)NULL );
// 3310 }
// 3311 
// 3312 /*********************************************************************
// 3313  * @fn      zclGeneral_FindEarliestAlarm
// 3314  *
// 3315  * @brief   Find an alarm with the earliest timestamp
// 3316  *
// 3317  * @param   endpoint -
// 3318  *
// 3319  * @return  a pointer to the alarm information, NULL if not found
// 3320  */
// 3321 zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
// 3322 {
// 3323   zclGenAlarmItem_t *pLoop;
// 3324   zclGenAlarmItem_t earliestAlarm;
// 3325   zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
// 3326 
// 3327   pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
// 3328 
// 3329   // Look for alarm with earliest time
// 3330   pLoop = zclGenAlarmTable;
// 3331   while ( pLoop )
// 3332   {
// 3333     if ( pLoop->endpoint == endpoint &&
// 3334          pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
// 3335     {
// 3336       pEarliestAlarm = pLoop;
// 3337     }
// 3338     pLoop = pLoop->next;
// 3339   }
// 3340 
// 3341   if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
// 3342     return ( &(pEarliestAlarm->alarm) );
// 3343 
// 3344   // No alarm
// 3345   return ( (zclGeneral_Alarm_t *)NULL );
// 3346 }
// 3347 
// 3348 /*********************************************************************
// 3349  * @fn      zclGeneral_ResetAlarm
// 3350  *
// 3351  * @brief   Remove an alarm with alarmCode and clusterID
// 3352  *
// 3353  * @param   endpoint -
// 3354  * @param   alarmCode -
// 3355  * @param   clusterID -
// 3356  *
// 3357  * @return  TRUE if removed, FALSE if not found
// 3358  */
// 3359 void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3360 {
// 3361   zclGenAlarmItem_t *pLoop;
// 3362   zclGenAlarmItem_t *pPrev;
// 3363 
// 3364   // Look for end of list
// 3365   pLoop = zclGenAlarmTable;
// 3366   pPrev = NULL;
// 3367   while ( pLoop )
// 3368   {
// 3369     if ( pLoop->endpoint == endpoint &&
// 3370          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3371     {
// 3372       if ( pPrev == NULL )
// 3373         zclGenAlarmTable = pLoop->next;
// 3374       else
// 3375         pPrev->next = pLoop->next;
// 3376 
// 3377       // Free the memory
// 3378       zcl_mem_free( pLoop );
// 3379 
// 3380       // Notify the Application so that if the alarm condition still active then
// 3381       // a new notification will be generated, and a new alarm record will be
// 3382       // added to the alarm log
// 3383       // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
// 3384       return;
// 3385     }
// 3386     pPrev = pLoop;
// 3387     pLoop = pLoop->next;
// 3388   }
// 3389 }
// 3390 
// 3391 /*********************************************************************
// 3392  * @fn      zclGeneral_ResetAllAlarms
// 3393  *
// 3394  * @brief   Remove all alarms with endpoint
// 3395  *
// 3396  * @param   endpoint -
// 3397  * @param   notifyApp -
// 3398  *
// 3399  * @return  none
// 3400  */
// 3401 void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
// 3402 {
// 3403   zclGenAlarmItem_t *pLoop;
// 3404   zclGenAlarmItem_t *pPrev;
// 3405   zclGenAlarmItem_t *pNext;
// 3406 
// 3407   // Look for end of list
// 3408   pLoop = zclGenAlarmTable;
// 3409   pPrev = NULL;
// 3410   while ( pLoop )
// 3411   {
// 3412     if (  pLoop->endpoint == endpoint )
// 3413     {
// 3414       if ( pPrev == NULL )
// 3415         zclGenAlarmTable = pLoop->next;
// 3416       else
// 3417         pPrev->next = pLoop->next;
// 3418 
// 3419       pNext = pLoop->next;
// 3420 
// 3421       // Free the memory
// 3422       zcl_mem_free( pLoop );
// 3423 
// 3424       pLoop = pNext;
// 3425     }
// 3426     else
// 3427     {
// 3428       pPrev = pLoop;
// 3429       pLoop = pLoop->next;
// 3430     }
// 3431   }
// 3432 
// 3433   if ( notifyApp )
// 3434   {
// 3435     // Notify the Application so that if any alarm conditions still active then
// 3436     // a new notification will be generated, and a new alarm record will be
// 3437     // added to the alarm log
// 3438     // zclGeneral_NotifyResetAll(); // callback function?
// 3439   }
// 3440 }
// 3441 
// 3442 /*********************************************************************
// 3443  * @fn      zclGeneral_ProcessInAlarmsServer
// 3444  *
// 3445  * @brief   Process in the received Alarms Command.
// 3446  *
// 3447  * @param   pInMsg - pointer to the incoming message
// 3448  *
// 3449  * @return  ZStatus_t
// 3450  */
// 3451 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
// 3452                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3453 {
// 3454   zclAlarm_t alarm;
// 3455   zclGeneral_Alarm_t *pAlarm;
// 3456   uint8 *pData = pInMsg->pData;
// 3457   ZStatus_t stat = ZSuccess;
// 3458 
// 3459   switch ( pInMsg->hdr.commandID )
// 3460   {
// 3461     case COMMAND_ALARMS_RESET:
// 3462       if ( pCBs->pfnAlarm )
// 3463       {
// 3464         alarm.cmdID = pInMsg->hdr.commandID;
// 3465         alarm.alarmCode = pData[0];
// 3466         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3467 
// 3468         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3469       }
// 3470       else
// 3471       {
// 3472         stat = ZCL_STATUS_FAILURE;
// 3473       }
// 3474       break;
// 3475 
// 3476     case COMMAND_ALARMS_RESET_ALL:
// 3477       if ( pCBs->pfnAlarm )
// 3478       {
// 3479         alarm.cmdID = pInMsg->hdr.commandID;
// 3480 
// 3481         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3482       }
// 3483       else
// 3484       {
// 3485         stat = ZCL_STATUS_FAILURE;
// 3486       }
// 3487       break;
// 3488 
// 3489     case COMMAND_ALARMS_GET:
// 3490       if ( pCBs->pfnAlarm )
// 3491       {
// 3492         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3493         alarm.cmdID = pInMsg->hdr.commandID;
// 3494 
// 3495         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3496 
// 3497         pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
// 3498         if ( pAlarm )
// 3499         {
// 3500           // Send a response back
// 3501           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3502                                            ZCL_STATUS_SUCCESS, pAlarm->code,
// 3503                                            pAlarm->clusterID, pAlarm->timeStamp,
// 3504                                            true, pInMsg->hdr.transSeqNum );
// 3505           // Remove the entry from the Alarm table
// 3506           zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
// 3507         }
// 3508         else
// 3509         {
// 3510           // Send a response back
// 3511           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3512                                            ZCL_STATUS_NOT_FOUND, 0, 0, 0,
// 3513                                            true, pInMsg->hdr.transSeqNum );
// 3514         }
// 3515         stat = ZCL_STATUS_CMD_HAS_RSP;
// 3516       }
// 3517       else
// 3518       {
// 3519         stat = ZCL_STATUS_FAILURE;
// 3520       }
// 3521       break;
// 3522 
// 3523     case COMMAND_ALARMS_RESET_LOG:
// 3524       if ( pCBs->pfnAlarm )
// 3525       {
// 3526         alarm.cmdID = pInMsg->hdr.commandID;
// 3527 
// 3528         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3529 
// 3530         zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
// 3531       }
// 3532       else
// 3533       {
// 3534         stat = ZCL_STATUS_FAILURE;
// 3535       }
// 3536       break;
// 3537 
// 3538 #ifdef SE_UK_EXT
// 3539     case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
// 3540       if ( pCBs->pfnPublishEventLog )
// 3541       {
// 3542         zclPublishEventLog_t eventLog;
// 3543 
// 3544         eventLog.logID = *pData++;
// 3545         eventLog.cmdIndex = *pData++;
// 3546         eventLog.totalCmds = *pData++;
// 3547 
// 3548         // First try to find out number of Sub Log Payloads
// 3549         eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
// 3550         if ( eventLog.numSubLogs > 0 )
// 3551         {
// 3552           // Try to alloc space for Log Payload
// 3553           eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
// 3554                                                                    eventLog.numSubLogs );
// 3555           if ( eventLog.pLogs != NULL )
// 3556           {
// 3557             // Copy Log Payload
// 3558             for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
// 3559             {
// 3560               eventLog.pLogs[i].eventId = *pData++;
// 3561               eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
// 3562               pData += 4;
// 3563             }
// 3564           }
// 3565           else
// 3566           {
// 3567             stat = ZCL_STATUS_SOFTWARE_FAILURE;
// 3568           }
// 3569         }
// 3570         else
// 3571         {
// 3572           eventLog.pLogs = NULL;
// 3573         }
// 3574 
// 3575         if ( stat == ZSuccess )
// 3576         {
// 3577           pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
// 3578         }
// 3579 
// 3580         if ( eventLog.pLogs != NULL )
// 3581         {
// 3582           zcl_mem_free( eventLog.pLogs );
// 3583         }
// 3584       }
// 3585       break;
// 3586 #endif // SE_UK_EXT
// 3587 
// 3588     default:
// 3589       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3590       break;
// 3591   }
// 3592 
// 3593   return ( stat );
// 3594 }
// 3595 
// 3596 /*********************************************************************
// 3597  * @fn      zclGeneral_ProcessInAlarmsClient
// 3598  *
// 3599  * @brief   Process in the received Alarms Command.
// 3600  *
// 3601  * @param   pInMsg - pointer to the incoming message
// 3602  *
// 3603  * @return  ZStatus_t
// 3604  */
// 3605 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
// 3606                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3607 {
// 3608   uint8 *pData = pInMsg->pData;
// 3609   zclAlarm_t alarm;
// 3610   ZStatus_t stat = ZSuccess;
// 3611 
// 3612   zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
// 3613 
// 3614   switch ( pInMsg->hdr.commandID )
// 3615   {
// 3616     case COMMAND_ALARMS_ALARM:
// 3617       if ( pCBs->pfnAlarm )
// 3618       {
// 3619         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3620         alarm.cmdID = pInMsg->hdr.commandID;
// 3621         alarm.alarmCode = pData[0];
// 3622         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3623 
// 3624         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3625       }
// 3626       else
// 3627       {
// 3628         stat = ZCL_STATUS_FAILURE;
// 3629       }
// 3630       break;
// 3631 
// 3632     case COMMAND_ALARMS_GET_RSP:
// 3633       if ( pCBs->pfnAlarm )
// 3634       {
// 3635         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3636         alarm.cmdID = pInMsg->hdr.commandID;
// 3637         alarm.alarmCode = *pData++;
// 3638         alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
// 3639 
// 3640         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3641       }
// 3642       else
// 3643       {
// 3644         stat = ZCL_STATUS_FAILURE;
// 3645       }
// 3646       break;
// 3647 
// 3648 #ifdef SE_UK_EXT
// 3649     case COMMAND_ALARMS_GET_EVENT_LOG:
// 3650       if ( pCBs->pfnGetEventLog )
// 3651       {
// 3652         zclGetEventLog_t eventLog;
// 3653 
// 3654         eventLog.logID = *pData++;
// 3655         eventLog.startTime = zcl_build_uint32( pData, 4 );
// 3656         pData += 4;
// 3657         eventLog.endTime = zcl_build_uint32( pData, 4 );
// 3658         pData += 4;
// 3659         eventLog.numEvents = *pData;
// 3660 
// 3661         pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 3662                               &eventLog, pInMsg->hdr.transSeqNum );
// 3663       }
// 3664       break;
// 3665 #endif // SE_UK_EXT
// 3666 
// 3667     default:
// 3668       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3669       break;
// 3670   }
// 3671 
// 3672   return ( stat );
// 3673 }
// 3674 #endif // ZCL_ALARMS
// 3675 
// 3676 #ifdef ZCL_LOCATION
// 3677 /*********************************************************************
// 3678  * @fn      zclGeneral_ProcessInLocationServer
// 3679  *
// 3680  * @brief   Process in the received Location Command.
// 3681  *
// 3682  * @param   pInMsg - pointer to the incoming message
// 3683  *
// 3684  * @return  ZStatus_t
// 3685  */
// 3686 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
// 3687                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3688 {
// 3689   uint8 *pData = pInMsg->pData;
// 3690   zclLocation_t cmd;
// 3691   ZStatus_t stat = ZSuccess;
// 3692 
// 3693   zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
// 3694 
// 3695   switch ( pInMsg->hdr.commandID )
// 3696   {
// 3697     case COMMAND_LOCATION_SET_ABSOLUTE:
// 3698       cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3699       pData += 2;
// 3700       cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3701       pData += 2;
// 3702       cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3703       pData += 2;
// 3704       cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3705       pData += 2;
// 3706       cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3707 
// 3708       if ( pCBs->pfnLocation )
// 3709       {
// 3710         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3711         cmd.cmdID = pInMsg->hdr.commandID;
// 3712 
// 3713         // Update the absolute location info
// 3714         pCBs->pfnLocation( &cmd );
// 3715       }
// 3716       break;
// 3717 
// 3718     case COMMAND_LOCATION_SET_DEV_CFG:
// 3719       cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
// 3720       pData += 2;
// 3721       cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3722       pData += 2;
// 3723       cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3724       pData += 2;
// 3725       cmd.un.devCfg.numMeasurements = *pData++;
// 3726       cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3727 
// 3728       if ( pCBs->pfnLocation )
// 3729       {
// 3730         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3731         cmd.cmdID = pInMsg->hdr.commandID;
// 3732 
// 3733         // Update the device configuration info
// 3734         pCBs->pfnLocation( &cmd );
// 3735       }
// 3736       break;
// 3737 
// 3738     case COMMAND_LOCATION_GET_DEV_CFG:
// 3739       cmd.un.ieeeAddr = pData;
// 3740 
// 3741       if ( pCBs->pfnLocation )
// 3742       {
// 3743         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3744         cmd.cmdID = pInMsg->hdr.commandID;
// 3745         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3746 
// 3747         // Retreive the Device Configuration
// 3748         pCBs->pfnLocation( &cmd );
// 3749       }
// 3750       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3751       break;
// 3752 
// 3753     case COMMAND_LOCATION_GET_DATA:
// 3754       cmd.un.loc.bitmap.locByte = *pData++;
// 3755       cmd.un.loc.numResponses = *pData++;
// 3756 
// 3757       if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
// 3758         zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
// 3759 
// 3760       if ( pCBs->pfnLocation )
// 3761       {
// 3762         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3763         cmd.cmdID = pInMsg->hdr.commandID;
// 3764         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3765 
// 3766         // Retreive the Location Data
// 3767         pCBs->pfnLocation( &cmd );
// 3768       }
// 3769       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3770       break;
// 3771 
// 3772     default:
// 3773       stat = ZFailure;
// 3774       break;
// 3775   }
// 3776 
// 3777   return ( stat );
// 3778 }
// 3779 
// 3780 /*********************************************************************
// 3781  * @fn      zclGeneral_ProcessInLocationDataRsp
// 3782  *
// 3783  * @brief   Process in the received Location Command.
// 3784  *
// 3785  * @param   pInMsg - pointer to the incoming message
// 3786  *
// 3787  * @return  ZStatus_t
// 3788  */
// 3789 static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
// 3790                                                  zclGeneral_AppCallbacks_t *pCBs )
// 3791 {
// 3792   uint8 *pData = pInMsg->pData;
// 3793   zclLocationRsp_t rsp;
// 3794 
// 3795   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3796 
// 3797   if ( pCBs->pfnLocationRsp )
// 3798   {
// 3799     if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
// 3800       rsp.un.loc.status = *pData++;
// 3801 
// 3802     if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
// 3803          rsp.un.loc.status == ZCL_STATUS_SUCCESS )
// 3804     {
// 3805       rsp.un.loc.data.type = *pData++;
// 3806       rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3807       pData += 2;
// 3808       rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3809       pData += 2;
// 3810 
// 3811       if ( locationType2D( rsp.un.loc.data.type ) == 0 )
// 3812       {
// 3813         rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3814         pData += 2;
// 3815       }
// 3816 
// 3817       if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3818       {
// 3819         rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3820         pData += 2;
// 3821         rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3822         pData += 2;
// 3823       }
// 3824 
// 3825       if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
// 3826       {
// 3827         if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3828           rsp.un.loc.data.calcLoc.locationMethod = *pData++;
// 3829 
// 3830         rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
// 3831         rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
// 3832       }
// 3833     }
// 3834 
// 3835     rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3836     rsp.cmdID = pInMsg->hdr.commandID;
// 3837 
// 3838     // Notify the Application
// 3839     pCBs->pfnLocationRsp( &rsp );
// 3840   }
// 3841 }
// 3842 
// 3843 /*********************************************************************
// 3844  * @fn      zclGeneral_ProcessInLocationClient
// 3845  *
// 3846  * @brief   Process in the received Location Command.
// 3847  *
// 3848  * @param   pInMsg - pointer to the incoming message
// 3849  *
// 3850  * @return  ZStatus_t
// 3851  */
// 3852 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
// 3853                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3854 {
// 3855   uint8 *pData = pInMsg->pData;
// 3856   zclLocationRsp_t rsp;
// 3857   ZStatus_t stat = ZSuccess;
// 3858 
// 3859   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3860 
// 3861   switch ( pInMsg->hdr.commandID )
// 3862   {
// 3863     case COMMAND_LOCATION_DEV_CFG_RSP:
// 3864       if ( pCBs->pfnLocationRsp )
// 3865       {
// 3866         rsp.un.devCfg.status = *pData++;
// 3867         if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
// 3868         {
// 3869           rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
// 3870           pData += 2;
// 3871           rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3872           pData += 2;
// 3873           rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3874           pData += 2;
// 3875           rsp.un.devCfg.data.numMeasurements = *pData++;
// 3876           rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3877 
// 3878           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3879           rsp.cmdID = pInMsg->hdr.commandID;
// 3880 
// 3881           // Notify the Application
// 3882           pCBs->pfnLocationRsp( &rsp );
// 3883         }
// 3884       }
// 3885       break;
// 3886 
// 3887     case COMMAND_LOCATION_DATA_RSP:
// 3888     case COMMAND_LOCATION_DATA_NOTIF:
// 3889     case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
// 3890       zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
// 3891       break;
// 3892 
// 3893     case COMMAND_LOCATION_RSSI_PING:
// 3894       if ( pCBs->pfnLocationRsp )
// 3895       {
// 3896         rsp.un.locationType = *pData;
// 3897 
// 3898         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3899         rsp.cmdID = pInMsg->hdr.commandID;
// 3900 
// 3901         // Notify the Application
// 3902         pCBs->pfnLocationRsp( &rsp );
// 3903       }
// 3904       break;
// 3905 
// 3906     default:
// 3907       stat = ZFailure;
// 3908       break;
// 3909   }
// 3910 
// 3911   return ( stat );
// 3912 }
// 3913 #endif // ZCL_LOCATION
// 3914 
// 3915 #ifdef ZCL_SCENES
// 3916 #if !defined ( ZCL_STANDALONE )
// 3917 /*********************************************************************
// 3918  * @fn      zclGeneral_ScenesInitNV
// 3919  *
// 3920  * @brief   Initialize the NV Scene Table Items
// 3921  *
// 3922  * @param   none
// 3923  *
// 3924  * @return  number of scenes
// 3925  */
// 3926 static uint8 zclGeneral_ScenesInitNV( void )
// 3927 {
// 3928   uint8  status;
// 3929   uint16 size;
// 3930 
// 3931   size = (uint16)((sizeof ( nvGenScenesHdr_t ))
// 3932                   + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
// 3933 
// 3934   status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
// 3935 
// 3936   if ( status != ZSUCCESS )
// 3937   {
// 3938     zclGeneral_ScenesSetDefaultNV();
// 3939   }
// 3940 
// 3941   return status;
// 3942 }
// 3943 #endif // ZCL_STANDALONE
// 3944 
// 3945 #if !defined ( ZCL_STANDALONE )
// 3946 /*********************************************************************
// 3947  * @fn          zclGeneral_ScenesSetDefaultNV
// 3948  *
// 3949  * @brief       Write the defaults to NV
// 3950  *
// 3951  * @param       none
// 3952  *
// 3953  * @return      none
// 3954  */
// 3955 static void zclGeneral_ScenesSetDefaultNV( void )
// 3956 {
// 3957   nvGenScenesHdr_t hdr;
// 3958 
// 3959   // Initialize the header
// 3960   hdr.numRecs = 0;
// 3961 
// 3962   // Save off the header
// 3963   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3964 }
// 3965 #endif // ZCL_STANDALONE
// 3966 
// 3967 #if !defined ( ZCL_STANDALONE )
// 3968 /*********************************************************************
// 3969  * @fn          zclGeneral_ScenesWriteNV
// 3970  *
// 3971  * @brief       Save the Scene Table in NV
// 3972  *
// 3973  * @param       none
// 3974  *
// 3975  * @return      none
// 3976  */
// 3977 static void zclGeneral_ScenesWriteNV( void )
// 3978 {
// 3979   nvGenScenesHdr_t hdr;
// 3980   zclGenSceneItem_t *pLoop;
// 3981   zclGenSceneNVItem_t item;
// 3982 
// 3983   hdr.numRecs = 0;
// 3984 
// 3985   // Look for end of list
// 3986   pLoop = zclGenSceneTable;
// 3987   while ( pLoop )
// 3988   {
// 3989     // Build the record
// 3990     item.endpoint = pLoop->endpoint;
// 3991     zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
// 3992 
// 3993     // Save the record to NV
// 3994     zcl_nv_write( ZCD_NV_SCENE_TABLE,
// 3995             (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
// 3996                     sizeof ( zclGenSceneNVItem_t ), &item );
// 3997 
// 3998     hdr.numRecs++;
// 3999 
// 4000     pLoop = pLoop->next;
// 4001   }
// 4002 
// 4003   // Save off the header
// 4004   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 4005 }
// 4006 #endif // ZCL_STANDALONE
// 4007 
// 4008 #if !defined ( ZCL_STANDALONE )
// 4009 /*********************************************************************
// 4010  * @fn          zclGeneral_ScenesRestoreFromNV
// 4011  *
// 4012  * @brief       Restore the Scene table from NV
// 4013  *
// 4014  * @param       none
// 4015  *
// 4016  * @return      Number of entries restored
// 4017  */
// 4018 static uint16 zclGeneral_ScenesRestoreFromNV( void )
// 4019 {
// 4020   uint16 x;
// 4021   nvGenScenesHdr_t hdr;
// 4022 
// 4023   zclGenSceneNVItem_t item;
// 4024   uint16 numAdded = 0;
// 4025 
// 4026   if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
// 4027   {
// 4028     // Read in the device list
// 4029     for ( x = 0; x < hdr.numRecs; x++ )
// 4030     {
// 4031       if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
// 4032                 (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
// 4033                                   sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
// 4034       {
// 4035         // Add the scene
// 4036         if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
// 4037         {
// 4038           numAdded++;
// 4039         }
// 4040       }
// 4041     }
// 4042   }
// 4043 
// 4044   return ( numAdded );
// 4045 }
// 4046 #endif // ZCL_STANDALONE
// 4047 
// 4048 #if !defined ( ZCL_STANDALONE )
// 4049 /*********************************************************************
// 4050  * @fn          zclGeneral_ScenesInit
// 4051  *
// 4052  * @brief       Initialize the scenes table
// 4053  *
// 4054  * @param       none
// 4055  *
// 4056  * @return      none
// 4057  */
// 4058 void zclGeneral_ScenesInit( void )
// 4059 {
// 4060   // Initialize NV items
// 4061   zclGeneral_ScenesInitNV();
// 4062 
// 4063   // Restore the Scene table
// 4064   zclGeneral_ScenesRestoreFromNV();
// 4065 }
// 4066 #endif // ZCL_STANDALONE
// 4067 
// 4068 #if !defined ( ZCL_STANDALONE )
// 4069 /*********************************************************************
// 4070  * @fn          zclGeneral_ScenesSave
// 4071  *
// 4072  * @brief       Save the scenes table
// 4073  *
// 4074  * @param       none
// 4075  *
// 4076  * @return      none
// 4077  */
// 4078 void zclGeneral_ScenesSave( void )
// 4079 {
// 4080   // Update NV
// 4081   zclGeneral_ScenesWriteNV();
// 4082 }
// 4083 #endif // ZCL_STANDALONE
// 4084 
// 4085 #endif // ZCL_SCENES
// 4086 
// 4087 /***************************************************************************
// 4088 ****************************************************************************/
// 
// 229 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   3 bytes in segment XDATA_Z
// 
// 241 bytes of CODE  memory
//   3 bytes of XDATA memory
//
//Errors: none
//Warnings: none

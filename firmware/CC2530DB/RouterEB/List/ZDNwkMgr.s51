///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            27/Oct/2015  21:12:28 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zdo\ZDNwkMgr.c               /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zdo\ZDNwkMgr.c -D SECURE=0   /
//                          -D OSC32K_CRYSTAL_INSTALLED=FALSE -D              /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ZDNwkMgr.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDNwkMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZDNwkMgr_BuildAndSendUpdateNotify?relay,0203H
        FUNCTION ??ZDNwkMgr_CheckForChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_EDScanConfirmCB?relay
        FUNCTION ??ZDNwkMgr_EDScanConfirmCB?relay,0203H
        PUBLIC ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessDataConfirm?relay
        FUNCTION ??ZDNwkMgr_ProcessDataConfirm?relay,0203H
        FUNCTION ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessServerDiscRsp?relay
        FUNCTION ??ZDNwkMgr_ProcessServerDiscRsp?relay,0203H
        PUBLIC ??ZDNwkMgr_ReportChannelInterference?relay
        FUNCTION ??ZDNwkMgr_ReportChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_SetNwkManagerAddr?relay
        FUNCTION ??ZDNwkMgr_SetNwkManagerAddr?relay,0203H
        PUBLIC ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,0203H
        FUNCTION ZDNwkMgr_BuildAndSendUpdateNotify,0a1203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION ZDNwkMgr_CheckForChannelInterference,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDNwkMgr_EDScanConfirmCB
        FUNCTION ZDNwkMgr_EDScanConfirmCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        PUBLIC ZDNwkMgr_MgmtNwkUpdateReq
        PUBLIC ZDNwkMgr_NewChannel
        PUBLIC ZDNwkMgr_NumUpdateNotifySent
        PUBLIC ZDNwkMgr_ProcessDataConfirm
        FUNCTION ZDNwkMgr_ProcessDataConfirm,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDNwkMgr_ProcessMgmtNwkUpdateReq,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDNwkMgr_ProcessServerDiscRsp
        FUNCTION ZDNwkMgr_ProcessServerDiscRsp,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDNwkMgr_ReportChannelInterference
        FUNCTION ZDNwkMgr_ReportChannelInterference,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDNwkMgr_SetNwkManagerAddr
        FUNCTION ZDNwkMgr_SetNwkManagerAddr,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDNwkMgr_TaskID
        PUBLIC ZDNwkMgr_TotalTransmissions
        PUBLIC ZDNwkMgr_TxFailures
        PUBLIC ZDNwkMgr_UpdateNotifyTimer
        PUBLIC ZDNwkMgr_WaitingForNotifyConfirm
        PUBLIC ZDNwkMgr_event_loop
        FUNCTION ZDNwkMgr_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_32
        PUBWEAK __Constant_7fff800
        PUBWEAK __Constant_ea60
        PUBLIC pZDNwkMgr_EDScanConfirmCB
        PUBLIC pZDNwkMgr_NetworkReportCB
        PUBLIC pZDNwkMgr_NetworkUpdateCB
        PUBLIC pZDNwkMgr_ProcessDataConfirm
        PUBLIC pZDNwkMgr_ReportChannelInterference
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
NLME_EDScanRequest  SYMBOL "NLME_EDScanRequest"
??NLME_EDScanRequest?relay SYMBOL "?relay", NLME_EDScanRequest
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
??NLME_SetUpdateID?relay SYMBOL "?relay", NLME_SetUpdateID
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDO_ParseMgmtNwkUpdateReq SYMBOL "ZDO_ParseMgmtNwkUpdateReq"
??ZDO_ParseMgmtNwkUpdateReq?relay SYMBOL "?relay", ZDO_ParseMgmtNwkUpdateReq
ZDO_ParseServerDiscRsp SYMBOL "ZDO_ParseServerDiscRsp"
??ZDO_ParseServerDiscRsp?relay SYMBOL "?relay", ZDO_ParseServerDiscRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
??ZDP_MgmtNwkUpdateNotify?relay SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
ZMacSetReq          SYMBOL "ZMacSetReq"
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
nwkTransmissionFailures SYMBOL "nwkTransmissionFailures"
??nwkTransmissionFailures?relay SYMBOL "?relay", nwkTransmissionFailures
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ZDNwkMgr_EDScanConfirmCB SYMBOL "ZDNwkMgr_EDScanConfirmCB"
??ZDNwkMgr_EDScanConfirmCB?relay SYMBOL "?relay", ZDNwkMgr_EDScanConfirmCB
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
ZDNwkMgr_ProcessDataConfirm SYMBOL "ZDNwkMgr_ProcessDataConfirm"
??ZDNwkMgr_ProcessDataConfirm?relay SYMBOL "?relay", ZDNwkMgr_ProcessDataConfirm
ZDNwkMgr_ProcessServerDiscRsp SYMBOL "ZDNwkMgr_ProcessServerDiscRsp"
??ZDNwkMgr_ProcessServerDiscRsp?relay SYMBOL "?relay", ZDNwkMgr_ProcessServerDiscRsp
ZDNwkMgr_ReportChannelInterference SYMBOL "ZDNwkMgr_ReportChannelInterference"
??ZDNwkMgr_ReportChannelInterference?relay SYMBOL "?relay", ZDNwkMgr_ReportChannelInterference
ZDNwkMgr_SetNwkManagerAddr SYMBOL "ZDNwkMgr_SetNwkManagerAddr"
??ZDNwkMgr_SetNwkManagerAddr?relay SYMBOL "?relay", ZDNwkMgr_SetNwkManagerAddr
ZDNwkMgr_event_loop SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", ZDNwkMgr_event_loop

        EXTERN ??NLME_EDScanRequest?relay
        FUNCTION ??NLME_EDScanRequest?relay,00H
        EXTERN ??NLME_SetUpdateID?relay
        FUNCTION ??NLME_SetUpdateID?relay,00H
        EXTERN ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,00H
        EXTERN ??ZDO_ParseMgmtNwkUpdateReq?relay
        FUNCTION ??ZDO_ParseMgmtNwkUpdateReq?relay,00H
        EXTERN ??ZDO_ParseServerDiscRsp?relay
        FUNCTION ??ZDO_ParseServerDiscRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_MgmtNwkUpdateNotify?relay
        FUNCTION ??ZDP_MgmtNwkUpdateNotify?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??nwkTransmissionFailures?relay
        FUNCTION ??nwkTransmissionFailures?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN NLME_EDScanRequest
        FUNCTION NLME_EDScanRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtNwkUpdateReq
        FUNCTION ZDO_ParseMgmtNwkUpdateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseServerDiscRsp
        FUNCTION ZDO_ParseServerDiscRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN nwkTransmissionFailures
        FUNCTION nwkTransmissionFailures,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zdo\ZDNwkMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDNwkMgr.c
//    3   Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
//    4   Revision:       $Revision: 15716 $
//    5 
//    6   Description:    The ZigBee Network Manager.
//    7 
//    8 
//    9   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "nwk_util.h"
//   50 #include "ZDApp.h"
//   51 #include "ZDObject.h"
//   52 #include "ZGlobals.h"
//   53 #include "ZDNwkMgr.h"
//   54 
//   55 /******************************************************************************
//   56  * CONSTANTS
//   57  */
//   58 
//   59 #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
//   60   
//   61 /******************************************************************************
//   62  * TYPEDEFS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * GLOBAL VARIABLES
//   67  */
//   68   
//   69 // Task ID for internal task/event processing. This variable will be
//   70 // received when ZDNwkMgr_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   71 uint8 ZDNwkMgr_TaskID = 0;
ZDNwkMgr_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   72 
//   73 /******************************************************************************
//   74  * LOCAL VARIABLES
//   75  */
//   76 
//   77 // Frequency Agility variables

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   79 zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   80 uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
ZDNwkMgr_UpdateNotifyTimer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
ZDNwkMgr_NumUpdateNotifySent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
ZDNwkMgr_WaitingForNotifyConfirm:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   83 uint16 ZDNwkMgr_TotalTransmissions;
ZDNwkMgr_TotalTransmissions:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   84 uint16 ZDNwkMgr_TxFailures;
ZDNwkMgr_TxFailures:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   85 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
ZDNwkMgr_MgmtNwkUpdateReq:
        DS 9
        REQUIRE __INIT_XDATA_Z
//   87   
//   88 #if defined ( NWK_MANAGER )
//   89 uint16 ZDNwkMgr_UpdateRequestTimer = 0;
//   90 uint8  ZDNwkMgr_LastChannelEnergy = 0;
//   91 uint16 ZDNwkMgr_LastChannelFailureRate = 0;
//   92 #endif // NWK_MANAGER
//   93 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 ZDNwkMgr_NewChannel;
ZDNwkMgr_NewChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   95 
//   96 // PAN ID Conflict variables
//   97 #if defined ( NWK_MANAGER )
//   98 uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
//   99 #endif // NWK_MANAGER
//  100 
//  101 /*********************************************************************
//  102  * GLOBAL FUNCTIONS
//  103  */
//  104 // Freguency Agility functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
pZDNwkMgr_ReportChannelInterference:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
pZDNwkMgr_ProcessDataConfirm:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  107 void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
pZDNwkMgr_EDScanConfirmCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 // PAN ID Conflict functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  110 void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
pZDNwkMgr_NetworkReportCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  111 void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
pZDNwkMgr_NetworkUpdateCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  112 
//  113 /******************************************************************************
//  114  * LOCAL FUNCTIONS
//  115  */
//  116 
//  117 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
//  118 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
//  119 
//  120 // Frequency Agility functions
//  121 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  122 
//  123 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
//  124 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
//  125 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  126 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  127 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
//  128                                                uint16 totalTransmissions, uint16 txFailures,
//  129                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
//  130 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
//  131 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
//  132 void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
//  133 
//  134 #if defined ( NWK_MANAGER )
//  135 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
//  136 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
//  137 #endif // NWK_MANAGER
//  138 
//  139 // PAN ID Conflict functions
//  140 #if defined ( NWK_MANAGER )
//  141 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
//  142 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
//  143 
//  144 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
//  145 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
//  146 #endif // NWK_MANAGER
//  147 
//  148 /*********************************************************************
//  149  * @fn      ZDNwkMgr_Init
//  150  *
//  151  * @brief   Initialization function for the Network Manager Task.
//  152  *          This is called during initialization and should contain
//  153  *          any application specific initialization (ie. hardware
//  154  *          initialization/setup, table initialization, power up
//  155  *          notificaiton ... ).
//  156  *
//  157  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  158  *                    used to send messages and set timers.
//  159  *
//  160  * @return  none
//  161  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  162 void ZDNwkMgr_Init( byte task_id )
ZDNwkMgr_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDNwkMgr_Init
        CODE
//  163 {
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  164   // Save the task ID
//  165   ZDNwkMgr_TaskID = task_id;
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    @DPTR,A
//  166 
//  167   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x15
        MOV     R3,#-0x80
        LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
//  168 
//  169   // Frequecy Agility initialization
//  170   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x38
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
//  171 #if defined ( NWK_MANAGER )
//  172   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
//  173 #endif // NWK_MANAGER
//  174 
//  175   pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
        MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
        MOV     A,#??ZDNwkMgr_EDScanConfirmCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  176   pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        MOV     A,#??ZDNwkMgr_ProcessDataConfirm?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  177   pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
        MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
        MOV     A,#??ZDNwkMgr_ReportChannelInterference?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  178   
//  179   // PAN ID Conflict initialization
//  180 #if defined ( NWK_MANAGER )
//  181   pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
//  182   pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
//  183 #endif // NWK_MANAGER
//  184   
//  185   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  186   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock0
//  187 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  188 
//  189 /*********************************************************************
//  190  * @fn      ZDNwkMgr_event_loop
//  191  *
//  192  * @brief   Main event loop for the Network Manager task. This function
//  193  *          is called to process all events for the task.  Events
//  194  *          include timers, messages and any other user defined events.
//  195  *
//  196  * @param   task_id  - The OSAL assigned task ID.
//  197  * @param   events - events to process.  This is a bit map and can
//  198  *                   contain more than one event.
//  199  *
//  200  * @return  none
//  201  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  202 UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
ZDNwkMgr_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
        CODE
//  203 {
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_CheckForChannelInterference
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  204   osal_event_hdr_t *msgPtr;
//  205   (void)task_id;  // Intentionally unreferenced parameter
//  206 
//  207   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_0 & 0xFFFF
//  208   {
//  209     msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??ZDNwkMgr_event_loop_1
??ZDNwkMgr_event_loop_2:
        ; Setup parameters for call to function nwkTransmissionFailures
//  210     while ( msgPtr )
//  211     {
//  212       switch ( msgPtr->event )
//  213       {
//  214         case ZDO_CB_MSG:
//  215           // ZDO sends the message that we registered for
//  216           ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
//  217           break;
//  218          
//  219         case NM_CHANNEL_INTERFERE:
//  220           // NWK layer sends the message when it detectes Channel Interference
//  221           ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
//  222           break;
//  223    
//  224         case NM_ED_SCAN_CONFIRM:
//  225           // NWK layer sends the message when it receives an ED scan confirmation
//  226           ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
        MOV     R1,#0x0
        LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
        MOV     ?V2,R2
        MOV     ?V3,R3
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPTR,#_NIB + 107
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_event_loop_3
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  227           break;
//  228 #if defined ( NWK_MANAGER )
//  229         case ZDO_NETWORK_REPORT:
//  230           // NWK layer sends this message when it receives a Network Report message
//  231           ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
//  232           break;
//  233        
//  234         case ZDO_NETWORK_UPDATE:
//  235           // NKW layer sends this message when it receives a Network Update message
//  236           ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
//  237           break;
//  238 #endif // NWK_MANAGER         
//  239         default:
//  240           break;
//  241       }
//  242 
//  243       // Release the memory
//  244       osal_msg_deallocate( (uint8 *)msgPtr );
??ZDNwkMgr_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
//  245 
//  246       // Next
//  247       msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??ZDNwkMgr_event_loop_1:
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#-0x31
        JZ      ??ZDNwkMgr_event_loop_5
        DEC     A
        JZ      ??ZDNwkMgr_event_loop_6
        ADD     A,#0x5f
        JNZ     ??ZDNwkMgr_event_loop_3
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDNwkMgr_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32789
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_3
        CODE
??ZDNwkMgr_event_loop_8:
        ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay; Banked call to: ZDNwkMgr_ProcessServerDiscRsp
        SJMP    ??ZDNwkMgr_event_loop_3
??ZDNwkMgr_event_loop_7:
        ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay; Banked call to: ZDNwkMgr_ProcessMgmtNwkUpdateReq
        SJMP    ??ZDNwkMgr_event_loop_3
??ZDNwkMgr_event_loop_5:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDNwkMgr_event_loop_3
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#_NIB + 42
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#__Constant_7fff800
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
        MOV     A,R1
        JNZ     ??ZDNwkMgr_event_loop_3
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOV     A,#-0x1
??ZDNwkMgr_event_loop_9:
        MOVX    @DPTR,A
        LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
??ZDNwkMgr_event_loop_6:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??ZDNwkMgr_event_loop_2 & 0xFFFF
        ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay; Banked call to: ZDNwkMgr_CheckForChannelInterference
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        CLR     A
        SJMP    ??ZDNwkMgr_event_loop_9
//  248     }
//  249     
//  250     // Return unprocessed events
//  251     return (events ^ SYS_EVENT_MSG);
??ZDNwkMgr_event_loop_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??ZDNwkMgr_event_loop_10 & 0xFFFF
//  252   }
//  253 
//  254   if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
??ZDNwkMgr_event_loop_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_event_loop_11
//  255   {       
//  256     // Switch channel
//  257     _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 22
        MOVX    @DPTR,A
//  258     ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#ZDNwkMgr_NewChannel & 0xff
        MOV     R3,#(ZDNwkMgr_NewChannel >> 8) & 0xff
        MOV     R1,#-0x1f
        LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
//  259  
//  260     // Our Channel has been changed -- notify to save info into NV
//  261     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
//  262     
//  263     // Reset the total transmit count and the transmit failure counters
//  264     _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 107
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  265     nwkTransmissionFailures( TRUE );
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x1
        LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
//  266     
//  267     return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??ZDNwkMgr_event_loop_12
//  268   }
//  269 
//  270   if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
??ZDNwkMgr_event_loop_11:
        ANL     A,#0x2
        JZ      ??ZDNwkMgr_event_loop_13
//  271   {
//  272     // Update the Update Notify timer
//  273     if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDNwkMgr_event_loop_14
//  274     {
//  275       ZDNwkMgr_UpdateNotifyTimer--;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  276       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_ea60
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??ZDNwkMgr_event_loop_15
//  277     }
//  278     else
//  279     {
//  280       ZDNwkMgr_NumUpdateNotifySent = 0;
??ZDNwkMgr_event_loop_14:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        CLR     A
        MOVX    @DPTR,A
//  281     }
//  282     
//  283     return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
??ZDNwkMgr_event_loop_15:
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??ZDNwkMgr_event_loop_12
//  284   }
//  285   
//  286 #if defined ( NWK_MANAGER )
//  287   if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
//  288   {
//  289     // Update the Update Request timer
//  290     if ( ZDNwkMgr_UpdateRequestTimer > 0 )
//  291     {
//  292       ZDNwkMgr_UpdateRequestTimer--;
//  293       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  294     }
//  295     
//  296     return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
//  297   }
//  298 #endif // NWK_MANAGER
//  299   
//  300   if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
??ZDNwkMgr_event_loop_13:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDNwkMgr_event_loop_16
//  301   {  
//  302     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_event_loop_17
//  303     {
//  304       if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
//  305                                 ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 4
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
        MOV     A,R1
        JNZ     ??ZDNwkMgr_event_loop_17
//  306       {
//  307         ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  308       }
//  309     }
//  310       
//  311     return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
??ZDNwkMgr_event_loop_17:
        MOV     A,R6
        XRL     A,#0x8
??ZDNwkMgr_event_loop_12:
        MOV     R2,A
        MOV     A,R7
??ZDNwkMgr_event_loop_10:
        MOV     R3,A
        SJMP    ??ZDNwkMgr_event_loop_18
//  312   }
//  313   
//  314   // Discard or make more handlers
//  315   return 0;
??ZDNwkMgr_event_loop_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock2
??ZDNwkMgr_event_loop_18:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  316 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  317 
//  318 /*********************************************************************
//  319  * @fn      ZDNwkMgr_ProcessMsgCBs
//  320  *
//  321  * @brief   Process the incoming messages.
//  322  *
//  323  * @param   msgPtr - message to process
//  324  *
//  325  * @return  TRUE if message to be freed. FALSE otherwise.
//  326  */
//  327 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
//  328 {
//  329   switch ( inMsg->clusterID )
//  330   {   
//  331     case Mgmt_NWK_Update_req:
//  332       ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
//  333       break;    
//  334 #if defined ( NWK_MANAGER )  
//  335     case Mgmt_NWK_Update_notify:
//  336       ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
//  337       break;
//  338 #endif // NWK_MANAGER
//  339     case Server_Discovery_rsp:
//  340       ZDNwkMgr_ProcessServerDiscRsp( inMsg );
//  341       break;
//  342       
//  343     default:
//  344       // Unknown message
//  345       break;
//  346   }
//  347 }
//  348 
//  349 /*********************************************************************
//  350  * Frequency Agility Routines
//  351  */
//  352 #if defined ( NWK_MANAGER )
//  353 /*********************************************************************
//  354  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
//  355  *
//  356  * @brief       This function processes the incoming Management
//  357  *              Network Update notify.
//  358  *
//  359  * @param       pUpdateNotify - notify message
//  360  *
//  361  * @return      TRUE if message to be freed. FALSE otherwise.
//  362  */
//  363 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
//  364 {
//  365   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  366   {
//  367     ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
//  368     if ( pNotify )
//  369     {
//  370       ZDNwkMgr_CheckForChannelChange( pNotify );
//  371 
//  372       osal_mem_free( pNotify );
//  373     }
//  374   }
//  375 }
//  376 
//  377 /*********************************************************************
//  378  * @fn          ZDNwkMgr_CheckForChannelChange
//  379  *
//  380  * @brief       This function processes the incoming Management Network
//  381  *              Update notify and starts an Update Request if a channel
//  382  *              change is needed.
//  383  *
//  384  * @param       pUpdateNotify - notify message
//  385  *
//  386  * @return      none
//  387  */
//  388 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
//  389 {
//  390   uint8  i;
//  391   uint16 failureRate;
//  392   uint8  lowestEnergyIndex;
//  393   uint8  lowestEnergyValue = 0xFF;
//  394       
//  395   // If any device has more than 50% transmission failures, a channel
//  396   // change should be considered
//  397   failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
//  398   if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
//  399   {
//  400 #if defined ( LCD_SUPPORTED )
//  401     HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
//  402     HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
//  403 #endif
//  404     return;
//  405   }
//  406 
//  407   // If the current failure rate is higher than the last failure rate,
//  408   // a channel change should be considered
//  409   if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
//  410   {
//  411 #if defined ( LCD_SUPPORTED )
//  412     HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
//  413     HalLcdWriteStringValueValue( ": ", failureRate, 10, 
//  414                                  ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
//  415 #endif
//  416     return;
//  417   }
//  418   
//  419   // Select a single channel based on the Mgmt_NWK_Update_notify based on
//  420   // the lowest energy. This is the proposed new channel. 
//  421   for ( i = 0; i < pNotify->listCount; i++ )
//  422   {
//  423     if ( pNotify->energyValues[i] < lowestEnergyValue )
//  424     {
//  425       lowestEnergyIndex = i;
//  426       lowestEnergyValue = pNotify->energyValues[i];
//  427     }
//  428   }
//  429       
//  430   // If this new channel does not have an energy level below an acceptable
//  431   // threshold, a channel change should not be done.
//  432   if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
//  433   {
//  434 #if defined ( LCD_SUPPORTED )
//  435     HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
//  436     HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
//  437                                  ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
//  438 #endif
//  439     return;
//  440   }
//  441 
//  442   // Channel change should be done -- find out the new active channel
//  443   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
//  444   {
//  445     if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
//  446     {
//  447       if ( lowestEnergyIndex == 0 )
//  448         break;
//  449       lowestEnergyIndex--;
//  450     }
//  451   }
//  452   
//  453   if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
//  454   {
//  455     uint32 channelMask;
//  456     zAddrType_t dstAddr;
//  457     
//  458     // The new channel
//  459     ZDNwkMgr_NewChannel = i;
//  460         
//  461     // Prior to changing channels, the network manager should store the 
//  462     // energy scan value as the last energy scan value and the failure 
//  463     // rate from the existing channel as the last failure rate.  These 
//  464     // values are useful to allow comparison of the failure rate and energy
//  465     // level on the previous channel to evaluate if the network is causing
//  466     // its own interference.
//  467     ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
//  468     ZDNwkMgr_LastChannelFailureRate = failureRate;
//  469        
//  470     // The network manager should broadcast a Mgmt_NWK_Update_req notifying
//  471     // devices of the new channel.  The broadcast shall be to all routers 
//  472     // and coordinator.
//  473     dstAddr.addrMode = AddrBroadcast;
//  474     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  475     channelMask = (uint32)1 << i;
//  476         
//  477     // Increment the nwkUpdateId parameter and set the updateID in the beacon
//  478     NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
//  479     
//  480     ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
//  481         
//  482     // The network manager shall set a timer based on the value of 
//  483     // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
//  484     // channels and shall not issue another such command until this 
//  485     // timer expires.  
//  486     ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
//  487     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  488                   
//  489     // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  490     // the local network manager shall set a timer equal to the 
//  491     // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  492     // expiration of this timer.  NOTE: since we won't recevied our own
//  493     // broadcasted Update Request, we start the channel change timer here.  
//  494     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  495                         ZDNWKMGR_BCAST_DELIVERY_TIME );
//  496   }
//  497 }
//  498 #endif  // NWK_MANAGER
//  499 
//  500 /*********************************************************************
//  501  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
//  502  *
//  503  * @brief       This function processes the incoming Management
//  504  *              Network Update request and starts the request (if needed).
//  505  *
//  506  * @param       Request message
//  507  *
//  508  * @return      none
//  509  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  510 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessMgmtNwkUpdateReq:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
        CODE
//  511 {
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDO_ParseMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  512   ZDO_MgmtNwkUpdateReq_t Req;
//  513   
//  514   ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
        ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay; Banked call to: ZDO_ParseMgmtNwkUpdateReq
//  515    
//  516   if ( Req.scanDuration <= 0x05 )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     A,R1
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
//  517   {
//  518     // Request is to scan over channelMask. The result will be reported by Confirm   
//  519     if ( ( !inMsg->wasBroadcast )                     && 
//  520          ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
//  521          ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
        CLR     C
        SUBB    A,#0x6
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  522     {
//  523       if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  524       {
//  525         // Save off the information to be used for the notify
//  526         ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    @DPTR,A
//  527         ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine4 & 0xFFFF
//  528         
//  529         Req.scanCount--;
??CrossCallReturnLabel_15:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  530         
//  531         // Save off scan info for the subsequent scans
//  532         ZDNwkMgr_MgmtNwkUpdateReq = Req;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,#ZDNwkMgr_MgmtNwkUpdateReq & 0xff
        MOV     R5,#(ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  533       }
//  534     }
//  535   }
//  536   else if ( Req.scanDuration == 0xFE )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
        MOV     A,#-0x2
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
//  537   {
//  538     // Request is to change Channel. The command provide a new active
//  539     // channel as a single channel in the channelMask.
//  540     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  541     {
//  542       uint8 i;
//  543       
//  544       // Set update ID in the Beacon
//  545       NLME_SetUpdateID(Req.nwkUpdateId); 
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay; Banked call to: NLME_SetUpdateID
//  546       
//  547       // Find out the new active channel
//  548       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
//  549       {
//  550         if ( ( (uint32)1 << i ) & Req.channelMask )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,R1
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
//  551         {
//  552           break;
//  553         }
//  554       }
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
//  555 
//  556       if ( _NIB.nwkLogicalChannel != i )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  557       {
//  558         ZDNwkMgr_NewChannel = i;
        MOV     A,R1
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    @DPTR,A
//  559           
//  560         // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  561         // the local network manager shall set a timer equal to the 
//  562         // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  563         // expiration of this timer.  Each node shall also increment the 
//  564         // nwkUpdateId parameter and also reset the total transmit count 
//  565         // and the transmit failure counters.  
//  566         osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  567                             ZDNWKMGR_BCAST_DELIVERY_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#_NIB + 7
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     ?V0,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        MOV     ?V1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  568       }
//  569     }
//  570   }
//  571   else if ( Req.scanDuration == 0xFF )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
//  572   {
//  573     // Request is to change apsChannelMask and nwkManagerAddr
//  574     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  575     {
//  576       NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay; Banked call to: NLME_SetUpdateID
//  577        
//  578       if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#_NIB + 36
        MOV     R0,#?V0
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
//  579       {
//  580         _NIB.channelList = Req.channelMask;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#_NIB + 36
        LCALL   ?XSTORE_R0123
//  581       
//  582         // Our Channel List has been changed -- notify to save info into NV
//  583         ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
//  584       }
//  585     
//  586       ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay; Banked call to: ZDNwkMgr_SetNwkManagerAddr
        SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  587     }
//  588   }
//  589   else // 0x06-0xFD
//  590   {
//  591     // Request is invalid
//  592     if ( !inMsg->wasBroadcast )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  593     {
//  594       ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine4 & 0xFFFF
//  595       ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
//  596                                ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        CLR     A
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#__Constant_0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R5,#0x0
        MOV     R4,#-0x80
        MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
        MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay; Banked call to: ZDP_MgmtNwkUpdateNotify
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  597     }
//  598   }
//  599 }
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#_NIB + 109
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  600 
//  601 /*********************************************************************
//  602  * @fn      ZDNwkMgr_ProcessServerDiscRsp
//  603  *
//  604  * @brief   Process the incoming System Server Discovery Response
//  605  *
//  606  * @param   pRsp - Structure containing Server Discovery response
//  607  *
//  608  * @return  none
//  609  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  610 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessServerDiscRsp:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessServerDiscRsp
        CODE
//  611 {
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDO_ParseServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  612   ZDO_ServerDiscRsp_t Rsp;
//  613   
//  614   ZDO_ParseServerDiscRsp( inMsg, &Rsp );
        ; Setup parameters for call to function ZDO_ParseServerDiscRsp
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   ??ZDO_ParseServerDiscRsp?relay; Banked call to: ZDO_ParseServerDiscRsp
//  615   
//  616   if ( Rsp.status == ZSuccess )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessServerDiscRsp_0
//  617   {
//  618     // Is the Network Manager bit set in the response?
//  619     if ( Rsp.serverMask & NETWORK_MANAGER )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x40
        JZ      ??ZDNwkMgr_ProcessServerDiscRsp_0
//  620     {
//  621       // Set the Remote Device's NWK Address as the Network Manager Address
//  622       ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay; Banked call to: ZDNwkMgr_SetNwkManagerAddr
//  623     }
//  624   }
//  625 }
??ZDNwkMgr_ProcessServerDiscRsp_0:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock12
//  626 
//  627 /*********************************************************************
//  628  * @fn          ZDNwkMgr_ProcessChannelInterference
//  629  *
//  630  * @brief       This function processes the incoming Channel Interference
//  631  *              detection message and sends out a notify (if needed).
//  632  *
//  633  * @param       pChannelInterference - interference message
//  634  *
//  635  * @return      none
//  636  */
//  637 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
//  638 {
//  639   // To avoid a device with communication problems from constantly 
//  640   // sending reports to the network manager, the device should not 
//  641   // send a Mgmt_NWK_Update_notify more than 4 times per hour.
//  642   if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
//  643   {
//  644     // Conduct an energy scan on all channels.
//  645     if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
//  646     {
//  647       // Save the counters for the Update Notify message to be sent
//  648       ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
//  649       ZDNwkMgr_TxFailures = pChanInterference->txFailures;
//  650 
//  651       // Mark scan as channel inetrference check
//  652       ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
//  653     }
//  654   }
//  655 }
//  656 
//  657 /*********************************************************************
//  658  * @fn          ZDNwkMgr_ProcessEDScanConfirm
//  659  *
//  660  * @brief       This function processes the incoming ED Scan Confirm
//  661  *              message and sends out a notify (if needed).
//  662  *
//  663  * @param       pEDScanConfirm - SD Scan Confirmation message
//  664  *
//  665  * @return      none
//  666  */
//  667 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
//  668 { 
//  669   if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
//  670   {
//  671     // Confirm to scan all channels for channel interference check
//  672     ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
//  673     
//  674     ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
//  675   }
//  676   else
//  677   {
//  678     // Confirm to the requested scan
//  679     uint16 txFailures = nwkTransmissionFailures( FALSE );
//  680     
//  681     ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
//  682                                        &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  683                                        _NIB.nwkTotalTransmissions, txFailures, 
//  684                                        pEDScanConfirm, AF_TX_OPTIONS_NONE );
//  685     // More scans needed?
//  686     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
//  687     {
//  688       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
//  689     }
//  690   }
//  691 }
//  692 
//  693 /*********************************************************************
//  694  * @fn          ZDNwkMgr_CheckForChannelInterference
//  695  *
//  696  * @brief       This function processes the incoming ED Scan Confirm
//  697  *              message and sends out an Update Notify (if needed).
//  698  *
//  699  * @param       pEDScanConfirm - SD Scan Confirmation message
//  700  *
//  701  * @return      none
//  702  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  703 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
ZDNwkMgr_CheckForChannelInterference:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
        CODE
//  704 {
        FUNCALL ZDNwkMgr_CheckForChannelInterference, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
//  705   uint8 i;
//  706   uint8 channelEnergy = 0;
        MOV     R5,#0x0
//  707   uint8 energyIncreased = FALSE;
//  708     
//  709   // Get the current channel energy
//  710   if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x3
        CLR     A
        ADDC    A,?V5
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,R4
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_CheckForChannelInterference_0
//  711   {
//  712     channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
        MOV     A,?V4
        ADD     A,R4
        LCALL   ?Subroutine9 & 0xFFFF
//  713   }
??CrossCallReturnLabel_8:
        MOV     R5,A
//  714     
//  715   // If this energy scan does not indicate higher energy on the current 
//  716   // channel then other channels, no action is taken. The device should 
//  717   // continue to operate as normal and the message counters are not reset.
//  718   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
??ZDNwkMgr_CheckForChannelInterference_0:
        MOV     R1,#0x0
//  719   {
//  720     if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
//  721          ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
??ZDNwkMgr_CheckForChannelInterference_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,R1
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_CheckForChannelInterference_2
        MOV     A,?V4
        ADD     A,R1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        CLR     C
        SUBB    A,R5
        JNC     ??ZDNwkMgr_CheckForChannelInterference_2
//  722     {
//  723       energyIncreased = TRUE;
//  724       break;
//  725     }
//  726   }
//  727     
//  728   // If the energy scan does indicate increased energy on the channel
//  729   // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
//  730   // Manager to indicate interference is present.
//  731   if ( energyIncreased )
//  732   {
//  733     // Send a Management Network Update notify to the Network Manager
//  734     ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
        MOV     DPTR,#_NIB + 105
        LCALL   ??Subroutine11_0 & 0xFFFF
//  735     ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  736                                        ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
//  737                                        pEDScanConfirm, AF_MSG_ACK_REQUEST );
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V0,#0x10
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R1,#0x0
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  738     ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOV     A,#0x1
        MOVX    @DPTR,A
//  739       
//  740     if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_CheckForChannelInterference_3
//  741     {
//  742       // First notify message sent within this hour. Start the Update Notify timer.
//  743       ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOV     A,#0x3c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  744       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_ea60
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  745     }
//  746     
//  747     ZDNwkMgr_NumUpdateNotifySent++;
??ZDNwkMgr_CheckForChannelInterference_3:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  748   }
//  749 #if defined ( LCD_SUPPORTED )
//  750   else
//  751   {
//  752     HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
//  753     HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
//  754   }
//  755 #endif
//  756 }
??ZDNwkMgr_CheckForChannelInterference_4:
        LJMP    ?Subroutine1 & 0xFFFF
??ZDNwkMgr_CheckForChannelInterference_2:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JNC     ??ZDNwkMgr_CheckForChannelInterference_4
        LJMP    ??ZDNwkMgr_CheckForChannelInterference_1 & 0xFFFF
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
        MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ZDNwkMgr_event_loop
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDNwkMgr_event_loop
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_15
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_14
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_0
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_1
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function ZDNwkMgr_event_loop
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ZDNwkMgr_event_loop
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
//  757 
//  758 /*********************************************************************
//  759  * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
//  760  *
//  761  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
//  762  *              function sends a unicast message.
//  763  *
//  764  * @param       TransSeq - transaction sequence number
//  765  * @param       dstAddr - destination address of the message
//  766  * @param       pEDScanConfirm - update notify info
//  767  *
//  768  * @return      afStatus_t
//  769  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  770 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDNwkMgr_BuildAndSendUpdateNotify:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZDNwkMgr_BuildAndSendUpdateNotify
        CODE
//  771                                                uint16 totalTransmissions, uint16 txFailures,
//  772                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
//  773                                                uint8 txOptions )
//  774 {
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V9,R1
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  775   uint8 i;
//  776   uint8 listCount = 0;
        MOV     ?V8,#0x0
//  777   uint8 *energyValues = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//  778   
//  779   // Count number of energy detects
//  780   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     A,?V10
        ADD     A,#0x3
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V11
        MOV     ?V3,A
//  781   {
//  782     if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_0:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,R1
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     A,?V4
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_1
//  783       listCount++;
        INC     ?V8
//  784   }
??ZDNwkMgr_BuildAndSendUpdateNotify_1:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
//  785   
//  786   if ( listCount > 0 )
        MOV     A,?V8
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  787   {
//  788     energyValues = (uint8 *)osal_mem_alloc( listCount );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//  789     if ( energyValues )
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  790     {
//  791       uint8 j = 0;
        MOV     R2,#0x0
//  792 
//  793       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
//  794       {
//  795         if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_3:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,R1
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     A,?V4
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_4
//  796           energyValues[j++] = pEDScanConfirm->energyDetectList[i];
        MOV     A,?V10
        ADD     A,R1
        MOV     DPL,A
        CLR     A
        ADDC    A,?V11
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,R2
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
//  797       }
??ZDNwkMgr_BuildAndSendUpdateNotify_4:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
//  798     }
//  799   }
//  800     
//  801   // Send a Management Network Update notify back
//  802   ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
//  803                            pEDScanConfirm->scannedChannels,
//  804                            totalTransmissions, txFailures,
//  805                            listCount, energyValues, txOptions, false );
??ZDNwkMgr_BuildAndSendUpdateNotify_2:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R5,?V8
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R2,?V12
        MOV     R3,?V13
        MOV     R1,?V9
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay; Banked call to: ZDP_MgmtNwkUpdateNotify
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  806   if ( energyValues )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
//  807     osal_mem_free( energyValues );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
//  808 }
??ZDNwkMgr_BuildAndSendUpdateNotify_5:
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock47
//  809 
//  810 #if defined ( NWK_MANAGER )
//  811 /*********************************************************************
//  812  * @fn      NwkMgr_SetNwkManager
//  813  *
//  814  * @brief   Set the local device as the Network Manager
//  815  *
//  816  * @param   none
//  817  *
//  818  * @return  none
//  819  */
//  820 void NwkMgr_SetNwkManager( void )
//  821 {
//  822   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  823   {
//  824     // We're the Network Manager. Set our address as the Network Manager Address
//  825     ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
//  826     
//  827     // Set the Network Manager bit of the Server Mask
//  828     ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
//  829   }
//  830 }
//  831 #endif // NWK_MANAGER
//  832 
//  833 /*********************************************************************
//  834  * @fn      ZDApp_SetNwkManagerAddr()
//  835  *
//  836  * @brief   Sets the nwkManagerAddr in NIB.
//  837  *
//  838  * @param   nwkManagerAddr
//  839  *
//  840  * @return  none
//  841  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  842 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
ZDNwkMgr_SetNwkManagerAddr:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDNwkMgr_SetNwkManagerAddr
        CODE
//  843 {
        FUNCALL ZDNwkMgr_SetNwkManagerAddr, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  844   if ( _NIB.nwkManagerAddr != nwkManagerAddr )
        MOV     DPTR,#_NIB + 105
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDNwkMgr_SetNwkManagerAddr_0:
        JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
//  845   {
//  846     // Update the Network Manager Address
//  847     _NIB.nwkManagerAddr = nwkManagerAddr;
        MOV     DPTR,#_NIB + 105
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  848   
//  849     // Our Network Manger Address has been changed -- notify to save info into NV
//  850     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
          CFI EndBlock cfiBlock48
//  851   }
//  852 }
??ZDNwkMgr_SetNwkManagerAddr_1:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock49
//  853 
//  854 /*********************************************************************
//  855  * @fn          ZDNwkMgr_ReportChannelInterference
//  856  *
//  857  * @brief       This function builds a Channel Interference detection
//  858  *              message and then forwards it to the Network Manager.
//  859  *
//  860  * @param       chanInterference
//  861  *
//  862  * @return      none
//  863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  864 void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
ZDNwkMgr_ReportChannelInterference:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDNwkMgr_ReportChannelInterference
        CODE
//  865 {
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  866   ZDNwkMgr_ChanInterference_t *pChanInterference;
//  867 
//  868   // Send Channel Interference message to the Network Manager task
//  869   pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
//  870   if ( pChanInterference )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDNwkMgr_ReportChannelInterference_0
//  871   {
//  872     pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x31
        MOVX    @DPTR,A
//  873       
//  874     // Build the structure
//  875     pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??Subroutine12_0 & 0xFFFF
//  876     pChanInterference->txFailures = chanInterference->txFailures;
??CrossCallReturnLabel_12:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine12_0 & 0xFFFF
//  877               
//  878     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  879   }
//  880 }
??ZDNwkMgr_ReportChannelInterference_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function ZDNwkMgr_ReportChannelInterference
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
//  881 
//  882 /*********************************************************************
//  883  * @fn          ZDNwkMgr_EDScanConfirmCB
//  884  *
//  885  * @brief       Handle Energy Scan confirm callback
//  886  *
//  887  * @param       scannedChannels  - scanned channels
//  888  * @param       energyDetectList - measured energy for channels
//  889  *
//  890  * @return      none
//  891  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  892 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
ZDNwkMgr_EDScanConfirmCB:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZDNwkMgr_EDScanConfirmCB
        CODE
//  893 {
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//  894   ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
//  895 
//  896   // Send ED Confirm to the Network Manager task
//  897   pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//  898   if ( pEDScanConfirm )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDNwkMgr_EDScanConfirmCB_0
//  899   {
//  900     pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
//  901       
//  902     // Build the structure
//  903     pEDScanConfirm->status = EDScanConfirm->status;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  904     pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        LCALL   ?XLOAD_R0123
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R0123
//  905     osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x7
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  906       
//  907     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  908   }
//  909 }
??ZDNwkMgr_EDScanConfirmCB_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock54
//  910 
//  911 /*********************************************************************
//  912  * @fn      ZDNwkMgr_ProcessDataConfirm
//  913  *
//  914  * @brief   Process received Confirmation for Mgmt NWK Update Notify message
//  915  *
//  916  * @param   none
//  917  *
//  918  * @return  none
//  919  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  920 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
ZDNwkMgr_ProcessDataConfirm:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessDataConfirm
        CODE
//  921 {
        FUNCALL ZDNwkMgr_ProcessDataConfirm, nwkTransmissionFailures
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  922   if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
//  923        ( afDataConfirm->transID == 0 )     && 
//  924        ( afDataConfirm->hdr.status == ZSuccess ) )
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
//  925   {
//  926     // The Mgmt NWK Update Notify was sent as an APS Unicast with  
//  927     // acknowledgement and once the acknowledgment is received the 
//  928     // total transmit and transmit failure counters are reset to zero.  
//  929     _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 107
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  930     nwkTransmissionFailures( TRUE );
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x1
        LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
//  931     
//  932     ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        CLR     A
        MOVX    @DPTR,A
//  933   }
//  934 }
??ZDNwkMgr_ProcessDataConfirm_0:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock55

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_7fff800:
        DD 134215680

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ea60:
        DD 60000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_event_loop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessServerDiscRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_CheckForChannelInterference?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_CheckForChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_BuildAndSendUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_SetNwkManagerAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_SetNwkManagerAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ReportChannelInterference?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ReportChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_EDScanConfirmCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_EDScanConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessDataConfirm?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessDataConfirm

        END
//  935 
//  936 /*********************************************************************
//  937  * PAN ID Conflict Routines
//  938  */
//  939 #if defined ( NWK_MANAGER )
//  940 /*********************************************************************
//  941  * @fn          ZDNwkMgr_NetworkReportCB
//  942  *
//  943  * @brief       Handle the Network Report Command
//  944  *
//  945  * @param       srcAddr     - Source Address of the message.
//  946  * @param       status      - ZSuccess.
//  947  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  948  * @param       securityUse -
//  949  *
//  950  * @return      none
//  951  */
//  952 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
//  953 { 
//  954   // Send Network Report message to the Network Manager task
//  955   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
//  956 }
//  957 
//  958 /*********************************************************************
//  959  * @fn          ZDNwkMgr_NetworkUpdateCB
//  960  *
//  961  * @brief       Handle the Network Update Command
//  962  *
//  963  * @param       srcAddr     - Source Address of the message.
//  964  * @param       status      - ZSuccess.
//  965  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  966  * @param       securityUse -
//  967  *
//  968  * @return      none
//  969  */
//  970 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
//  971 {
//  972   // Send Network Update message to the Network Manager task
//  973   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
//  974 }
//  975 
//  976 /*********************************************************************
//  977  * @fn      ZDNwkMgr_ProcessNetworkReport
//  978  *
//  979  * @brief   Process the incoming Network Report message
//  980  *
//  981  * @param   pNetworkReport - Structure containing Network Report message
//  982  *
//  983  * @return  none
//  984  */
//  985 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
//  986 {
//  987   uint8 i;
//  988   uint16 newPID;
//  989   uint8 unique = TRUE;
//  990 
//  991   if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
//  992   {
//  993     if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
//  994     {
//  995       do
//  996       {
//  997         // select a new PAN ID
//  998         newPID = (uint16)osal_rand();
//  999       
// 1000         // Make sure that the chosen PAN ID is not already in use in the
// 1001         // local neighborhood and also not contained within the Report 
// 1002         // Information field of the Network Report Command frame
// 1003         for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
// 1004         {
// 1005           if ( pNetworkReport->panIDs[i] == newPID )
// 1006           {
// 1007             unique = FALSE;
// 1008             break;
// 1009           }
// 1010         }
// 1011       } while ( !unique );
// 1012          
// 1013       // Send out a Network Update command.
// 1014       NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
// 1015                               _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
// 1016     
// 1017       ZDNwkMgr_PanIdUpdateInProgress = TRUE;
// 1018     }
// 1019   }
// 1020 }
// 1021 
// 1022 /*********************************************************************
// 1023  * @fn      ZDNwkMgr_ProcessNetworkUpdate
// 1024  *
// 1025  * @brief   Process the incoming Network Update message
// 1026  *
// 1027  * @param   pNetworkReport - Structure containing Network Update message
// 1028  *
// 1029  * @return  none
// 1030  */
// 1031 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
// 1032 {
// 1033   if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
// 1034   { 
// 1035     // Our PAN ID has been changed -- notify to save info into NV
// 1036     ZDApp_NwkStateUpdateCB();
// 1037     
// 1038     ZDNwkMgr_PanIdUpdateInProgress = FALSE;
// 1039   }
// 1040 }
// 1041 #endif // NWK_MANAGER
// 1042 
// 1043 
// 1044 /*********************************************************************
// 1045 *********************************************************************/
// 
// 1 820 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    16 bytes in segment XDATA_ROM_C
//    39 bytes in segment XDATA_Z
// 
// 1 880 bytes of CODE  memory
//     0 bytes of CONST memory (+ 16 bytes shared)
//    39 bytes of XDATA memory
//
//Errors: none
//Warnings: none

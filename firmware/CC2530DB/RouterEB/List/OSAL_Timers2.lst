###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             14/Oct/2015  08:15:21 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\osal\common\OSAL_Timers2.c           #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\osal\common\OSAL_Timers2.c -D        #
#                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D      #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\OSAL_Timers2.lst         #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\OSAL_Timers2.r51          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\osal\common\OSAL_Timers2.c
      1          
      2          /**************************************************************************************************
      3          
      4           DESCRIPTION:
      5            --
      6          
      7           CREATED: 10/02/2015, by Paolo Achdjian
      8          
      9           FILE: OSAL_Timers2.c
     10          
     11          ***************************************************************************************************/
     12          
     13          
     14          /*********************************************************************
     15           * INCLUDES
     16           */
     17          
     18          #include "comdef.h"
     19          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     20          #include "OSAL.h"
     21          #include "OSAL_Timers.h"
     22          #include "hal_timer.h"
     23          
     24          /*********************************************************************
     25           * MACROS
     26           */
     27          
     28          /*********************************************************************
     29           * CONSTANTS
     30           */
     31          
     32          /*********************************************************************
     33           * TYPEDEFS
     34           */
     35          
     36          struct TimerRec {
     37            uint32 timeout;
     38            uint16 eventFlag;
     39            uint8  taskId;
     40            uint32 reloadTimeout;
     41          };
     42          
     43          /*********************************************************************
     44           * GLOBAL VARIABLES
     45           */
     46          
     47          #define MAXELEMENTS 10

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          static struct TimerRec timerRec[MAXELEMENTS];
   \                     timerRec:
   \   000000                DS 110
   \   00006E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     49          static struct TimerRec * end = timerRec+MAXELEMENTS;
   \                     end:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for end>`
   \   000002                REQUIRE __INIT_XDATA_I
     50          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          static 	halIntState_t intState;
   \                     intState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     52          
     53          /*********************************************************************
     54           * EXTERNAL VARIABLES
     55           */
     56          
     57          /*********************************************************************
     58           * EXTERNAL FUNCTIONS
     59           */
     60          
     61          /*********************************************************************
     62           * LOCAL VARIABLES
     63           */
     64          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     65          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     66          
     67          /*********************************************************************
     68           * LOCAL FUNCTION PROTOTYPES
     69           */
     70          static struct TimerRec * getFreeElement(void);
     71          static struct TimerRec * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
     72          static struct TimerRec * osalFindTimer( uint8 task_id, uint16 event_flag );
     73          
     74          /*********************************************************************
     75           * FUNCTIONS
     76           *********************************************************************/
     77          
     78          
     79          static struct TimerRec * getFreeElement(void) {
     80          	struct TimerRec * iter = timerRec;
     81          	
     82          	for(;iter != end; iter++){
     83          		if (iter->eventFlag == 0){
     84          			return iter;
     85          		}
     86          	}
     87          	return NULL;
     88          }
     89          
     90          /*********************************************************************
     91           * @fn      osalTimerInit
     92           *
     93           * @brief   Initialization for the OSAL Timer System.
     94           *
     95           * @param   none
     96           *
     97           * @return
     98           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void osalTimerInit( void ){
   \                     osalTimerInit:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    100            osal_systemClock = 0;
   \   000005   90....       MOV     DPTR,#osal_systemClock
   \   000008   12....       LCALL   ?Subroutine5 & 0xFFFF
    101            osal_memset(timerRec, 0, sizeof(struct TimerRec)*MAXELEMENTS);
   \                     ??CrossCallReturnLabel_7:
   \   00000B                ; Setup parameters for call to function osal_memset
   \   00000B   7C6E         MOV     R4,#0x6e
   \   00000D   FD           MOV     R5,A
   \   00000E   F9           MOV     R1,A
   \   00000F   7A..         MOV     R2,#timerRec & 0xff
   \   000011   7B..         MOV     R3,#(timerRec >> 8) & 0xff
   \   000013   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    102          }
   \   000016                REQUIRE ?Subroutine0
   \   000016                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    103          
    104          /*********************************************************************
    105           * @fn      osalAddTimer
    106           *
    107           * @brief   Add a timer to the timer list.
    108           *          Ints must be disabled.
    109           *
    110           * @param   task_id
    111           * @param   event_flag
    112           * @param   timeout
    113           *
    114           * @return  osalTimerRec_t * - pointer to newly created timer
    115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          struct TimerRec * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout ){
   \                     osalAddTimer:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    117           	// Look for an existing timer first
    118          	struct TimerRec * iter;
    119           	iter = osalFindTimer( task_id, event_flag );
   \   00000B                ; Setup parameters for call to function osalFindTimer
   \   00000B   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?L_MOV_X
    120           	if ( iter ) {
   \   000018   EA           MOV     A,R2
   \   000019   4B           ORL     A,R3
   \   00001A   600B         JZ      ??osalAddTimer_0
    121          		iter->timeout = timeout;
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?L_MOV_TO_X
    122          		return iter;
   \   000025   8068         SJMP    ??osalAddTimer_1
    123          	} else {
    124          		iter = getFreeElement();
   \                     ??osalAddTimer_0:
   \   000027   7A..         MOV     R2,#timerRec & 0xff
   \   000029   7B..         MOV     R3,#(timerRec >> 8) & 0xff
   \   00002B   8007         SJMP    ??osalAddTimer_2
   \                     ??osalAddTimer_3:
   \   00002D   EA           MOV     A,R2
   \   00002E   240B         ADD     A,#0xb
   \   000030   FA           MOV     R2,A
   \   000031   5001         JNC     ??osalAddTimer_2
   \   000033   0B           INC     R3
   \                     ??osalAddTimer_2:
   \   000034   90....       MOV     DPTR,#end
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   68           XRL     A,R0
   \   00003E   7002         JNZ     ??osalAddTimer_4
   \   000040   EB           MOV     A,R3
   \   000041   69           XRL     A,R1
   \                     ??osalAddTimer_4:
   \   000042   6047         JZ      ??osalAddTimer_5
   \   000044   EA           MOV     A,R2
   \   000045   2404         ADD     A,#0x4
   \   000047   F8           MOV     R0,A
   \   000048   E4           CLR     A
   \   000049   3B           ADDC    A,R3
   \   00004A   F9           MOV     R1,A
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FD           MOV     R5,A
   \   000054   EC           MOV     A,R4
   \   000055   4D           ORL     A,R5
   \   000056   70D5         JNZ     ??osalAddTimer_3
    125          		if ( iter ) {
   \   000058   EA           MOV     A,R2
   \   000059   4B           ORL     A,R3
   \   00005A   602F         JZ      ??osalAddTimer_5
    126          			iter->taskId = task_id;
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E5..         MOV     A,?V4
   \   000068   F0           MOVX    @DPTR,A
    127          			iter->eventFlag = event_flag;
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   EE           MOV     A,R6
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   EF           MOV     A,R7
   \   000071   F0           MOVX    @DPTR,A
    128          			iter->timeout = timeout;
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_MOV_TO_X
    129          			iter->reloadTimeout = 0;
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   12....       LCALL   ?Subroutine5 & 0xFFFF
    130          			return iter;
   \                     ??CrossCallReturnLabel_8:
   \   000089   8004         SJMP    ??osalAddTimer_1
    131          		} else {
    132          			return NULL;
   \                     ??osalAddTimer_5:
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   7B00         MOV     R3,#0x0
   \                     ??osalAddTimer_1:
   \   00008F   7F05         MOV     R7,#0x5
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    133          		}
    134          	}
    135          }
    136          
    137          /*********************************************************************
    138           * @fn      osalFindTimer
    139           *
    140           * @brief   Find a timer in a timer list.
    141           *          Ints must be disabled.
    142           *
    143           * @param   task_id
    144           * @param   event_flag
    145           *
    146           * @return  index of elements or -1 if not found
    147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          struct TimerRec *  osalFindTimer( uint8 task_id, uint16 event_flag ){
   \                     osalFindTimer:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    149          	struct TimerRec * iter;
    150          	iter = timerRec;	
   \   000005   7C..         MOV     R4,#timerRec & 0xff
   \   000007   7D..         MOV     R5,#(timerRec >> 8) & 0xff
   \   000009   8007         SJMP    ??osalFindTimer_0
    151          	for(;iter != end; iter++){
   \                     ??osalFindTimer_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   240B         ADD     A,#0xb
   \   00000E   FC           MOV     R4,A
   \   00000F   5001         JNC     ??osalFindTimer_0
   \   000011   0D           INC     R5
   \                     ??osalFindTimer_0:
   \   000012   90....       MOV     DPTR,#end
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
   \   00001A   EC           MOV     A,R4
   \   00001B   6E           XRL     A,R6
   \   00001C   7002         JNZ     ??osalFindTimer_2
   \   00001E   ED           MOV     A,R5
   \   00001F   6F           XRL     A,R7
   \                     ??osalFindTimer_2:
   \   000020   6025         JZ      ??osalFindTimer_3
    152          		if (iter->taskId == task_id && iter->eventFlag == event_flag){
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   69           XRL     A,R1
   \   00002E   70DB         JNZ     ??osalFindTimer_1
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6A           XRL     A,R2
   \   00003A   7003         JNZ     ??osalFindTimer_4
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6B           XRL     A,R3
   \                     ??osalFindTimer_4:
   \   00003F   70CA         JNZ     ??osalFindTimer_1
    153          			return iter;
   \   000041   EC           MOV     A,R4
   \   000042   FA           MOV     R2,A
   \   000043   ED           MOV     A,R5
   \   000044   FB           MOV     R3,A
   \   000045   8004         SJMP    ??osalFindTimer_5
    154          		}
    155          	}
    156          	return NULL;
   \                     ??osalFindTimer_3:
   \   000047   7A00         MOV     R2,#0x0
   \   000049   7B00         MOV     R3,#0x0
   \                     ??osalFindTimer_5:
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
    157          }
    158          
    159          /*********************************************************************
    160           * @fn      osal_start_timerEx
    161           *
    162           * @brief
    163           *
    164           *   This function is called to start a timer to expire in n mSecs.
    165           *   When the timer expires, the calling task will get the specified event.
    166           *
    167           * @param   uint8 taskID - task id to set timer for
    168           * @param   uint16 event_id - event to be notified with
    169           * @param   uint32 timeout_value - in milliseconds.
    170           *
    171           * @return  SUCCESS, or NO_TIMER_AVAIL.
    172           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value ){
   \                     osal_start_timerEx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    174          	struct TimerRec * iter;
    175          	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   90....       MOV     DPTR,#intState
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   C2AF         CLR     0xa8.7
    176          
    177          	iter = osalAddTimer( taskID, event_id, timeout_value );
   \   00000F                ; Setup parameters for call to function osalAddTimer
   \   00000F   740A         MOV     A,#0xa
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000017   12....       LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001F   8B..         MOV     ?V1,R3
   \   000021   A9..         MOV     R1,?V1
    178          
    179          	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000023   12....       LCALL   ?Subroutine4 & 0xFFFF
    180          
    181           	return ( (iter != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \                     ??CrossCallReturnLabel_0:
   \   000026   EA           MOV     A,R2
   \   000027   49           ORL     A,R1
   \   000028   6004         JZ      ??osal_start_timerEx_0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   8002         SJMP    ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00002E   7908         MOV     R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   000030                REQUIRE ?Subroutine1
   \   000030                REQUIRE _A_IEN0
   \   000030                ; // Fall through to label ?Subroutine1
    182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#intState
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E0         MOV     C,0xE0 /* A   */.0
   \   000006   92AF         MOV     0xa8.7,C
   \   000008   22           RET
    183          
    184          /*********************************************************************
    185           * @fn      osal_start_reload_timer
    186           *
    187           * @brief
    188           *
    189           *   This function is called to start a timer to expire in n mSecs.
    190           *   When the timer expires, the calling task will get the specified event
    191           *   and the timer will be reloaded with the timeout value.
    192           *
    193           * @param   uint8 taskID - task id to set timer for
    194           * @param   uint16 event_id - event to be notified with
    195           * @param   UNINT16 timeout_value - in milliseconds.
    196           *
    197           * @return  SUCCESS, or NO_TIMER_AVAIL.
    198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value ){
   \                     osal_start_reload_timer:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    200          	struct TimerRec * iter;
    201          	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   90....       MOV     DPTR,#intState
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   C2AF         CLR     0xa8.7
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?L_MOV_X
    202          
    203          	// Add timer
    204           	iter = osalAddTimer( taskID, event_id, timeout_value );
   \   000019                ; Setup parameters for call to function osalAddTimer
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001E   12....       LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
    205           	if ( iter ){
   \   000026   EA           MOV     A,R2
   \   000027   4B           ORL     A,R3
   \   000028   6010         JZ      ??osal_start_reload_timer_0
    206           		iter->reloadTimeout = timeout_value;
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?L_MOV_TO_X
    207           	}
    208          
    209          	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   00003A   12....       LCALL   ?Subroutine4 & 0xFFFF
    210          
    211          	return ( (iter != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \                     ??CrossCallReturnLabel_1:
   \   00003D   EA           MOV     A,R2
   \   00003E   4B           ORL     A,R3
   \   00003F   6004         JZ      ??osal_start_reload_timer_1
   \   000041   7900         MOV     R1,#0x0
   \   000043   8002         SJMP    ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   000045   7908         MOV     R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   000047                REQUIRE ?Subroutine2
   \   000047                REQUIRE _A_IEN0
   \   000047                ; // Fall through to label ?Subroutine2
    212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    213          
    214          /*********************************************************************
    215           * @fn      osal_stop_timerEx
    216           *
    217           * @brief
    218           *
    219           *   This function is called to stop a timer that has already been started.
    220           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    221           *   associated with the timer from being set for the calling task.
    222           *
    223           * @param   uint8 task_id - task id of timer to stop
    224           * @param   uint16 event_id - identifier of the timer that is to be stopped
    225           *
    226           * @return  SUCCESS or INVALID_EVENT_ID
    227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id ){
   \                     osal_stop_timerEx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    229          	struct TimerRec * iter;
    230           	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   90....       MOV     DPTR,#intState
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   C2AF         CLR     0xa8.7
    231          
    232           	iter = osalFindTimer( task_id, event_id );
   \   00000F                ; Setup parameters for call to function osalFindTimer
   \   00000F   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   A8..         MOV     R0,?V0
   \   000018   A9..         MOV     R1,?V1
    233           	if ( iter ){
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   600C         JZ      ??osal_stop_timerEx_0
    234           		iter->eventFlag=0;
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
    235          	}
    236          
    237           	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0:
   \   00002A   12....       LCALL   ?Subroutine4 & 0xFFFF
    238          
    239          	return ( (iter != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \                     ??CrossCallReturnLabel_2:
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6004         JZ      ??osal_stop_timerEx_1
   \   000031   7900         MOV     R1,#0x0
   \   000033   8002         SJMP    ??osal_stop_timerEx_2
   \                     ??osal_stop_timerEx_1:
   \   000035   7906         MOV     R1,#0x6
   \                     ??osal_stop_timerEx_2:
   \   000037   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   00003A                REQUIRE _A_IEN0
    240          }
    241          
    242          /*********************************************************************
    243           * @fn      osal_get_timeoutEx
    244           *
    245           * @brief
    246           *
    247           * @param   uint8 task_id - task id of timer to check
    248           * @param   uint16 event_id - identifier of timer to be checked
    249           *
    250           * @return  Return the timer's tick count if found, zero otherwise.
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id ){
   \                     osal_get_timeoutEx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    253          	struct TimerRec * iter;
    254           	uint32 rtrn = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   \   00000B   75..00       MOV     ?V2,#0x0
   \   00000E   75..00       MOV     ?V3,#0x0
    255          
    256           	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000011   A2AF         MOV     C,0xa8.7
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   90....       MOV     DPTR,#intState
   \   000018   F0           MOVX    @DPTR,A
   \   000019   C2AF         CLR     0xa8.7
    257          
    258           	iter = osalFindTimer( task_id, event_id );
   \   00001B                ; Setup parameters for call to function osalFindTimer
   \   00001B   12....       LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
    259          
    260           	if ( iter ){
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   6005         JZ      ??osal_get_timeoutEx_0
    261          		rtrn = iter->timeout;
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?L_MOV_X
    262           	}
    263          
    264           	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0:
   \   00002D   12....       LCALL   ?Subroutine4 & 0xFFFF
    265          
    266          	return rtrn;
   \                     ??CrossCallReturnLabel_3:
   \   000030   AA..         MOV     R2,?V0
   \   000032   AB..         MOV     R3,?V1
   \   000034   AC..         MOV     R4,?V2
   \   000036   AD..         MOV     R5,?V3
   \   000038   80..         SJMP    ?Subroutine2
   \   00003A                REQUIRE _A_IEN0
    267          }
    268          
    269          /*********************************************************************
    270           * @fn      osal_timer_num_active
    271           *
    272           * @brief
    273           *
    274           *   This function counts the number of active timers.
    275           *
    276           * @return  uint8 - number of timers
    277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          uint8 osal_timer_num_active( void ){
   \                     osal_timer_num_active:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    279          	struct TimerRec * iter;
    280          	uint8 numTimers = 0;
   \   000004   7900         MOV     R1,#0x0
    281          
    282           	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   90....       MOV     DPTR,#intState
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   C2AF         CLR     0xa8.7
    283          
    284          	iter = timerRec;	
   \   000010   7A..         MOV     R2,#timerRec & 0xff
   \   000012   7B..         MOV     R3,#(timerRec >> 8) & 0xff
   \   000014   8019         SJMP    ??osal_timer_num_active_0
    285          	for(;iter != end; iter++){
    286          		if (iter->eventFlag){
   \                     ??osal_timer_num_active_1:
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FC           MOV     R4,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FD           MOV     R5,A
   \   000023   EC           MOV     A,R4
   \   000024   4D           ORL     A,R5
   \   000025   6001         JZ      ??osal_timer_num_active_2
    287          			numTimers++;
   \   000027   09           INC     R1
    288          		}
    289          	}
   \                     ??osal_timer_num_active_2:
   \   000028   EA           MOV     A,R2
   \   000029   240B         ADD     A,#0xb
   \   00002B   FA           MOV     R2,A
   \   00002C   5001         JNC     ??osal_timer_num_active_0
   \   00002E   0B           INC     R3
   \                     ??osal_timer_num_active_0:
   \   00002F   90....       MOV     DPTR,#end
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FC           MOV     R4,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   EA           MOV     A,R2
   \   000038   6C           XRL     A,R4
   \   000039   7002         JNZ     ??osal_timer_num_active_3
   \   00003B   EB           MOV     A,R3
   \   00003C   6D           XRL     A,R5
   \                     ??osal_timer_num_active_3:
   \   00003D   70D7         JNZ     ??osal_timer_num_active_1
    290          
    291          	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00003F   12....       LCALL   ?Subroutine4 & 0xFFFF
    292          
    293          	return numTimers;
   \                     ??CrossCallReturnLabel_4:
   \   000042                REQUIRE ?Subroutine3
   \   000042                REQUIRE _A_IEN0
   \   000042                ; // Fall through to label ?Subroutine3
    294          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    295          
    296          /*********************************************************************
    297           * @fn      osalTimerUpdate
    298           *
    299           * @brief   Update the timer structures for a timer tick.
    300           *
    301           * @param   none
    302           *
    303           * @return  none
    304           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void osalTimerUpdate( uint32 updateTime ){
   \                     osalTimerUpdate:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    306          	struct TimerRec * iter;
    307          	iter = timerRec;
   \   00000D   75....       MOV     ?V0,#timerRec & 0xff
   \   000010   75....       MOV     ?V1,#(timerRec >> 8) & 0xff
    308          
    309           	HAL_ENTER_CRITICAL_SECTION( intState );  
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   90....       MOV     DPTR,#intState
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   C2AF         CLR     0xa8.7
    310           	osal_systemClock += updateTime;
   \   00001D   90....       MOV     DPTR,#osal_systemClock
   \   000020   78..         MOV     R0,#?V4
   \   000022   12....       LCALL   ?L_ADD_TO_X
    311           	HAL_EXIT_CRITICAL_SECTION( intState );   
   \   000025   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000028   8017         SJMP    ??osalTimerUpdate_0
    312          
    313           	// Look for open timer slot
    314          	for (;iter != end; iter++){
    315          		if (iter->eventFlag == 0)
    316          			continue;
    317          		HAL_ENTER_CRITICAL_SECTION( intState );  
    318              	if (iter->timeout > updateTime) {
    319                  	iter->timeout -= updateTime;
    320                  } else {
    321                  	iter->timeout=0;
    322                  }
    323          		if (iter->timeout == 0){
    324          			osal_set_event( iter->taskId, iter->eventFlag );
    325          			if (iter->reloadTimeout){
    326          				iter->timeout = iter->reloadTimeout;
    327          			} else {
    328          				iter->eventFlag = 0;
   \                     ??osalTimerUpdate_1:
   \   00002A   85..82       MOV     DPL,?V2
   \   00002D   85..83       MOV     DPH,?V3
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
    329          			}
    330          		}
    331          		HAL_EXIT_CRITICAL_SECTION( intState );   
   \                     ??osalTimerUpdate_2:
   \   000034   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000037   E5..         MOV     A,?V0
   \   000039   240B         ADD     A,#0xb
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   5002         JNC     ??osalTimerUpdate_0
   \   00003F   05..         INC     ?V1
   \                     ??osalTimerUpdate_0:
   \   000041   90....       MOV     DPTR,#end
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E5..         MOV     A,?V0
   \   00004B   68           XRL     A,R0
   \   00004C   7003         JNZ     ??osalTimerUpdate_3
   \   00004E   E5..         MOV     A,?V1
   \   000050   69           XRL     A,R1
   \                     ??osalTimerUpdate_3:
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??osalTimerUpdate_4 & 0xFFFF
   \   000056   E5..         MOV     A,?V0
   \   000058   2404         ADD     A,#0x4
   \   00005A   F5..         MOV     ?V2,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V1
   \   00005F   F5..         MOV     ?V3,A
   \   000061   85..82       MOV     DPL,?V2
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   E8           MOV     A,R0
   \   00006C   49           ORL     A,R1
   \   00006D   60C8         JZ      ??CrossCallReturnLabel_6
   \   00006F   A2AF         MOV     C,0xa8.7
   \   000071   E4           CLR     A
   \   000072   33           RLC     A
   \   000073   90....       MOV     DPTR,#intState
   \   000076   F0           MOVX    @DPTR,A
   \   000077   C2AF         CLR     0xa8.7
   \   000079   85..82       MOV     DPL,?V0
   \   00007C   85..83       MOV     DPH,?V1
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?UL_GE_X
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   4016         JC      ??osalTimerUpdate_5
   \   00008C   78..         MOV     R0,#?V4
   \   00008E   12....       LCALL   ?L_SUB_FROM_X
   \   000091   85..82       MOV     DPL,?V0
   \   000094   85..83       MOV     DPH,?V1
   \   000097   12....       LCALL   ?XLOAD_R0123
   \   00009A   E8           MOV     A,R0
   \   00009B   49           ORL     A,R1
   \   00009C   4A           ORL     A,R2
   \   00009D   4B           ORL     A,R3
   \   00009E   7094         JNZ     ??osalTimerUpdate_2
   \   0000A0   8003         SJMP    ??CrossCallReturnLabel_9
   \                     ??osalTimerUpdate_5:
   \   0000A2   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A5                ; Setup parameters for call to function osal_set_event
   \   0000A5   85..82       MOV     DPL,?V2
   \   0000A8   85..83       MOV     DPH,?V3
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   FA           MOV     R2,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   FB           MOV     R3,A
   \   0000B0   85..82       MOV     DPL,?V0
   \   0000B3   85..83       MOV     DPH,?V1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   0000C1   85..82       MOV     DPL,?V0
   \   0000C4   85..83       MOV     DPH,?V1
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   78..         MOV     R0,#?V8
   \   0000D0   12....       LCALL   ?L_MOV_X
   \   0000D3   E5..         MOV     A,?V8
   \   0000D5   45..         ORL     A,?V9
   \   0000D7   45..         ORL     A,?V10
   \   0000D9   45..         ORL     A,?V11
   \   0000DB   7003         JNZ     $+5
   \   0000DD   02....       LJMP    ??osalTimerUpdate_1 & 0xFFFF
   \   0000E0   85..82       MOV     DPL,?V0
   \   0000E3   85..83       MOV     DPH,?V1
   \   0000E6   78..         MOV     R0,#?V8
   \   0000E8   12....       LCALL   ?L_MOV_TO_X
   \   0000EB   02....       LJMP    ??osalTimerUpdate_2 & 0xFFFF
    332          	}
    333          }
   \                     ??osalTimerUpdate_4:
   \   0000EE   7F0C         MOV     R7,#0xc
   \   0000F0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000F3                REQUIRE _A_IEN0
    334          
    335          #ifdef POWER_SAVING
    336          /*********************************************************************
    337           * @fn      osal_adjust_timers
    338           *
    339           * @brief   Update the timer structures for elapsed ticks.
    340           *
    341           * @param   none
    342           *
    343           * @return  none
    344           *********************************************************************/
    345          void osal_adjust_timers( void ){
    346          	 //Deprecated for CC2530 and CC2430 SoC.
    347          	/*
    348          	uint32 eTime;
    349          
    350           	if ( timerHead != NULL ) {
    351          		// Compute elapsed time (msec)
    352           		eTime = TimerElapsed() / TICK_COUNT;
    353          
    354          		if ( eTime ){
    355          			osalTimerUpdate( eTime );
    356          		}
    357          	}
    358          	*/
    359          }
    360          
    361          /*********************************************************************
    362           * @fn      osal_next_timeout
    363           *
    364           * @brief
    365           *
    366           *   Search timer table to return the lowest timeout value. If the
    367           *   timer list is empty, then the returned timeout will be zero.
    368           *
    369           * @param   none
    370           *
    371           * @return  none
    372           *********************************************************************/
    373          uint32 osal_next_timeout( void ){
    374          	uint32 nextTimeout;
    375          	struct TimerRec * iter = timerRec;
    376          	iter = timerRec;	
    377          	
    378          	nextTimeout=OSAL_TIMERS_MAX_TIMEOUT;
    379          	for(;iter != end; iter++){
    380          		if (iter->eventFlag==0)
    381          			continue;
    382          		if (iter->timeout < nextTimeout){
    383          			nextTimeout = iter->timeout;
    384          		}
    385          	}
    386          
    387            	return nextTimeout;
    388          }
    389          #endif // POWER_SAVING
    390          
    391          /*********************************************************************
    392           * @fn      osal_GetSystemClock()
    393           *
    394           * @brief   Read the local system clock.
    395           *
    396           * @param   none
    397           *
    398           * @return  local clock in milliseconds
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          uint32 osal_GetSystemClock( void ){
   \                     osal_GetSystemClock:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    401          	return ( osal_systemClock );
   \   000004   90....       MOV     DPTR,#osal_systemClock
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   02....       LJMP    ?Subroutine3 & 0xFFFF
    402          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for end>`:
   \   000000   ....         DW timerRec + 6EH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalAddTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalFindTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_reload_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_stop_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_get_timeoutEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_timer_num_active?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_GetSystemClock?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    403          
    404          /*********************************************************************
    405          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     31   osalAddTimer
        0     13   -> osalFindTimer
      0     23   osalFindTimer
      0      9   osalTimerInit
        0      9   -> osal_memset
      0     20   osalTimerUpdate
        0     20   -> osal_set_event
      2      0   osal_GetSystemClock
      0     14   osal_get_timeoutEx
        0     14   -> osalFindTimer
      0     22   osal_start_reload_timer
        0     18   -> osalAddTimer
      0     18   osal_start_timerEx
        0     14   -> osalAddTimer
      0     10   osal_stop_timerEx
        0     10   -> osalFindTimer
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for end>
       6  ??osalAddTimer?relay
       6  ??osalFindTimer?relay
       6  ??osalTimerInit?relay
       6  ??osalTimerUpdate?relay
       6  ??osal_GetSystemClock?relay
       6  ??osal_get_timeoutEx?relay
       6  ??osal_start_reload_timer?relay
       6  ??osal_start_timerEx?relay
       6  ??osal_stop_timerEx?relay
       6  ??osal_timer_num_active?relay
       5  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine2
       7  ?Subroutine3
       9  ?Subroutine4
       9  ?Subroutine5
       1  _A_IEN0
       2  end
       1  intState
     148  osalAddTimer
      78  osalFindTimer
      22  osalTimerInit
     243  osalTimerUpdate
      13  osal_GetSystemClock
      58  osal_get_timeoutEx
      71  osal_start_reload_timer
      48  osal_start_timerEx
      58  osal_stop_timerEx
       4  osal_systemClock
      66  osal_timer_num_active
     110  timerRec

 
 845 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   2 bytes in segment XDATA_I
   2 bytes in segment XDATA_ID
 115 bytes in segment XDATA_Z
 
 907 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
 117 bytes of XDATA memory

Errors: none
Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            30/Oct/2015  18:14:24 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zcl\ZclWriteCmd.cpp          /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\zcl\ZclWriteCmd.cpp -D       /
//                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D     /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz --eec++ /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ZclWriteCmd.s51        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZclWriteCmd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE

        PUBLIC ??ZclWriteCmd
        FUNCTION ??ZclWriteCmd,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ??ZclWriteCmd?relay
        FUNCTION ??ZclWriteCmd?relay,0203H
        PUBLIC `??delete ~ZclWriteCmd`
        FUNCTION `??delete ~ZclWriteCmd`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC `??delete ~ZclWriteCmd?relay`
        FUNCTION `??delete ~ZclWriteCmd?relay`,0203H
        PUBLIC ??getBufferFromAttribute
        FUNCTION ??getBufferFromAttribute,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ??getBufferFromAttribute?relay
        FUNCTION ??getBufferFromAttribute?relay,0203H
        PUBLIC ??getDataLen
        FUNCTION ??getDataLen,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ??getDataLen?relay
        FUNCTION ??getDataLen?relay,0203H
        PUBLIC `??new ZclWriteCmd`
        FUNCTION `??new ZclWriteCmd`,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC `??new ZclWriteCmd?relay`
        FUNCTION `??new ZclWriteCmd?relay`,0203H
        PUBLIC `?~ZclWriteCmd`
        FUNCTION `?~ZclWriteCmd`,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC `?~ZclWriteCmd?relay`
        FUNCTION `?~ZclWriteCmd?relay`,0203H
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        

`??operator delete?relay` SYMBOL "?relay", `??operator delete`

`??operator new?relay` SYMBOL "?relay", `??operator new`

`??operator new[]?relay` SYMBOL "?relay", `??operator new[]`
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
??zclGetAttrDataLength?relay SYMBOL "?relay", zclGetAttrDataLength
zclSerializeData    SYMBOL "zclSerializeData"
??zclSerializeData?relay SYMBOL "?relay", zclSerializeData

??ZclWriteCmd?relay SYMBOL "?relay", ??ZclWriteCmd

`??delete ~ZclWriteCmd?relay` SYMBOL "?relay", `??delete ~ZclWriteCmd`

??getBufferFromAttribute?relay SYMBOL "?relay", ??getBufferFromAttribute

??getDataLen?relay  SYMBOL "?relay", ??getDataLen

`??new ZclWriteCmd?relay` SYMBOL "?relay", `??new ZclWriteCmd`

`?~ZclWriteCmd?relay` SYMBOL "?relay", `?~ZclWriteCmd`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete?relay`
        FUNCTION `??operator delete?relay`,00H
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new?relay`
        FUNCTION `??operator new?relay`,00H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new[]?relay`
        FUNCTION `??operator new[]?relay`,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??zclGetAttrDataLength?relay
        FUNCTION ??zclGetAttrDataLength?relay,00H
        EXTERN ??zclSerializeData?relay
        FUNCTION ??zclSerializeData?relay,00H
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSerializeData
        FUNCTION zclSerializeData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant ZclWriteCmd &ZclWriteCmd::new ZclWriteCmd(zclParseCmd_t *)
`??new ZclWriteCmd`:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function `??new ZclWriteCmd`
        CODE
        FUNCALL `??new ZclWriteCmd`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new ZclWriteCmd`, ??ZclWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   `??operator new?relay`; Banked call to: operator new(unsigned int)
        MOV     A,R2
        ORL     A,R3
        JZ      `??new ZclWriteCmd_1`
        ; Setup parameters for call to function ZclWriteCmd::ZclWriteCmd(zclParseCmd_t *)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??ZclWriteCmd?relay  ; Banked call to: ZclWriteCmd::ZclWriteCmd(zclParseCmd_t *)
        SJMP    `??new ZclWriteCmd_2`
`??new ZclWriteCmd_1`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new ZclWriteCmd_2`:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void ZclWriteCmd::delete ~ZclWriteCmd(ZclWriteCmd *)
`??delete ~ZclWriteCmd`:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function `??delete ~ZclWriteCmd`
        CODE
        FUNCALL `??delete ~ZclWriteCmd`, `?~ZclWriteCmd`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~ZclWriteCmd`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~ZclWriteCmd_1`
        ; Setup parameters for call to function ZclWriteCmd::~ZclWriteCmd()
        LCALL   `?~ZclWriteCmd?relay`; Banked call to: ZclWriteCmd::~ZclWriteCmd()
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete?relay`; Banked call to: operator delete(void *)
`??delete ~ZclWriteCmd_1`:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zcl\ZclWriteCmd.cpp
//    1 #include "ZclWriteCmd.h"
//    2 #include "AttributeUtils.h"
//    3 #include "hal_defs.h"
//    4 #include "osal.h"
//    5 
//    6 #define PADDING_NEEDED( bufLen )    ( (bufLen) % 2 )
//    7 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    8 ZclWriteCmd::ZclWriteCmd(zclParseCmd_t *pCmd ){
??ZclWriteCmd:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ??ZclWriteCmd
        CODE
        FUNCALL ??ZclWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ZclWriteCmd, `??operator new[]`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ZclWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ZclWriteCmd, `??operator new[]`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ZclWriteCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
//    9 	uint8 *pBuf = pCmd->pData;
        MOV     A,R4
        ADD     A,#0x3
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   10 	uint16 attrDataLen;
//   11 	uint8 numAttr = 0;
        MOV     ?V7,#0x0
        SJMP    ??ZclWriteCmd_1
//   12 	ZclWriteRec * attributes;
//   13 
//   14   // find out the number of attributes and the length of attribute data
//   15 	while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ){
//   16 		uint8 dataType;
//   17 
//   18 		numAttr++;
??ZclWriteCmd_2:
        INC     ?V7
//   19 		pBuf += 2; 
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZclWriteCmd_3
        INC     R7
//   20 		dataType = *pBuf++;
??ZclWriteCmd_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//   21 		attrDataLen = zclGetAttrDataLength( dataType, pBuf );
//   22 		pBuf += attrDataLen; // move pass attribute data
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay; Banked call to: zclGetAttrDataLength
        MOV     ?V5,R3
        MOV     A,R6
        ADD     A,R2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V5
        MOV     R7,A
//   23 
//   24 		// add padding if needed
//   25 		if ( PADDING_NEEDED( attrDataLen ) ){
//   26 			attrDataLen++;
//   27 		}
//   28 	}
??ZclWriteCmd_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JC      ??ZclWriteCmd_2
//   29 
//   30 	attributes = new ZclWriteRec[numAttr];
        ; Setup parameters for call to function operator new[](unsigned int)
        MOV     A,?V7
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
        MOV     ?V0,R2
        MOV     ?V1,R3
//   31 	attrList = attributes;
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   32 
//   33 	if ( attrList != NULL ){
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        ORL     A,R1
        JNZ     $+5
        LJMP    ??ZclWriteCmd_4 & 0xFFFF
//   34 		uint8 i;
//   35 		pBuf = pCmd->pData;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   36 	    this->numAttr = numAttr;
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOV     A,?V7
        MOVX    @DPTR,A
//   37     	for ( i = 0; i < numAttr; i++ ) {
        MOV     ?V8,#0x0
        LJMP    ??ZclWriteCmd_5 & 0xFFFF
//   38      		attributes->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
??ZclWriteCmd_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   39       		pBuf += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZclWriteCmd_7
        INC     R7
//   40       		attributes->dataType = *pBuf++;
??ZclWriteCmd_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//   41 
//   42       		attrDataLen = zclGetAttrDataLength( attributes->dataType, pBuf );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay; Banked call to: zclGetAttrDataLength
        MOV     ?V2,R2
        MOV     ?V3,R3
//   43 			uint8 * dataPtr = new uint8[attrDataLen];
        ; Setup parameters for call to function operator new[](unsigned int)
        LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
        MOV     ?V12,R2
        MOV     ?V13,R3
//   44       		osal_memcpy( dataPtr, pBuf, attrDataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//   45       		attributes->attrData = dataPtr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V12
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V13
        MOVX    @DPTR,A
//   46 
//   47       		pBuf += attrDataLen; 
        MOV     A,R6
        ADD     A,?V2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V3
        MOV     R7,A
//   48 
//   49       		// advance attribute data pointer
//   50       		if ( PADDING_NEEDED( attrDataLen ) ) {
//   51         		attrDataLen++;
//   52       		}
//   53 			attributes++;
        MOV     A,?V0
        ADD     A,#0x5
        MOV     ?V0,A
        JNC     ??ZclWriteCmd_8
        INC     ?V1
//   54     	}
??ZclWriteCmd_8:
        INC     ?V8
??ZclWriteCmd_5:
        MOV     A,?V8
        CLR     C
        SUBB    A,?V7
        JNC     $+5
        LJMP    ??ZclWriteCmd_6 & 0xFFFF
//   55   	}
//   56 }
??ZclWriteCmd_4:
        MOV     R2,?V10
        MOV     R3,?V11
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//   57 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   58 ZclWriteCmd::~ZclWriteCmd(){
`?~ZclWriteCmd`:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function `?~ZclWriteCmd`
        CODE
        FUNCALL `?~ZclWriteCmd`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `?~ZclWriteCmd`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   59 	if (attrList != NULL){
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        ORL     A,R1
        JZ      `?~ZclWriteCmd_1`
//   60 		ZclWriteRec * attributes = attrList;
        MOV     ?V2,R0
        MOV     ?V3,R1
//   61 		for(int i=0; i< numAttr; i++){
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
        SJMP    `?~ZclWriteCmd_2`
//   62 			delete attributes->attrData;
`?~ZclWriteCmd_3`:
        ; Setup parameters for call to function operator delete(void *)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   `??operator delete?relay`; Banked call to: operator delete(void *)
//   63 			attributes++;
        MOV     A,?V2
        ADD     A,#0x5
        MOV     ?V2,A
        JNC     `?~ZclWriteCmd_4`
        INC     ?V3
//   64 		}
`?~ZclWriteCmd_4`:
        INC     ?V4
        MOV     A,?V4
        JNZ     `?~ZclWriteCmd_2`
        INC     ?V5
`?~ZclWriteCmd_2`:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      `?~ZclWriteCmd_3`
//   65 		delete attrList;
        ; Setup parameters for call to function operator delete(void *)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine6_0 & 0xFFFF
//   66 	}
??CrossCallReturnLabel_7:
        LCALL   `??operator delete?relay`; Banked call to: operator delete(void *)
//   67 }
`?~ZclWriteCmd_1`:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function ??ZclWriteCmd
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function `?~ZclWriteCmd`
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ??getDataLen
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//   68 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 uint16 ZclWriteCmd::getDataLen() {
??getDataLen:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ??getDataLen
        CODE
        FUNCALL ??getDataLen, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//   70 	ZclWriteRec * attributes = attrList;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//   71 	uint16 dataLen=0;
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
//   72 	for(int i=0; i< numAttr; i++){
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
        SJMP    ??getDataLen_1
//   73 		dataLen += attributes->getDataLen();
??getDataLen_2:
        ; Setup parameters for call to function zclGetAttrDataLength
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay; Banked call to: zclGetAttrDataLength
        MOV     ?V7,R3
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        CLR     A
        ADDC    A,?V7
        MOV     R1,A
        MOV     A,?V2
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,?V3
        ADDC    A,R1
        MOV     ?V3,A
//   74 		attributes++;
        MOV     A,R6
        ADD     A,#0x5
        MOV     R6,A
        JNC     ??getDataLen_3
        INC     R7
//   75 	}
??getDataLen_3:
        INC     ?V4
        MOV     A,?V4
        JNZ     ??getDataLen_1
        INC     ?V5
??getDataLen_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??getDataLen_2
//   76 	return dataLen;
        MOV     R2,?V2
        MOV     R3,?V3
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   77 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function ??getDataLen
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ??getBufferFromAttribute
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function `?~ZclWriteCmd`
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ??getDataLen
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ??getBufferFromAttribute
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function `?~ZclWriteCmd`
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function `?~ZclWriteCmd`
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function ??getDataLen
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ??getBufferFromAttribute
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function `?~ZclWriteCmd`
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ??getDataLen
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V4
        SUBB    A,R0
        MOV     A,?V5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//   78 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 BufferData ZclWriteCmd::getBufferFromAttribute(){
??getBufferFromAttribute:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ??getBufferFromAttribute
        CODE
        FUNCALL ??getBufferFromAttribute, ??getDataLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??getBufferFromAttribute, `??operator new[]`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??getBufferFromAttribute, zclSerializeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//   80 	uint16 dataLen = getDataLen();
        ; Setup parameters for call to function ZclWriteCmd::getDataLen()
        LCALL   ??getDataLen?relay   ; Banked call to: ZclWriteCmd::getDataLen()
        MOV     ?V0,R2
        MOV     ?V1,R3
//   81 	BufferData buffer(dataLen);
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V4,R0
        MOV     ?V5,R1
        ; Setup parameters for call to function operator new[](unsigned int)
        LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//   82 	
//   83 	 // Load the buffer - serially
//   84     
//   85 	if (buffer.isValid()){
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??getBufferFromAttribute_1
//   86 		ZclWriteRec * attributes = attrList;
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   87 		uint8 *pBuf = buffer.data;
//   88     	for ( int i = 0; i < numAttr; i++ ){
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        SJMP    ??getBufferFromAttribute_2
//   89 	    	*pBuf++ = LO_UINT16( attributes->attrID );
??getBufferFromAttribute_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//   90       		*pBuf++ = HI_UINT16( attributes->attrID );
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
//   91       		*pBuf++ = attributes->dataType;
??CrossCallReturnLabel_2:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine2 & 0xFFFF
//   92 		    pBuf = zclSerializeData( attributes->dataType, attributes->attrData, pBuf );
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function zclSerializeData
        LCALL   ?Subroutine4 & 0xFFFF
//   93 		}
??CrossCallReturnLabel_10:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclSerializeData?relay; Banked call to: zclSerializeData
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R4,?V6
        MOV     R5,?V7
        INC     ?V0
        MOV     A,?V0
        JNZ     ??getBufferFromAttribute_2
        INC     ?V1
??getBufferFromAttribute_2:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V0
        SUBB    A,R0
        MOV     A,?V1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??getBufferFromAttribute_3
//   94     }
//   95 
//   96 	return buffer;
??getBufferFromAttribute_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock25
//   97 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function ??getBufferFromAttribute
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ??getBufferFromAttribute
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        INC     DPTR
        INC     R4
        MOV     R5,DPH
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??new ZclWriteCmd?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    `??new ZclWriteCmd`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??delete ~ZclWriteCmd?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    `??delete ~ZclWriteCmd`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZclWriteCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ??ZclWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`?~ZclWriteCmd?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    `?~ZclWriteCmd`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getDataLen?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ??getDataLen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getBufferFromAttribute?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ??getBufferFromAttribute

        END
// 
// 823 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
// 
// 859 bytes of CODE memory
//
//Errors: none
//Warnings: none

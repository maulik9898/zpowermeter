###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             27/Oct/2015  21:12:28 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDNwkMgr.c                 #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDNwkMgr.c -D SECURE=0 -D  #
#                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE    #
#                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN -D  #
#                          NV_INIT -D xNV_RESTORE -D MULTICAST_ENABLED=FALSE  #
#                          -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D          #
#                          FEATURE_SYSTEM_STATS -lC                           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ZDNwkMgr.lst             #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ZDNwkMgr.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zdo\ZDNwkMgr.c
      1          /**************************************************************************************************
      2            Filename:       ZDNwkMgr.c
      3            Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
      4            Revision:       $Revision: 15716 $
      5          
      6            Description:    The ZigBee Network Manager.
      7          
      8          
      9            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "nwk_util.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "ZGlobals.h"
     53          #include "ZDNwkMgr.h"
     54          
     55          /******************************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
     60            
     61          /******************************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL VARIABLES
     67           */
     68            
     69          // Task ID for internal task/event processing. This variable will be
     70          // received when ZDNwkMgr_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          uint8 ZDNwkMgr_TaskID = 0;
   \                     ZDNwkMgr_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     72          
     73          /******************************************************************************
     74           * LOCAL VARIABLES
     75           */
     76          
     77          // Frequency Agility variables

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
   \                     ZDNwkMgr_UpdateNotifyTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ZDNwkMgr_NumUpdateNotifySent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ZDNwkMgr_WaitingForNotifyConfirm:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          uint16 ZDNwkMgr_TotalTransmissions;
   \                     ZDNwkMgr_TotalTransmissions:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          uint16 ZDNwkMgr_TxFailures;
   \                     ZDNwkMgr_TxFailures:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     85          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
   \                     ZDNwkMgr_MgmtNwkUpdateReq:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
     87            
     88          #if defined ( NWK_MANAGER )
     89          uint16 ZDNwkMgr_UpdateRequestTimer = 0;
     90          uint8  ZDNwkMgr_LastChannelEnergy = 0;
     91          uint16 ZDNwkMgr_LastChannelFailureRate = 0;
     92          #endif // NWK_MANAGER
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 ZDNwkMgr_NewChannel;
   \                     ZDNwkMgr_NewChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     95          
     96          // PAN ID Conflict variables
     97          #if defined ( NWK_MANAGER )
     98          uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
     99          #endif // NWK_MANAGER
    100          
    101          /*********************************************************************
    102           * GLOBAL FUNCTIONS
    103           */
    104          // Freguency Agility functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
   \                     pZDNwkMgr_ReportChannelInterference:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
   \                     pZDNwkMgr_ProcessDataConfirm:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
   \                     pZDNwkMgr_EDScanConfirmCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          // PAN ID Conflict functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
   \                     pZDNwkMgr_NetworkReportCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
   \                     pZDNwkMgr_NetworkUpdateCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    112          
    113          /******************************************************************************
    114           * LOCAL FUNCTIONS
    115           */
    116          
    117          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
    118          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
    119          
    120          // Frequency Agility functions
    121          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    122          
    123          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
    124          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
    125          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    126          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    127          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    128                                                         uint16 totalTransmissions, uint16 txFailures,
    129                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
    130          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    131          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
    132          void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
    133          
    134          #if defined ( NWK_MANAGER )
    135          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
    136          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
    137          #endif // NWK_MANAGER
    138          
    139          // PAN ID Conflict functions
    140          #if defined ( NWK_MANAGER )
    141          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
    142          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
    143          
    144          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
    145          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
    146          #endif // NWK_MANAGER
    147          
    148          /*********************************************************************
    149           * @fn      ZDNwkMgr_Init
    150           *
    151           * @brief   Initialization function for the Network Manager Task.
    152           *          This is called during initialization and should contain
    153           *          any application specific initialization (ie. hardware
    154           *          initialization/setup, table initialization, power up
    155           *          notificaiton ... ).
    156           *
    157           * @param   task_id - the ID assigned by OSAL.  This ID should be
    158           *                    used to send messages and set timers.
    159           *
    160           * @return  none
    161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          void ZDNwkMgr_Init( byte task_id )
   \                     ZDNwkMgr_Init:
    163          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    164            // Save the task ID
    165            ZDNwkMgr_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000009   F0           MOVX    @DPTR,A
    166          
    167            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
   \   00000A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000A   7A15         MOV     R2,#0x15
   \   00000C   7B80         MOV     R3,#-0x80
   \   00000E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    168          
    169            // Frequecy Agility initialization
    170            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A38         MOV     R2,#0x38
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    171          #if defined ( NWK_MANAGER )
    172            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
    173          #endif // NWK_MANAGER
    174          
    175            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   00001D   90....       MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   000020   74..         MOV     A,#??ZDNwkMgr_EDScanConfirmCB?relay & 0xff
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff
   \   000026   F0           MOVX    @DPTR,A
    176            pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
   \   000027   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002A   74..         MOV     A,#??ZDNwkMgr_ProcessDataConfirm?relay & 0xff
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   74..         MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff
   \   000030   F0           MOVX    @DPTR,A
    177            pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
   \   000031   90....       MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
   \   000034   74..         MOV     A,#??ZDNwkMgr_ReportChannelInterference?relay & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff
   \   00003A   F0           MOVX    @DPTR,A
    178            
    179            // PAN ID Conflict initialization
    180          #if defined ( NWK_MANAGER )
    181            pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
    182            pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
    183          #endif // NWK_MANAGER
    184            
    185            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
   \   00003B   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8
   \   00003E   7402         MOV     A,#0x2
   \   000040   F0           MOVX    @DPTR,A
    186            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000041   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000044   74FE         MOV     A,#-0x2
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   04           INC     A
   \   000049   F0           MOVX    @DPTR,A
    187          }
   \   00004A                REQUIRE ?Subroutine0
   \   00004A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    188          
    189          /*********************************************************************
    190           * @fn      ZDNwkMgr_event_loop
    191           *
    192           * @brief   Main event loop for the Network Manager task. This function
    193           *          is called to process all events for the task.  Events
    194           *          include timers, messages and any other user defined events.
    195           *
    196           * @param   task_id  - The OSAL assigned task ID.
    197           * @param   events - events to process.  This is a bit map and can
    198           *                   contain more than one event.
    199           *
    200           * @return  none
    201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    202          UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
   \                     ZDNwkMgr_event_loop:
    203          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    204            osal_event_hdr_t *msgPtr;
    205            (void)task_id;  // Intentionally unreferenced parameter
    206          
    207            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??ZDNwkMgr_event_loop_0 & 0xFFFF
    208            {
    209              msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8052         SJMP    ??ZDNwkMgr_event_loop_1
   \                     ??ZDNwkMgr_event_loop_2:
   \   000012                ; Setup parameters for call to function nwkTransmissionFailures
    210              while ( msgPtr )
    211              {
    212                switch ( msgPtr->event )
    213                {
    214                  case ZDO_CB_MSG:
    215                    // ZDO sends the message that we registered for
    216                    ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
    217                    break;
    218                   
    219                  case NM_CHANNEL_INTERFERE:
    220                    // NWK layer sends the message when it detectes Channel Interference
    221                    ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
    222                    break;
    223             
    224                  case NM_ED_SCAN_CONFIRM:
    225                    // NWK layer sends the message when it receives an ED scan confirmation
    226                    ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
   \   000012   7900         MOV     R1,#0x0
   \   000014   12....       LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
   \   000017   8A..         MOV     ?V2,R2
   \   000019   8B..         MOV     ?V3,R3
   \   00001B                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   00001B   75..00       MOV     ?V4,#0x0
   \   00001E   78..         MOV     R0,#?V4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   78..         MOV     R0,#?V2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   90....       MOV     DPTR,#_NIB + 107
   \   000030   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000033   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6017         JZ      ??ZDNwkMgr_event_loop_3
   \   000046                ; Setup parameters for call to function osal_start_timerEx
   \   000046   90....       MOV     DPTR,#__Constant_32
   \   000049   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004C   7A08         MOV     R2,#0x8
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
    227                    break;
    228          #if defined ( NWK_MANAGER )
    229                  case ZDO_NETWORK_REPORT:
    230                    // NWK layer sends this message when it receives a Network Report message
    231                    ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
    232                    break;
    233                 
    234                  case ZDO_NETWORK_UPDATE:
    235                    // NKW layer sends this message when it receives a Network Update message
    236                    ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
    237                    break;
    238          #endif // NWK_MANAGER         
    239                  default:
    240                    break;
    241                }
    242          
    243                // Release the memory
    244                osal_msg_deallocate( (uint8 *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_3:
   \   00005D                ; Setup parameters for call to function osal_msg_deallocate
   \   00005D   AA..         MOV     R2,?V0
   \   00005F   AB..         MOV     R3,?V1
   \   000061   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    245          
    246                // Next
    247                msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000064                ; Setup parameters for call to function osal_msg_receive
   \                     ??ZDNwkMgr_event_loop_1:
   \   000064   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00006C   8A..         MOV     ?V0,R2
   \   00006E   8B..         MOV     ?V1,R3
   \   000070   E5..         MOV     A,?V0
   \   000072   45..         ORL     A,?V1
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
   \   000079   85..82       MOV     DPL,?V0
   \   00007C   85..83       MOV     DPH,?V1
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   24CF         ADD     A,#-0x31
   \   000082   603E         JZ      ??ZDNwkMgr_event_loop_5
   \   000084   14           DEC     A
   \   000085   607E         JZ      ??ZDNwkMgr_event_loop_6
   \   000087   245F         ADD     A,#0x5f
   \   000089   70D2         JNZ     ??ZDNwkMgr_event_loop_3
   \   00008B   E5..         MOV     A,?V0
   \   00008D   240C         ADD     A,#0xc
   \   00008F   F582         MOV     DPL,A
   \   000091   E4           CLR     A
   \   000092   35..         ADDC    A,?V1
   \   000094   F583         MOV     DPH,A
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F5..         MOV     ?V2,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F5..         MOV     ?V3,A
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDNwkMgr_event_loop>_0`:
   \   0000A2   0000         DW        0
   \   0000A4   0200         DW        2
   \   0000A6   3800         DW        56
   \   0000A8   ....         DW        ??ZDNwkMgr_event_loop_7
   \   0000AA   1580         DW        32789
   \   0000AC   ....         DW        ??ZDNwkMgr_event_loop_8
   \   0000AE   ....         DW        ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_8:
   \   0000B0                ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
   \   0000B0   AA..         MOV     R2,?V0
   \   0000B2   AB..         MOV     R3,?V1
   \   0000B4   12....       LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay; Banked call to: ZDNwkMgr_ProcessServerDiscRsp
   \   0000B7   80A4         SJMP    ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_7:
   \   0000B9                ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
   \   0000B9   AA..         MOV     R2,?V0
   \   0000BB   AB..         MOV     R3,?V1
   \   0000BD   12....       LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay; Banked call to: ZDNwkMgr_ProcessMgmtNwkUpdateReq
   \   0000C0   809B         SJMP    ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_5:
   \   0000C2   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C3           CLR     C
   \   0000C7   9404         SUBB    A,#0x4
   \   0000C9   5092         JNC     ??ZDNwkMgr_event_loop_3
   \   0000CB                ; Setup parameters for call to function NLME_EDScanRequest
   \   0000CB   90....       MOV     DPTR,#_NIB + 42
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   90....       MOV     DPTR,#__Constant_7fff800
   \   0000D3   12....       LCALL   ?XLOAD_R2345
   \   0000D6   12....       LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
   \   0000D9   E9           MOV     A,R1
   \   0000DA   7081         JNZ     ??ZDNwkMgr_event_loop_3
   \   0000DC   85..82       MOV     DPL,?V0
   \   0000DF   85..83       MOV     DPH,?V1
   \   0000E2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000E5   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   0000E8   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000EB   85..82       MOV     DPL,?V0
   \   0000EE   85..83       MOV     DPH,?V1
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000F6   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   0000F9   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000FC   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   0000FF   74FF         MOV     A,#-0x1
   \                     ??ZDNwkMgr_event_loop_9:
   \   000101   F0           MOVX    @DPTR,A
   \   000102   02....       LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_6:
   \   000105   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F4           CPL     A
   \   00010A   6003         JZ      $+5
   \   00010C   02....       LJMP    ??ZDNwkMgr_event_loop_2 & 0xFFFF
   \   00010F                ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
   \   00010F   AA..         MOV     R2,?V0
   \   000111   AB..         MOV     R3,?V1
   \   000113   12....       LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay; Banked call to: ZDNwkMgr_CheckForChannelInterference
   \   000116   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000119   E4           CLR     A
   \   00011A   80E5         SJMP    ??ZDNwkMgr_event_loop_9
    248              }
    249              
    250              // Return unprocessed events
    251              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDNwkMgr_event_loop_4:
   \   00011C   EE           MOV     A,R6
   \   00011D   FA           MOV     R2,A
   \   00011E   EF           MOV     A,R7
   \   00011F   6480         XRL     A,#0x80
   \   000121   02....       LJMP    ??ZDNwkMgr_event_loop_10 & 0xFFFF
    252            }
    253          
    254            if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
   \                     ??ZDNwkMgr_event_loop_0:
   \   000124   EE           MOV     A,R6
   \   000125   A2E0         MOV     C,0xE0 /* A   */.0
   \   000127   5025         JNC     ??ZDNwkMgr_event_loop_11
    255            {       
    256              // Switch channel
    257              _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
   \   000129   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   90....       MOV     DPTR,#_NIB + 22
   \   000130   F0           MOVX    @DPTR,A
    258              ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
   \   000131                ; Setup parameters for call to function ZMacSetReq
   \   000131   7A..         MOV     R2,#ZDNwkMgr_NewChannel & 0xff
   \   000133   7B..         MOV     R3,#(ZDNwkMgr_NewChannel >> 8) & 0xff
   \   000135   79E1         MOV     R1,#-0x1f
   \   000137   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
    259           
    260              // Our Channel has been changed -- notify to save info into NV
    261              ZDApp_NwkStateUpdateCB();
   \   00013A                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00013A   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
    262              
    263              // Reset the total transmit count and the transmit failure counters
    264              _NIB.nwkTotalTransmissions = 0;
   \   00013D   90....       MOV     DPTR,#_NIB + 107
   \   000140   E4           CLR     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   F0           MOVX    @DPTR,A
    265              nwkTransmissionFailures( TRUE );
   \   000144                ; Setup parameters for call to function nwkTransmissionFailures
   \   000144   7901         MOV     R1,#0x1
   \   000146   12....       LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
    266              
    267              return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
   \   000149   EE           MOV     A,R6
   \   00014A   6401         XRL     A,#0x1
   \   00014C   8062         SJMP    ??ZDNwkMgr_event_loop_12
    268            }
    269          
    270            if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
   \                     ??ZDNwkMgr_event_loop_11:
   \   00014E   5402         ANL     A,#0x2
   \   000150   6039         JZ      ??ZDNwkMgr_event_loop_13
    271            {
    272              // Update the Update Notify timer
    273              if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
   \   000152   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   000155   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000158   E8           MOV     A,R0
   \   000159   49           ORL     A,R1
   \   00015A   6025         JZ      ??ZDNwkMgr_event_loop_14
    274              {
    275                ZDNwkMgr_UpdateNotifyTimer--;
   \   00015C   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   24FF         ADD     A,#-0x1
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   34FF         ADDC    A,#-0x1
   \   000167   F0           MOVX    @DPTR,A
    276                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   000168                ; Setup parameters for call to function osal_start_timerEx
   \   000168   90....       MOV     DPTR,#__Constant_ea60
   \   00016B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00016E   7A02         MOV     R2,#0x2
   \   000170   7B00         MOV     R3,#0x0
   \   000172   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F9           MOV     R1,A
   \   000177   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00017A   7404         MOV     A,#0x4
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017F   8005         SJMP    ??ZDNwkMgr_event_loop_15
    277              }
    278              else
    279              {
    280                ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ??ZDNwkMgr_event_loop_14:
   \   000181   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   000184   E4           CLR     A
   \   000185   F0           MOVX    @DPTR,A
    281              }
    282              
    283              return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
   \                     ??ZDNwkMgr_event_loop_15:
   \   000186   EE           MOV     A,R6
   \   000187   6402         XRL     A,#0x2
   \   000189   8025         SJMP    ??ZDNwkMgr_event_loop_12
    284            }
    285            
    286          #if defined ( NWK_MANAGER )
    287            if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
    288            {
    289              // Update the Update Request timer
    290              if ( ZDNwkMgr_UpdateRequestTimer > 0 )
    291              {
    292                ZDNwkMgr_UpdateRequestTimer--;
    293                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    294              }
    295              
    296              return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
    297            }
    298          #endif // NWK_MANAGER
    299            
    300            if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_13:
   \   00018B   EE           MOV     A,R6
   \   00018C   5408         ANL     A,#0x8
   \   00018E   6025         JZ      ??ZDNwkMgr_event_loop_16
    301            {  
    302              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   000190   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   000193   E0           MOVX    A,@DPTR
   \   000194   6017         JZ      ??ZDNwkMgr_event_loop_17
    303              {
    304                if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
    305                                          ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
   \   000196                ; Setup parameters for call to function NLME_EDScanRequest
   \   000196   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 4
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F9           MOV     R1,A
   \   00019B   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
   \   00019E   12....       LCALL   ?XLOAD_R2345
   \   0001A1   12....       LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
   \   0001A4   E9           MOV     A,R1
   \   0001A5   7006         JNZ     ??ZDNwkMgr_event_loop_17
    306                {
    307                  ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
   \   0001A7   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   14           DEC     A
   \   0001AC   F0           MOVX    @DPTR,A
    308                }
    309              }
    310                
    311              return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
   \                     ??ZDNwkMgr_event_loop_17:
   \   0001AD   EE           MOV     A,R6
   \   0001AE   6408         XRL     A,#0x8
   \                     ??ZDNwkMgr_event_loop_12:
   \   0001B0   FA           MOV     R2,A
   \   0001B1   EF           MOV     A,R7
   \                     ??ZDNwkMgr_event_loop_10:
   \   0001B2   FB           MOV     R3,A
   \   0001B3   8004         SJMP    ??ZDNwkMgr_event_loop_18
    312            }
    313            
    314            // Discard or make more handlers
    315            return 0;
   \                     ??ZDNwkMgr_event_loop_16:
   \   0001B5   7A00         MOV     R2,#0x0
   \   0001B7   7B00         MOV     R3,#0x0
   \                     ??ZDNwkMgr_event_loop_18:
   \   0001B9                REQUIRE ?Subroutine1
   \   0001B9                ; // Fall through to label ?Subroutine1
    316          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   000007   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine13_0
   \   000002                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    317          
    318          /*********************************************************************
    319           * @fn      ZDNwkMgr_ProcessMsgCBs
    320           *
    321           * @brief   Process the incoming messages.
    322           *
    323           * @param   msgPtr - message to process
    324           *
    325           * @return  TRUE if message to be freed. FALSE otherwise.
    326           */
    327          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
    328          {
    329            switch ( inMsg->clusterID )
    330            {   
    331              case Mgmt_NWK_Update_req:
    332                ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
    333                break;    
    334          #if defined ( NWK_MANAGER )  
    335              case Mgmt_NWK_Update_notify:
    336                ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
    337                break;
    338          #endif // NWK_MANAGER
    339              case Server_Discovery_rsp:
    340                ZDNwkMgr_ProcessServerDiscRsp( inMsg );
    341                break;
    342                
    343              default:
    344                // Unknown message
    345                break;
    346            }
    347          }
    348          
    349          /*********************************************************************
    350           * Frequency Agility Routines
    351           */
    352          #if defined ( NWK_MANAGER )
    353          /*********************************************************************
    354           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
    355           *
    356           * @brief       This function processes the incoming Management
    357           *              Network Update notify.
    358           *
    359           * @param       pUpdateNotify - notify message
    360           *
    361           * @return      TRUE if message to be freed. FALSE otherwise.
    362           */
    363          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
    364          {
    365            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    366            {
    367              ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
    368              if ( pNotify )
    369              {
    370                ZDNwkMgr_CheckForChannelChange( pNotify );
    371          
    372                osal_mem_free( pNotify );
    373              }
    374            }
    375          }
    376          
    377          /*********************************************************************
    378           * @fn          ZDNwkMgr_CheckForChannelChange
    379           *
    380           * @brief       This function processes the incoming Management Network
    381           *              Update notify and starts an Update Request if a channel
    382           *              change is needed.
    383           *
    384           * @param       pUpdateNotify - notify message
    385           *
    386           * @return      none
    387           */
    388          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
    389          {
    390            uint8  i;
    391            uint16 failureRate;
    392            uint8  lowestEnergyIndex;
    393            uint8  lowestEnergyValue = 0xFF;
    394                
    395            // If any device has more than 50% transmission failures, a channel
    396            // change should be considered
    397            failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
    398            if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
    399            {
    400          #if defined ( LCD_SUPPORTED )
    401              HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
    402              HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
    403          #endif
    404              return;
    405            }
    406          
    407            // If the current failure rate is higher than the last failure rate,
    408            // a channel change should be considered
    409            if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
    410            {
    411          #if defined ( LCD_SUPPORTED )
    412              HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
    413              HalLcdWriteStringValueValue( ": ", failureRate, 10, 
    414                                           ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
    415          #endif
    416              return;
    417            }
    418            
    419            // Select a single channel based on the Mgmt_NWK_Update_notify based on
    420            // the lowest energy. This is the proposed new channel. 
    421            for ( i = 0; i < pNotify->listCount; i++ )
    422            {
    423              if ( pNotify->energyValues[i] < lowestEnergyValue )
    424              {
    425                lowestEnergyIndex = i;
    426                lowestEnergyValue = pNotify->energyValues[i];
    427              }
    428            }
    429                
    430            // If this new channel does not have an energy level below an acceptable
    431            // threshold, a channel change should not be done.
    432            if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
    433            {
    434          #if defined ( LCD_SUPPORTED )
    435              HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
    436              HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
    437                                           ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
    438          #endif
    439              return;
    440            }
    441          
    442            // Channel change should be done -- find out the new active channel
    443            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
    444            {
    445              if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
    446              {
    447                if ( lowestEnergyIndex == 0 )
    448                  break;
    449                lowestEnergyIndex--;
    450              }
    451            }
    452            
    453            if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
    454            {
    455              uint32 channelMask;
    456              zAddrType_t dstAddr;
    457              
    458              // The new channel
    459              ZDNwkMgr_NewChannel = i;
    460                  
    461              // Prior to changing channels, the network manager should store the 
    462              // energy scan value as the last energy scan value and the failure 
    463              // rate from the existing channel as the last failure rate.  These 
    464              // values are useful to allow comparison of the failure rate and energy
    465              // level on the previous channel to evaluate if the network is causing
    466              // its own interference.
    467              ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
    468              ZDNwkMgr_LastChannelFailureRate = failureRate;
    469                 
    470              // The network manager should broadcast a Mgmt_NWK_Update_req notifying
    471              // devices of the new channel.  The broadcast shall be to all routers 
    472              // and coordinator.
    473              dstAddr.addrMode = AddrBroadcast;
    474              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    475              channelMask = (uint32)1 << i;
    476                  
    477              // Increment the nwkUpdateId parameter and set the updateID in the beacon
    478              NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
    479              
    480              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
    481                  
    482              // The network manager shall set a timer based on the value of 
    483              // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
    484              // channels and shall not issue another such command until this 
    485              // timer expires.  
    486              ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
    487              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    488                            
    489              // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    490              // the local network manager shall set a timer equal to the 
    491              // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    492              // expiration of this timer.  NOTE: since we won't recevied our own
    493              // broadcasted Update Request, we start the channel change timer here.  
    494              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    495                                  ZDNWKMGR_BCAST_DELIVERY_TIME );
    496            }
    497          }
    498          #endif  // NWK_MANAGER
    499          
    500          /*********************************************************************
    501           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
    502           *
    503           * @brief       This function processes the incoming Management
    504           *              Network Update request and starts the request (if needed).
    505           *
    506           * @param       Request message
    507           *
    508           * @return      none
    509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessMgmtNwkUpdateReq:
    511          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    512            ZDO_MgmtNwkUpdateReq_t Req;
    513            
    514            ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
   \   00000E                ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay; Banked call to: ZDO_ParseMgmtNwkUpdateReq
    515             
    516            if ( Req.scanDuration <= 0x05 )
   \   000015   7404         MOV     A,#0x4
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   EE           MOV     A,R6
   \   00001D   2402         ADD     A,#0x2
   \   00001F   F5..         MOV     ?V2,A
   \   000021   E4           CLR     A
   \   000022   3F           ADDC    A,R7
   \   000023   F5..         MOV     ?V3,A
   \   000025   EE           MOV     A,R6
   \   000026   240F         ADD     A,#0xf
   \   000028   F5..         MOV     ?V0,A
   \   00002A   E4           CLR     A
   \   00002B   3F           ADDC    A,R7
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   E9           MOV     A,R1
   \   00002F   C3           CLR     C
   \   000030   9406         SUBB    A,#0x6
   \   000032   5055         JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
    517            {
    518              // Request is to scan over channelMask. The result will be reported by Confirm   
    519              if ( ( !inMsg->wasBroadcast )                     && 
    520                   ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
    521                   ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
   \   000034   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000037   6003         JZ      $+5
   \   000039   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   000047   C3           CLR     C
   \   000048   9406         SUBB    A,#0x6
   \   00004A   4003         JC      $+5
   \   00004C   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    522              {
    523                if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
   \   00004F                ; Setup parameters for call to function NLME_EDScanRequest
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   12....       LCALL   ?XLOAD_R2345
   \   000058   12....       LCALL   ??NLME_EDScanRequest?relay; Banked call to: NLME_EDScanRequest
   \   00005B   E9           MOV     A,R1
   \   00005C   6003         JZ      $+5
   \   00005E   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    524                {
    525                  // Save off the information to be used for the notify
    526                  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   00006B   F0           MOVX    @DPTR,A
    527                  ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00006C   12....       LCALL   ?Subroutine4 & 0xFFFF
    528                  
    529                  Req.scanCount--;
   \                     ??CrossCallReturnLabel_15:
   \   00006F   7405         MOV     A,#0x5
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E0           MOVX    A,@DPTR
   \   000075   14           DEC     A
   \   000076   F0           MOVX    @DPTR,A
    530                  
    531                  // Save off scan info for the subsequent scans
    532                  ZDNwkMgr_MgmtNwkUpdateReq = Req;
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   7C..         MOV     R4,#ZDNwkMgr_MgmtNwkUpdateReq & 0xff
   \   00007F   7D..         MOV     R5,#(ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff
   \   000081   7409         MOV     A,#0x9
   \   000083   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000086   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    533                }
    534              }
    535            }
    536            else if ( Req.scanDuration == 0xFE )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
   \   000089   74FE         MOV     A,#-0x2
   \   00008B   69           XRL     A,R1
   \   00008C   706F         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
    537            {
    538              // Request is to change Channel. The command provide a new active
    539              // channel as a single channel in the channelMask.
    540              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   00008E   7406         MOV     A,#0x6
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000096   4003         JC      $+5
   \   000098   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    541              {
    542                uint8 i;
    543                
    544                // Set update ID in the Beacon
    545                NLME_SetUpdateID(Req.nwkUpdateId); 
   \   00009B                ; Setup parameters for call to function NLME_SetUpdateID
   \   00009B   12....       LCALL   ??NLME_SetUpdateID?relay; Banked call to: NLME_SetUpdateID
    546                
    547                // Find out the new active channel
    548                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   00009E   7900         MOV     R1,#0x0
    549                {
    550                  if ( ( (uint32)1 << i ) & Req.channelMask )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   78..         MOV     R0,#?V0
   \   0000A8   12....       LCALL   ?L_MOV_X
   \   0000AB   E9           MOV     A,R1
   \   0000AC   78..         MOV     R0,#?V0
   \   0000AE   12....       LCALL   ?UL_SHR
   \   0000B1   E5..         MOV     A,?V0
   \   0000B3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B5   4007         JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
    551                  {
    552                    break;
    553                  }
    554                }
   \   0000B7   09           INC     R1
   \   0000B8   E9           MOV     A,R1
   \   0000B9   C3           CLR     C
   \   0000BA   941B         SUBB    A,#0x1b
   \   0000BC   40E2         JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
    555          
    556                if ( _NIB.nwkLogicalChannel != i )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
   \   0000BE   90....       MOV     DPTR,#_NIB + 22
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   69           XRL     A,R1
   \   0000C3   7003         JNZ     $+5
   \   0000C5   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    557                {
    558                  ZDNwkMgr_NewChannel = i;
   \   0000C8   E9           MOV     A,R1
   \   0000C9   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   0000CC   F0           MOVX    @DPTR,A
    559                    
    560                  // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    561                  // the local network manager shall set a timer equal to the 
    562                  // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    563                  // expiration of this timer.  Each node shall also increment the 
    564                  // nwkUpdateId parameter and also reset the total transmit count 
    565                  // and the transmit failure counters.  
    566                  osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    567                                      ZDNWKMGR_BCAST_DELIVERY_TIME );
   \   0000CD                ; Setup parameters for call to function osal_start_timerEx
   \   0000CD   90....       MOV     DPTR,#_NIB + 7
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   75F064       MOV     B,#0x64
   \   0000D4   A4           MUL     AB
   \   0000D5   F5..         MOV     ?V0,A
   \   0000D7   A8F0         MOV     R0,B
   \   0000D9   E4           CLR     A
   \   0000DA   28           ADD     A,R0
   \   0000DB   F5..         MOV     ?V1,A
   \   0000DD   33           RLC     A
   \   0000DE   95E0         SUBB    A,0xE0 /* A   */
   \   0000E0   F5..         MOV     ?V2,A
   \   0000E2   F5..         MOV     ?V3,A
   \   0000E4   78..         MOV     R0,#?V0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000E9   7A01         MOV     R2,#0x1
   \   0000EB   7B00         MOV     R3,#0x0
   \   0000ED   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000F5   7404         MOV     A,#0x4
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    568                }
    569              }
    570            }
    571            else if ( Req.scanDuration == 0xFF )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
   \   0000FD   74FF         MOV     A,#-0x1
   \   0000FF   69           XRL     A,R1
   \   000100   7055         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
    572            {
    573              // Request is to change apsChannelMask and nwkManagerAddr
    574              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   000102   7406         MOV     A,#0x6
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00010A   4003         JC      $+5
   \   00010C   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    575              {
    576                NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
   \   00010F                ; Setup parameters for call to function NLME_SetUpdateID
   \   00010F   12....       LCALL   ??NLME_SetUpdateID?relay; Banked call to: NLME_SetUpdateID
    577                 
    578                if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   12....       LCALL   ?XLOAD_R0123
   \   00011B   E8           MOV     A,R0
   \   00011C   49           ORL     A,R1
   \   00011D   4A           ORL     A,R2
   \   00011E   4B           ORL     A,R3
   \   00011F   6027         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   78..         MOV     R0,#?V0
   \   000129   12....       LCALL   ?L_MOV_X
   \   00012C   90....       MOV     DPTR,#_NIB + 36
   \   00012F   78..         MOV     R0,#?V0
   \   000131   12....       LCALL   ?L_EQ_X
   \   000134   6012         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
    579                {
    580                  _NIB.channelList = Req.channelMask;
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   12....       LCALL   ?XLOAD_R0123
   \   00013F   90....       MOV     DPTR,#_NIB + 36
   \   000142   12....       LCALL   ?XSTORE_R0123
    581                
    582                  // Our Channel List has been changed -- notify to save info into NV
    583                  ZDApp_NwkStateUpdateCB();
   \   000145                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000145   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
    584                }
    585              
    586                ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
   \   000148                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   000148   7407         MOV     A,#0x7
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   FA           MOV     R2,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay; Banked call to: ZDNwkMgr_SetNwkManagerAddr
   \   000155   8045         SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    587              }
    588            }
    589            else // 0x06-0xFD
    590            {
    591              // Request is invalid
    592              if ( !inMsg->wasBroadcast )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
   \   000157   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00015A   7040         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    593              {
    594                ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00015C   12....       LCALL   ?Subroutine4 & 0xFFFF
    595                ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
    596                                         ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
   \                     ??CrossCallReturnLabel_16:
   \   00015F                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   00015F   75..00       MOV     ?V2,#0x0
   \   000162   78..         MOV     R0,#?V2
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000167   78..         MOV     R0,#?V2
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016C   E4           CLR     A
   \   00016D   F5..         MOV     ?V3,A
   \   00016F   78..         MOV     R0,#?V2
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   78..         MOV     R0,#?V2
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000179   78..         MOV     R0,#?V2
   \   00017B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017E   90....       MOV     DPTR,#__Constant_0
   \   000181   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000184   7D00         MOV     R5,#0x0
   \   000186   7C80         MOV     R4,#-0x80
   \   000188   7A..         MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
   \   00018A   7B..         MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
   \   00018C   85..82       MOV     DPL,?V0
   \   00018F   85..83       MOV     DPH,?V1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F9           MOV     R1,A
   \   000194   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay; Banked call to: ZDP_MgmtNwkUpdateNotify
   \   000197   740C         MOV     A,#0xc
   \   000199   12....       LCALL   ?DEALLOC_XSTACK8
    597              }
    598            }
    599          }
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
   \   00019C   7409         MOV     A,#0x9
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1                REQUIRE ?Subroutine2
   \   0001A1                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   90....       MOV     DPTR,#_NIB + 109
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   99           SUBB    A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine11_0
   \   000006                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000006                REQUIRE ??Subroutine12_0
   \   000006                ; // Fall through to label ??Subroutine12_0
    600          
    601          /*********************************************************************
    602           * @fn      ZDNwkMgr_ProcessServerDiscRsp
    603           *
    604           * @brief   Process the incoming System Server Discovery Response
    605           *
    606           * @param   pRsp - Structure containing Server Discovery response
    607           *
    608           * @return  none
    609           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessServerDiscRsp:
    611          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    612            ZDO_ServerDiscRsp_t Rsp;
    613            
    614            ZDO_ParseServerDiscRsp( inMsg, &Rsp );
   \   00000E                ; Setup parameters for call to function ZDO_ParseServerDiscRsp
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   ??ZDO_ParseServerDiscRsp?relay; Banked call to: ZDO_ParseServerDiscRsp
    615            
    616            if ( Rsp.status == ZSuccess )
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   7018         JNZ     ??ZDNwkMgr_ProcessServerDiscRsp_0
    617            {
    618              // Is the Network Manager bit set in the response?
    619              if ( Rsp.serverMask & NETWORK_MANAGER )
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   5440         ANL     A,#0x40
   \   000026   600E         JZ      ??ZDNwkMgr_ProcessServerDiscRsp_0
    620              {
    621                // Set the Remote Device's NWK Address as the Network Manager Address
    622                ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
   \   000028                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay; Banked call to: ZDNwkMgr_SetNwkManagerAddr
    623              }
    624            }
    625          }
   \                     ??ZDNwkMgr_ProcessServerDiscRsp_0:
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   02....       LJMP    ?Subroutine0 & 0xFFFF
    626          
    627          /*********************************************************************
    628           * @fn          ZDNwkMgr_ProcessChannelInterference
    629           *
    630           * @brief       This function processes the incoming Channel Interference
    631           *              detection message and sends out a notify (if needed).
    632           *
    633           * @param       pChannelInterference - interference message
    634           *
    635           * @return      none
    636           */
    637          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
    638          {
    639            // To avoid a device with communication problems from constantly 
    640            // sending reports to the network manager, the device should not 
    641            // send a Mgmt_NWK_Update_notify more than 4 times per hour.
    642            if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
    643            {
    644              // Conduct an energy scan on all channels.
    645              if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
    646              {
    647                // Save the counters for the Update Notify message to be sent
    648                ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
    649                ZDNwkMgr_TxFailures = pChanInterference->txFailures;
    650          
    651                // Mark scan as channel inetrference check
    652                ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
    653              }
    654            }
    655          }
    656          
    657          /*********************************************************************
    658           * @fn          ZDNwkMgr_ProcessEDScanConfirm
    659           *
    660           * @brief       This function processes the incoming ED Scan Confirm
    661           *              message and sends out a notify (if needed).
    662           *
    663           * @param       pEDScanConfirm - SD Scan Confirmation message
    664           *
    665           * @return      none
    666           */
    667          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
    668          { 
    669            if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
    670            {
    671              // Confirm to scan all channels for channel interference check
    672              ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
    673              
    674              ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
    675            }
    676            else
    677            {
    678              // Confirm to the requested scan
    679              uint16 txFailures = nwkTransmissionFailures( FALSE );
    680              
    681              ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
    682                                                 &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    683                                                 _NIB.nwkTotalTransmissions, txFailures, 
    684                                                 pEDScanConfirm, AF_TX_OPTIONS_NONE );
    685              // More scans needed?
    686              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
    687              {
    688                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
    689              }
    690            }
    691          }
    692          
    693          /*********************************************************************
    694           * @fn          ZDNwkMgr_CheckForChannelInterference
    695           *
    696           * @brief       This function processes the incoming ED Scan Confirm
    697           *              message and sends out an Update Notify (if needed).
    698           *
    699           * @param       pEDScanConfirm - SD Scan Confirmation message
    700           *
    701           * @return      none
    702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
   \                     ZDNwkMgr_CheckForChannelInterference:
    704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    705            uint8 i;
    706            uint8 channelEnergy = 0;
   \   000009   7D00         MOV     R5,#0x0
    707            uint8 energyIncreased = FALSE;
    708              
    709            // Get the current channel energy
    710            if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
   \   00000B   90....       MOV     DPTR,#_NIB + 22
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FC           MOV     R4,A
   \   000010   EA           MOV     A,R2
   \   000011   2403         ADD     A,#0x3
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V5
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   0A           INC     R2
   \   000019   FB           MOV     R3,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?L_MOV_X
   \   000023   EC           MOV     A,R4
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?UL_SHR
   \   000029   E5..         MOV     A,?V0
   \   00002B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002D   5007         JNC     ??ZDNwkMgr_CheckForChannelInterference_0
    711            {
    712              channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
   \   00002F   E5..         MOV     A,?V4
   \   000031   2C           ADD     A,R4
   \   000032   12....       LCALL   ?Subroutine9 & 0xFFFF
    713            }
   \                     ??CrossCallReturnLabel_8:
   \   000035   FD           MOV     R5,A
    714              
    715            // If this energy scan does not indicate higher energy on the current 
    716            // channel then other channels, no action is taken. The device should 
    717            // continue to operate as normal and the message counters are not reset.
    718            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??ZDNwkMgr_CheckForChannelInterference_0:
   \   000036   7900         MOV     R1,#0x0
    719            {
    720              if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
    721                   ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
   \                     ??ZDNwkMgr_CheckForChannelInterference_1:
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?L_MOV_X
   \   000041   E9           MOV     A,R1
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?UL_SHR
   \   000047   E5..         MOV     A,?V0
   \   000049   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004B   5068         JNC     ??ZDNwkMgr_CheckForChannelInterference_2
   \   00004D   E5..         MOV     A,?V4
   \   00004F   29           ADD     A,R1
   \   000050   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000053   C3           CLR     C
   \   000054   9D           SUBB    A,R5
   \   000055   505E         JNC     ??ZDNwkMgr_CheckForChannelInterference_2
    722              {
    723                energyIncreased = TRUE;
    724                break;
    725              }
    726            }
    727              
    728            // If the energy scan does indicate increased energy on the channel
    729            // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
    730            // Manager to indicate interference is present.
    731            if ( energyIncreased )
    732            {
    733              // Send a Management Network Update notify to the Network Manager
    734              ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
   \   000057   90....       MOV     DPTR,#_NIB + 105
   \   00005A   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    735              ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    736                                                 ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
    737                                                 pEDScanConfirm, AF_MSG_ACK_REQUEST );
   \                     ??CrossCallReturnLabel_14:
   \   00005D                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   00005D   75..10       MOV     ?V0,#0x10
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   78..         MOV     R0,#?V4
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   00006D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000070   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   000073   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000076   7900         MOV     R1,#0x0
   \   000078   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay; Banked call to: ZDNwkMgr_BuildAndSendUpdateNotify
   \   00007B   7405         MOV     A,#0x5
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    738              ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
   \   000080   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000083   7401         MOV     A,#0x1
   \   000085   F0           MOVX    @DPTR,A
    739                
    740              if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
   \   000086   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   7020         JNZ     ??ZDNwkMgr_CheckForChannelInterference_3
    741              {
    742                // First notify message sent within this hour. Start the Update Notify timer.
    743                ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
   \   00008C   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   00008F   743C         MOV     A,#0x3c
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    744                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   000095                ; Setup parameters for call to function osal_start_timerEx
   \   000095   90....       MOV     DPTR,#__Constant_ea60
   \   000098   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00009B   7A02         MOV     R2,#0x2
   \   00009D   7B00         MOV     R3,#0x0
   \   00009F   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
    745              }
    746              
    747              ZDNwkMgr_NumUpdateNotifySent++;
   \                     ??ZDNwkMgr_CheckForChannelInterference_3:
   \   0000AC   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   04           INC     A
   \   0000B1   F0           MOVX    @DPTR,A
    748            }
    749          #if defined ( LCD_SUPPORTED )
    750            else
    751            {
    752              HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
    753              HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
    754            }
    755          #endif
    756          }
   \                     ??ZDNwkMgr_CheckForChannelInterference_4:
   \   0000B2   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??ZDNwkMgr_CheckForChannelInterference_2:
   \   0000B5   09           INC     R1
   \   0000B6   E9           MOV     A,R1
   \   0000B7   C3           CLR     C
   \   0000B8   941B         SUBB    A,#0x1b
   \   0000BA   50F6         JNC     ??ZDNwkMgr_CheckForChannelInterference_4
   \   0000BC   02....       LJMP    ??ZDNwkMgr_CheckForChannelInterference_1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET
    757          
    758          /*********************************************************************
    759           * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
    760           *
    761           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
    762           *              function sends a unicast message.
    763           *
    764           * @param       TransSeq - transaction sequence number
    765           * @param       dstAddr - destination address of the message
    766           * @param       pEDScanConfirm - update notify info
    767           *
    768           * @return      afStatus_t
    769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDNwkMgr_BuildAndSendUpdateNotify:
    771                                                         uint16 totalTransmissions, uint16 txFailures,
    772                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
    773                                                         uint8 txOptions )
    774          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V9,R1
   \   000007   8A..         MOV     ?V12,R2
   \   000009   8B..         MOV     ?V13,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    775            uint8 i;
    776            uint8 listCount = 0;
   \   00000F   75..00       MOV     ?V8,#0x0
    777            uint8 *energyValues = NULL;
   \   000012   75..00       MOV     ?V0,#0x0
   \   000015   75..00       MOV     ?V1,#0x0
    778            
    779            // Count number of energy detects
    780            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000018   7900         MOV     R1,#0x0
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V10,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V11,A
   \   000026   E5..         MOV     A,?V10
   \   000028   2403         ADD     A,#0x3
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V11
   \   00002F   F5..         MOV     ?V3,A
    781            {
    782              if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_0:
   \   000031   85..82       MOV     DPL,?V2
   \   000034   85..83       MOV     DPH,?V3
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?L_MOV_X
   \   00003C   E9           MOV     A,R1
   \   00003D   78..         MOV     R0,#?V4
   \   00003F   12....       LCALL   ?UL_SHR
   \   000042   E5..         MOV     A,?V4
   \   000044   A2E0         MOV     C,0xE0 /* A   */.0
   \   000046   5002         JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_1
    783                listCount++;
   \   000048   05..         INC     ?V8
    784            }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_1:
   \   00004A   09           INC     R1
   \   00004B   E9           MOV     A,R1
   \   00004C   C3           CLR     C
   \   00004D   941B         SUBB    A,#0x1b
   \   00004F   40E0         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
    785            
    786            if ( listCount > 0 )
   \   000051   E5..         MOV     A,?V8
   \   000053   6052         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    787            {
    788              energyValues = (uint8 *)osal_mem_alloc( listCount );
   \   000055                ; Setup parameters for call to function osal_mem_alloc
   \   000055   FA           MOV     R2,A
   \   000056   7B00         MOV     R3,#0x0
   \   000058   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV     ?V0,R2
   \   00005D   8B..         MOV     ?V1,R3
    789              if ( energyValues )
   \   00005F   EA           MOV     A,R2
   \   000060   45..         ORL     A,?V1
   \   000062   6043         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    790              {
    791                uint8 j = 0;
   \   000064   7A00         MOV     R2,#0x0
    792          
    793                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000066   7900         MOV     R1,#0x0
    794                {
    795                  if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_3:
   \   000068   85..82       MOV     DPL,?V2
   \   00006B   85..83       MOV     DPH,?V3
   \   00006E   78..         MOV     R0,#?V4
   \   000070   12....       LCALL   ?L_MOV_X
   \   000073   E9           MOV     A,R1
   \   000074   78..         MOV     R0,#?V4
   \   000076   12....       LCALL   ?UL_SHR
   \   000079   E5..         MOV     A,?V4
   \   00007B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007D   5021         JNC     ??ZDNwkMgr_BuildAndSendUpdateNotify_4
    796                    energyValues[j++] = pEDScanConfirm->energyDetectList[i];
   \   00007F   E5..         MOV     A,?V10
   \   000081   29           ADD     A,R1
   \   000082   F582         MOV     DPL,A
   \   000084   E4           CLR     A
   \   000085   35..         ADDC    A,?V11
   \   000087   F583         MOV     DPH,A
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   E5..         MOV     A,?V0
   \   000095   2A           ADD     A,R2
   \   000096   F582         MOV     DPL,A
   \   000098   E4           CLR     A
   \   000099   3B           ADDC    A,R3
   \   00009A   F583         MOV     DPH,A
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   0A           INC     R2
    797                }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_4:
   \   0000A0   09           INC     R1
   \   0000A1   E9           MOV     A,R1
   \   0000A2   C3           CLR     C
   \   0000A3   941B         SUBB    A,#0x1b
   \   0000A5   40C1         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    798              }
    799            }
    800              
    801            // Send a Management Network Update notify back
    802            ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
    803                                     pEDScanConfirm->scannedChannels,
    804                                     totalTransmissions, txFailures,
    805                                     listCount, energyValues, txOptions, false );
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_2:
   \   0000A7                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   0000A7   75..00       MOV     ?V4,#0x0
   \   0000AA   78..         MOV     R0,#?V4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AF   741B         MOV     A,#0x1b
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F5..         MOV     ?V4,A
   \   0000B7   78..         MOV     R0,#?V4
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   741A         MOV     A,#0x1a
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C9   8E..         MOV     ?V4,R6
   \   0000CB   8F..         MOV     ?V5,R7
   \   0000CD   78..         MOV     R0,#?V4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   85..82       MOV     DPL,?V2
   \   0000D5   85..83       MOV     DPH,?V3
   \   0000D8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DB   AD..         MOV     R5,?V8
   \   0000DD   85..82       MOV     DPL,?V10
   \   0000E0   85..83       MOV     DPH,?V11
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   FC           MOV     R4,A
   \   0000E7   AA..         MOV     R2,?V12
   \   0000E9   AB..         MOV     R3,?V13
   \   0000EB   A9..         MOV     R1,?V9
   \   0000ED   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay; Banked call to: ZDP_MgmtNwkUpdateNotify
   \   0000F0   740C         MOV     A,#0xc
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
    806            if ( energyValues )
   \   0000F5   E5..         MOV     A,?V0
   \   0000F7   45..         ORL     A,?V1
   \   0000F9   6007         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
    807              osal_mem_free( energyValues );
   \   0000FB                ; Setup parameters for call to function osal_mem_free
   \   0000FB   AA..         MOV     R2,?V0
   \   0000FD   AB..         MOV     R3,?V1
   \   0000FF   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    808          }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_5:
   \   000102   7F0E         MOV     R7,#0xe
   \   000104   02....       LJMP    ?BANKED_LEAVE_XDATA
    809          
    810          #if defined ( NWK_MANAGER )
    811          /*********************************************************************
    812           * @fn      NwkMgr_SetNwkManager
    813           *
    814           * @brief   Set the local device as the Network Manager
    815           *
    816           * @param   none
    817           *
    818           * @return  none
    819           */
    820          void NwkMgr_SetNwkManager( void )
    821          {
    822            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    823            {
    824              // We're the Network Manager. Set our address as the Network Manager Address
    825              ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
    826              
    827              // Set the Network Manager bit of the Server Mask
    828              ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
    829            }
    830          }
    831          #endif // NWK_MANAGER
    832          
    833          /*********************************************************************
    834           * @fn      ZDApp_SetNwkManagerAddr()
    835           *
    836           * @brief   Sets the nwkManagerAddr in NIB.
    837           *
    838           * @param   nwkManagerAddr
    839           *
    840           * @return  none
    841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    842          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
   \                     ZDNwkMgr_SetNwkManagerAddr:
    843          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    844            if ( _NIB.nwkManagerAddr != nwkManagerAddr )
   \   000004   90....       MOV     DPTR,#_NIB + 105
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6A           XRL     A,R2
   \   000009   7003         JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6B           XRL     A,R3
   \                     ??ZDNwkMgr_SetNwkManagerAddr_0:
   \   00000E   600B         JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
    845            {
    846              // Update the Network Manager Address
    847              _NIB.nwkManagerAddr = nwkManagerAddr;
   \   000010   90....       MOV     DPTR,#_NIB + 105
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
    848            
    849              // Our Network Manger Address has been changed -- notify to save info into NV
    850              ZDApp_NwkStateUpdateCB();
   \   000018                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000018   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay; Banked call to: ZDApp_NwkStateUpdateCB
    851            }
    852          }
   \                     ??ZDNwkMgr_SetNwkManagerAddr_1:
   \   00001B                REQUIRE ?Subroutine3
   \   00001B                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    853          
    854          /*********************************************************************
    855           * @fn          ZDNwkMgr_ReportChannelInterference
    856           *
    857           * @brief       This function builds a Channel Interference detection
    858           *              message and then forwards it to the Network Manager.
    859           *
    860           * @param       chanInterference
    861           *
    862           * @return      none
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
   \                     ZDNwkMgr_ReportChannelInterference:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    866            ZDNwkMgr_ChanInterference_t *pChanInterference;
    867          
    868            // Send Channel Interference message to the Network Manager task
    869            pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
    870            if ( pChanInterference )
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6027         JZ      ??ZDNwkMgr_ReportChannelInterference_0
    871            {
    872              pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   7431         MOV     A,#0x31
   \   00001A   F0           MOVX    @DPTR,A
    873                
    874              // Build the structure
    875              pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000022   12....       LCALL   ??Subroutine12_0 & 0xFFFF
    876              pChanInterference->txFailures = chanInterference->txFailures;
   \                     ??CrossCallReturnLabel_12:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine12_0 & 0xFFFF
    877                        
    878              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
   \                     ??CrossCallReturnLabel_13:
   \   000033                ; Setup parameters for call to function osal_msg_send
   \   000033   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    879            }
    880          }
   \                     ??ZDNwkMgr_ReportChannelInterference_0:
   \   00003B   7F02         MOV     R7,#0x2
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    881          
    882          /*********************************************************************
    883           * @fn          ZDNwkMgr_EDScanConfirmCB
    884           *
    885           * @brief       Handle Energy Scan confirm callback
    886           *
    887           * @param       scannedChannels  - scanned channels
    888           * @param       energyDetectList - measured energy for channels
    889           *
    890           * @return      none
    891           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    892          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
   \                     ZDNwkMgr_EDScanConfirmCB:
    893          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    894            ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
    895          
    896            // Send ED Confirm to the Network Manager task
    897            pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A22         MOV     R2,#0x22
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
    898            if ( pEDScanConfirm )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   6062         JZ      ??ZDNwkMgr_EDScanConfirmCB_0
    899            {
    900              pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   7432         MOV     A,#0x32
   \   000022   F0           MOVX    @DPTR,A
    901                
    902              // Build the structure
    903              pEDScanConfirm->status = EDScanConfirm->status;
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
    904              pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?XLOAD_R0123
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?XSTORE_R0123
    905              osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V1,A
   \   000057   75..00       MOV     ?V2,#0x0
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005F   7C1B         MOV     R4,#0x1b
   \   000061   7D00         MOV     R5,#0x0
   \   000063   EE           MOV     A,R6
   \   000064   2407         ADD     A,#0x7
   \   000066   FA           MOV     R2,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    906                
    907              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
   \   000072                ; Setup parameters for call to function osal_msg_send
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    908            }
    909          }
   \                     ??ZDNwkMgr_EDScanConfirmCB_0:
   \   00007E   02....       LJMP    ?Subroutine2 & 0xFFFF
    910          
    911          /*********************************************************************
    912           * @fn      ZDNwkMgr_ProcessDataConfirm
    913           *
    914           * @brief   Process received Confirmation for Mgmt NWK Update Notify message
    915           *
    916           * @param   none
    917           *
    918           * @return  none
    919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    920          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
   \                     ZDNwkMgr_ProcessDataConfirm:
    921          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    922            if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
    923                 ( afDataConfirm->transID == 0 )     && 
    924                 ( afDataConfirm->hdr.status == ZSuccess ) )
   \   000004   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6023         JZ      ??ZDNwkMgr_ProcessDataConfirm_0
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   7019         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7011         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
    925            {
    926              // The Mgmt NWK Update Notify was sent as an APS Unicast with  
    927              // acknowledgement and once the acknowledgment is received the 
    928              // total transmit and transmit failure counters are reset to zero.  
    929              _NIB.nwkTotalTransmissions = 0;
   \   00001C   90....       MOV     DPTR,#_NIB + 107
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
    930              nwkTransmissionFailures( TRUE );
   \   000023                ; Setup parameters for call to function nwkTransmissionFailures
   \   000023   7901         MOV     R1,#0x1
   \   000025   12....       LCALL   ??nwkTransmissionFailures?relay; Banked call to: nwkTransmissionFailures
    931              
    932              ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \   000028   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    933            }
    934          }
   \                     ??ZDNwkMgr_ProcessDataConfirm_0:
   \   00002D   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ea60:
   \   000000   60EA0000     DD 60000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_CheckForChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_CheckForChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_BuildAndSendUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_SetNwkManagerAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_SetNwkManagerAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ReportChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ReportChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_EDScanConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_EDScanConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessDataConfirm
    935          
    936          /*********************************************************************
    937           * PAN ID Conflict Routines
    938           */
    939          #if defined ( NWK_MANAGER )
    940          /*********************************************************************
    941           * @fn          ZDNwkMgr_NetworkReportCB
    942           *
    943           * @brief       Handle the Network Report Command
    944           *
    945           * @param       srcAddr     - Source Address of the message.
    946           * @param       status      - ZSuccess.
    947           * @param       serverMask  - Bit mask of services matching the req serverMask.
    948           * @param       securityUse -
    949           *
    950           * @return      none
    951           */
    952          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
    953          { 
    954            // Send Network Report message to the Network Manager task
    955            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
    956          }
    957          
    958          /*********************************************************************
    959           * @fn          ZDNwkMgr_NetworkUpdateCB
    960           *
    961           * @brief       Handle the Network Update Command
    962           *
    963           * @param       srcAddr     - Source Address of the message.
    964           * @param       status      - ZSuccess.
    965           * @param       serverMask  - Bit mask of services matching the req serverMask.
    966           * @param       securityUse -
    967           *
    968           * @return      none
    969           */
    970          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
    971          {
    972            // Send Network Update message to the Network Manager task
    973            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
    974          }
    975          
    976          /*********************************************************************
    977           * @fn      ZDNwkMgr_ProcessNetworkReport
    978           *
    979           * @brief   Process the incoming Network Report message
    980           *
    981           * @param   pNetworkReport - Structure containing Network Report message
    982           *
    983           * @return  none
    984           */
    985          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
    986          {
    987            uint8 i;
    988            uint16 newPID;
    989            uint8 unique = TRUE;
    990          
    991            if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
    992            {
    993              if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
    994              {
    995                do
    996                {
    997                  // select a new PAN ID
    998                  newPID = (uint16)osal_rand();
    999                
   1000                  // Make sure that the chosen PAN ID is not already in use in the
   1001                  // local neighborhood and also not contained within the Report 
   1002                  // Information field of the Network Report Command frame
   1003                  for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
   1004                  {
   1005                    if ( pNetworkReport->panIDs[i] == newPID )
   1006                    {
   1007                      unique = FALSE;
   1008                      break;
   1009                    }
   1010                  }
   1011                } while ( !unique );
   1012                   
   1013                // Send out a Network Update command.
   1014                NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
   1015                                        _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
   1016              
   1017                ZDNwkMgr_PanIdUpdateInProgress = TRUE;
   1018              }
   1019            }
   1020          }
   1021          
   1022          /*********************************************************************
   1023           * @fn      ZDNwkMgr_ProcessNetworkUpdate
   1024           *
   1025           * @brief   Process the incoming Network Update message
   1026           *
   1027           * @param   pNetworkReport - Structure containing Network Update message
   1028           *
   1029           * @return  none
   1030           */
   1031          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
   1032          {
   1033            if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
   1034            { 
   1035              // Our PAN ID has been changed -- notify to save info into NV
   1036              ZDApp_NwkStateUpdateCB();
   1037              
   1038              ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   1039            }
   1040          }
   1041          #endif // NWK_MANAGER
   1042          
   1043          
   1044          /*********************************************************************
   1045          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     53   ZDNwkMgr_BuildAndSendUpdateNotify
        0     34   -> ZDP_MgmtNwkUpdateNotify
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      0     33   ZDNwkMgr_CheckForChannelInterference
        0     19   -> ZDNwkMgr_BuildAndSendUpdateNotify
        0     18   -> osal_start_timerEx
      1     15   ZDNwkMgr_EDScanConfirmCB
        0     15   -> osal_memcpy
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0      9   ZDNwkMgr_Init
        0      9   -> ZDO_RegisterForZDOMsg
      2      0   ZDNwkMgr_ProcessDataConfirm
        2      0   -> nwkTransmissionFailures
      0     47   ZDNwkMgr_ProcessMgmtNwkUpdateReq
        0     21   -> NLME_EDScanRequest
        0     21   -> NLME_SetUpdateID
        0     21   -> ZDApp_NwkStateUpdateCB
        0     21   -> ZDNwkMgr_SetNwkManagerAddr
        0     21   -> ZDO_ParseMgmtNwkUpdateReq
        0     33   -> ZDP_MgmtNwkUpdateNotify
        0     25   -> osal_start_timerEx
      0     26   ZDNwkMgr_ProcessServerDiscRsp
        0     12   -> ZDNwkMgr_SetNwkManagerAddr
        0     12   -> ZDO_ParseServerDiscRsp
      0     10   ZDNwkMgr_ReportChannelInterference
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      2     21   ZDNwkMgr_SetNwkManagerAddr
        2      0   -> ZDApp_NwkStateUpdateCB
      0     19   ZDNwkMgr_event_loop
        0     14   -> NLME_EDScanRequest
        0     14   -> ZDApp_NwkStateUpdateCB
        0     19   -> ZDNwkMgr_BuildAndSendUpdateNotify
        0     14   -> ZDNwkMgr_CheckForChannelInterference
        0     14   -> ZDNwkMgr_ProcessMgmtNwkUpdateReq
        0     14   -> ZDNwkMgr_ProcessServerDiscRsp
        0     14   -> ZMacSetReq
        0     14   -> nwkTransmissionFailures
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine11_0
       6  ??Subroutine12_0
       6  ??Subroutine13_0
       6  ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
       6  ??ZDNwkMgr_CheckForChannelInterference?relay
       6  ??ZDNwkMgr_EDScanConfirmCB?relay
       6  ??ZDNwkMgr_Init?relay
       6  ??ZDNwkMgr_ProcessDataConfirm?relay
       6  ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay
       6  ??ZDNwkMgr_ProcessServerDiscRsp?relay
       6  ??ZDNwkMgr_ReportChannelInterference?relay
       6  ??ZDNwkMgr_SetNwkManagerAddr?relay
       6  ??ZDNwkMgr_event_loop?relay
       5  ?Subroutine0
       5  ?Subroutine1
       2  ?Subroutine10
       5  ?Subroutine2
       7  ?Subroutine3
       6  ?Subroutine4
      10  ?Subroutine5
      10  ?Subroutine6
      11  ?Subroutine7
       9  ?Subroutine8
      16  ?Subroutine9
     263  ZDNwkMgr_BuildAndSendUpdateNotify
     191  ZDNwkMgr_CheckForChannelInterference
     129  ZDNwkMgr_EDScanConfirmCB
      74  ZDNwkMgr_Init
       9  ZDNwkMgr_MgmtNwkUpdateNotifyAddr
       1  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
       9  ZDNwkMgr_MgmtNwkUpdateReq
       1  ZDNwkMgr_NewChannel
       1  ZDNwkMgr_NumUpdateNotifySent
      48  ZDNwkMgr_ProcessDataConfirm
     417  ZDNwkMgr_ProcessMgmtNwkUpdateReq
      62  ZDNwkMgr_ProcessServerDiscRsp
      64  ZDNwkMgr_ReportChannelInterference
      27  ZDNwkMgr_SetNwkManagerAddr
       1  ZDNwkMgr_TaskID
       2  ZDNwkMgr_TotalTransmissions
       2  ZDNwkMgr_TxFailures
       2  ZDNwkMgr_UpdateNotifyTimer
       1  ZDNwkMgr_WaitingForNotifyConfirm
     441  ZDNwkMgr_event_loop
       4  __Constant_0
       4  __Constant_32
       4  __Constant_7fff800
       4  __Constant_ea60
       2  pZDNwkMgr_EDScanConfirmCB
       2  pZDNwkMgr_NetworkReportCB
       2  pZDNwkMgr_NetworkUpdateCB
       2  pZDNwkMgr_ProcessDataConfirm
       2  pZDNwkMgr_ReportChannelInterference

 
 1 820 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_ROM_C
    39 bytes in segment XDATA_Z
 
 1 880 bytes of CODE  memory
     0 bytes of CONST memory (+ 16 bytes shared)
    39 bytes of XDATA memory

Errors: none
Warnings: none

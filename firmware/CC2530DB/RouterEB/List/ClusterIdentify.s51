///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            04/Nov/2015  21:35:19 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterIdentify.c             /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterIdentify.c -D          /
//                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D     /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ClusterIdentify.s51    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ClusterIdentify

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_Z

        PUBLIC ??identifyClusterReadAttribute?relay
        FUNCTION ??identifyClusterReadAttribute?relay,0203H
        PUBLIC ??identifyClusterWriteAttribute?relay
        FUNCTION ??identifyClusterWriteAttribute?relay,0203H
        PUBLIC ??identifyInit?relay
        FUNCTION ??identifyInit?relay,0203H
        PUBLIC ??identifyLoop?relay
        FUNCTION ??identifyLoop?relay,0203H
        PUBLIC ??processIdentifyClusterClientCommands?relay
        FUNCTION ??processIdentifyClusterClientCommands?relay,0203H
        PUBLIC ??processIdentifyClusterServerCommands?relay
        FUNCTION ??processIdentifyClusterServerCommands?relay,0203H
        PUBLIC ??processIdentifyTimeChange?relay
        FUNCTION ??processIdentifyTimeChange?relay,0203H
        PUBWEAK _A_DIR0_7
        PUBWEAK _A_P0
        PUBWEAK _A_P0SEL_7
        PUBWEAK __Constant_190
        PUBWEAK __Constant_258
        PUBLIC identifyClusterReadAttribute
        FUNCTION identifyClusterReadAttribute,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC identifyClusterWriteAttribute
        FUNCTION identifyClusterWriteAttribute,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC identifyInit
        FUNCTION identifyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC identifyLoop
        FUNCTION identifyLoop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC processIdentifyClusterClientCommands
        FUNCTION processIdentifyClusterClientCommands,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC processIdentifyClusterServerCommands
        FUNCTION processIdentifyClusterServerCommands,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC processIdentifyTimeChange
        FUNCTION processIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_pwrmgr_task_state SYMBOL "osal_pwrmgr_task_state"
??osal_pwrmgr_task_state?relay SYMBOL "?relay", osal_pwrmgr_task_state
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
identifyClusterReadAttribute SYMBOL "identifyClusterReadAttribute"
??identifyClusterReadAttribute?relay SYMBOL "?relay", identifyClusterReadAttribute
identifyClusterWriteAttribute SYMBOL "identifyClusterWriteAttribute"
??identifyClusterWriteAttribute?relay SYMBOL "?relay", identifyClusterWriteAttribute
identifyInit        SYMBOL "identifyInit"
??identifyInit?relay SYMBOL "?relay", identifyInit
identifyLoop        SYMBOL "identifyLoop"
??identifyLoop?relay SYMBOL "?relay", identifyLoop
processIdentifyClusterClientCommands SYMBOL "processIdentifyClusterClientCommands"
??processIdentifyClusterClientCommands?relay SYMBOL "?relay", processIdentifyClusterClientCommands
processIdentifyClusterServerCommands SYMBOL "processIdentifyClusterServerCommands"
??processIdentifyClusterServerCommands?relay SYMBOL "?relay", processIdentifyClusterServerCommands
processIdentifyTimeChange SYMBOL "processIdentifyTimeChange"
??processIdentifyTimeChange?relay SYMBOL "?relay", processIdentifyTimeChange

        EXTERN ??osal_pwrmgr_task_state?relay
        FUNCTION ??osal_pwrmgr_task_state?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN osal_pwrmgr_task_state
        FUNCTION osal_pwrmgr_task_state,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Source\clusters\ClusterIdentify.c
//    1 /**************************************************************************************************
//    2   Filename:       ClusterIdentify.cpp
//    3 
//    4   Autorh:  Paolo Achdjia
//    5   Created: 28/10/2014
//    6 
//    7 **************************************************************************************************/
//    8 
//    9 #include "OSAL.h"
//   10 #include "OSAL_PwrMgr.h"
//   11 #include "hal_led.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1
//   12 
//   13 #include "ClusterIdentify.h"
//   14 
//   15 #define ON_TIME 600
//   16 #define OFF_TIME 400
//   17 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   18 static uint16 identifyTime=0;
identifyTime:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   19 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 static byte mainAppTaskId;
mainAppTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   21 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 static uint8  onOff;
onOff:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   23 
//   24 __sfr __no_init volatile struct  {
//   25 	unsigned char DIR0_7: 1;
//   26 	unsigned char DIR0_6: 1;
//   27 	unsigned char DIR0_5: 1;
//   28 	unsigned char DIR0_4: 1;
//   29 	unsigned char DIR0_3: 1;
//   30 	unsigned char DIR0_2: 1;
//   31 	unsigned char DIR0_1: 1;
//   32 	unsigned char DIR0_0: 1;

        ASEGN SFR_AN:DATA:NOROOT,0fdH
//   33 } @ 0xFD;
_A_DIR0_7:
        DATA8
        DS 1
//   34 
//   35 __sfr __no_init volatile struct  {
//   36 	unsigned char P0SEL_7: 1;
//   37 	unsigned char P0SEL_6: 1;
//   38 	unsigned char P0SEL_5: 1;
//   39 	unsigned char P0SEL_4: 1;
//   40 	unsigned char P0SEL_3: 1;
//   41 	unsigned char P0SEL_2: 1;
//   42 	unsigned char P0SEL_1: 1;
//   43 	unsigned char P0SEL_0: 1;

        ASEGN SFR_AN:DATA:NOROOT,0f3H
//   44 } @ 0xF3;
_A_P0SEL_7:
        DATA8
        DS 1
//   45 
//   46 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   47 void identifyClusterReadAttribute(zclAttrRec_t * attribute){
identifyClusterReadAttribute:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function identifyClusterReadAttribute
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   48 	if (attribute == NULL){
        MOV     A,R2
        ORL     A,R3
        JZ      ??identifyClusterReadAttribute_0
//   49 		return;
//   50 	}
//   51 	
//   52 	if (attribute->attr.attrId == ATTRID_IDENTIFY_TIME){
        MOV     A,R2
        ADD     A,#0xa
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??identifyClusterReadAttribute_1
//   53 		attribute->attr.dataType = ZCL_DATATYPE_UINT16;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x21
        MOVX    @DPTR,A
//   54 		attribute->attr.dataPtr = (void *)&identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#identifyTime & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(identifyTime >> 8) & 0xff
        MOVX    @DPTR,A
//   55 		attribute->attr.status = ZCL_STATUS_SUCCESS;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        SJMP    ??identifyClusterReadAttribute_2
//   56 	} else {
//   57 		attribute->attr.status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??identifyClusterReadAttribute_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x7a
??identifyClusterReadAttribute_2:
        MOVX    @DPTR,A
//   58 	}
//   59 }
??identifyClusterReadAttribute_0:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void identifyClusterWriteAttribute(ZclWriteAttribute_t * writeAttribute){
identifyClusterWriteAttribute:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function identifyClusterWriteAttribute
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   61 	if (writeAttribute == NULL){
        MOV     A,R2
        ORL     A,R3
        JZ      ??identifyClusterWriteAttribute_0
//   62 		
//   63 		return;
//   64 	}
//   65 	
//   66 	if(writeAttribute->attrId == ATTRID_IDENTIFY_TIME){
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     ??identifyClusterWriteAttribute_1
//   67 		identifyTime = *(uint16 *)writeAttribute;
        MOV     DPTR,#identifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   68 		writeAttribute->status=ZCL_STATUS_SUCCESS;
        MOV     DPL,R0
        MOV     DPH,R1
        SJMP    ??identifyClusterWriteAttribute_2
//   69 	} else {
//   70 		writeAttribute->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??identifyClusterWriteAttribute_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x7a
??identifyClusterWriteAttribute_2:
        MOVX    @DPTR,A
//   71 	}
//   72 }
??identifyClusterWriteAttribute_0:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock1
//   73 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 void identifyInit(byte taskId){
identifyInit:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function identifyInit
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   75 	DIR0_1 = 1;
        ORL     0xfd,#0x40
//   76  	P0SEL_1 = 0;
        ANL     0xf3,#0xbf
//   77  	P0_1 = 0;
        CLR     0x80.1
//   78 	mainAppTaskId = taskId;
        MOV     A,R1
        MOV     DPTR,#mainAppTaskId
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock2
//   79 }
        REQUIRE ?Subroutine0
        REQUIRE _A_DIR0_7
        REQUIRE _A_P0SEL_7
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock3
//   80 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   81 uint16 identifyLoop(uint16 events){
identifyLoop:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function identifyLoop
        CODE
        FUNCALL identifyLoop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL identifyLoop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL identifyLoop, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL identifyLoop, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   82 	if (onOff){
        MOV     DPTR,#onOff
        MOVX    A,@DPTR
        JZ      ??identifyLoop_0
//   83 		osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, OFF_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_190
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//   84 		onOff=0;
        MOV     DPTR,#onOff
        CLR     A
        MOVX    @DPTR,A
//   85 		P0_0 = 1;
        SETB    0x80.0
        SJMP    ??identifyLoop_1
//   86 	} else {
//   87 		onOff=1;
??identifyLoop_0:
        MOV     A,#0x1
        MOVX    @DPTR,A
//   88 		if ( identifyTime > 0 ){
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ      ??identifyLoop_2
//   89     		identifyTime--;
//   90 		}
//   91     	if (identifyTime>0){
        MOV     DPTR,#identifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        DEC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??identifyLoop_2
//   92 			osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, ON_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//   93 			osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_HOLD);
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,#0x1
        SJMP    ??identifyLoop_3
//   94 			P0_0 = 0;
//   95 		} else{
//   96 			osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_CONSERVE);
??identifyLoop_2:
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,#0x0
??identifyLoop_3:
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
//   97 			P0_0 = 0;
        CLR     0x80.0
//   98 		}
//   99 	}
//  100     return ( events ^ IDENTIFY_TIMEOUT_EVT );
??identifyLoop_1:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
        REQUIRE _A_P0
//  101 }
//  102 
//  103 
//  104 /*********************************************************************
//  105  * @fn      processIdentifyTimeChange
//  106  *
//  107  * @brief   Called to process any change to the IdentifyTime attribute.
//  108  *
//  109  * @param   none
//  110  *
//  111  * @return  none
//  112  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  113 void processIdentifyTimeChange( void ){
processIdentifyTimeChange:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function processIdentifyTimeChange
        CODE
        FUNCALL processIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processIdentifyTimeChange, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processIdentifyTimeChange, osal_pwrmgr_task_state
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  114 	if ( identifyTime > 0 ) {
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??processIdentifyTimeChange_0
//  115 		osal_start_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT, ON_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  116 		onOff=1;
        MOV     DPTR,#onOff
        MOV     A,#0x1
        MOVX    @DPTR,A
//  117 		P0_0 = 1;
        SETB    0x80.0
//  118 		osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_HOLD);
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,A
        SJMP    ??processIdentifyTimeChange_1
//  119 	}  else {
//  120 		osal_stop_timerEx( mainAppTaskId, IDENTIFY_TIMEOUT_EVT );
??processIdentifyTimeChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
//  121 		osal_pwrmgr_task_state(mainAppTaskId, PWRMGR_CONSERVE);
        ; Setup parameters for call to function osal_pwrmgr_task_state
        MOV     R2,#0x0
??processIdentifyTimeChange_1:
        MOV     DPTR,#mainAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_pwrmgr_task_state?relay; Banked call to: osal_pwrmgr_task_state
//  122 	}
//  123 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function identifyLoop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function processIdentifyTimeChange
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-7
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function processIdentifyClusterServerCommands
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV     DPTR,#identifyTime
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
//  124 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 ZStatus_t processIdentifyClusterServerCommands( zclIncoming_t *pInMsg ){
processIdentifyClusterServerCommands:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function processIdentifyClusterServerCommands
        CODE
        FUNCALL processIdentifyClusterServerCommands, processIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processIdentifyClusterServerCommands, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  126 
//  127 	switch(pInMsg->hdr.commandID){
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??processIdentifyClusterServerCommands_0
        DEC     A
        JZ      ??processIdentifyClusterServerCommands_1
        LJMP    ??processIdentifyClusterServerCommands_2 & 0xFFFF
//  128 	case COMMAND_IDENTIFY:
//  129 		identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
??processIdentifyClusterServerCommands_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#identifyTime
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  130 		processIdentifyTimeChange();
        ; Setup parameters for call to function processIdentifyTimeChange
        LCALL   ??processIdentifyTimeChange?relay; Banked call to: processIdentifyTimeChange
//  131 		return ZSuccess;
        SJMP    ??processIdentifyClusterServerCommands_3
//  132 	case COMMAND_IDENTIFY_QUERY:
//  133 		if ( identifyTime > 0 ) {
??processIdentifyClusterServerCommands_1:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??processIdentifyClusterServerCommands_3
//  134 			zcl_SendCommand( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  135                          COMMAND_IDENTIFY_QUERY_RSP, TRUE,
//  136                          ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 0, pInMsg->hdr.transSeqNum, 2, (uint8 *) &identifyTime );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0,#identifyTime & 0xff
        MOV     ?V1,#(identifyTime >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        CLR     A
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  137 			return  ZCL_STATUS_CMD_HAS_RSP;
        MOV     R1,#-0x1
        SJMP    ??processIdentifyClusterServerCommands_4
//  138 	    } else {
//  139 			return ZSuccess;
??processIdentifyClusterServerCommands_3:
        MOV     R1,#0x0
        SJMP    ??processIdentifyClusterServerCommands_4
//  140 		}
//  141 	default:
//  142     	return ZFailure;   // Error ignore the command
??processIdentifyClusterServerCommands_2:
        MOV     R1,#0x1
??processIdentifyClusterServerCommands_4:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  143 	}
//  144 }
//  145 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  146 ZStatus_t processIdentifyClusterClientCommands( zclIncoming_t *pInMsg ){
processIdentifyClusterClientCommands:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function processIdentifyClusterClientCommands
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  147 	if ( pInMsg->hdr.commandID != COMMAND_IDENTIFY_QUERY_RSP )
//  148 		return ZFailure;
//  149 
//  150 	return ZFailure;
        MOV     R1,#0x1
        LJMP    ?BRET
          CFI EndBlock cfiBlock11
//  151 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_190:
        DD 400

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??identifyClusterReadAttribute?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    identifyClusterReadAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??identifyClusterWriteAttribute?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    identifyClusterWriteAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??identifyInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    identifyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??identifyLoop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    identifyLoop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processIdentifyTimeChange?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processIdentifyClusterServerCommands?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processIdentifyClusterServerCommands

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processIdentifyClusterClientCommands?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processIdentifyClusterClientCommands

        END
//  152 
// 
// 552 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   8 bytes in segment XDATA_ROM_C
//   4 bytes in segment XDATA_Z
// 
// 594 bytes of CODE  memory
//   0 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 3 bytes shared)
//   4 bytes of XDATA memory
//
//Errors: none
//Warnings: none

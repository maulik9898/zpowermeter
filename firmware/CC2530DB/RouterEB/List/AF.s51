///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            15/Oct/2015  21:15:44 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\af\AF.c                      /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\stack\af\AF.c -D SECURE=0 -D       /
//                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE   /
//                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN    /
//                          -D NV_INIT -D xNV_RESTORE -D                      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\AF.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,0203H
        PUBLIC ??AF_DataRequestSrcRtg?relay
        FUNCTION ??AF_DataRequestSrcRtg?relay,0203H
        PUBLIC ??afAPSF_ConfigGet?relay
        FUNCTION ??afAPSF_ConfigGet?relay,0203H
        PUBLIC ??afAPSF_ConfigSet?relay
        FUNCTION ??afAPSF_ConfigSet?relay,0203H
        FUNCTION ??afBuildMSGIncoming?relay,0203H
        PUBLIC ??afCopyAddress?relay
        FUNCTION ??afCopyAddress?relay,0203H
        PUBLIC ??afDataConfirm?relay
        FUNCTION ??afDataConfirm?relay,0203H
        PUBLIC ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,0203H
        PUBLIC ??afDelete?relay
        FUNCTION ??afDelete?relay,0203H
        PUBLIC ??afEndPoints?relay
        FUNCTION ??afEndPoints?relay,0203H
        PUBLIC ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,0203H
        FUNCTION ??afFindEndPointDescList?relay,0203H
        PUBLIC ??afFindSimpleDesc?relay
        FUNCTION ??afFindSimpleDesc?relay,0203H
        PUBLIC ??afGetMatch?relay
        FUNCTION ??afGetMatch?relay,0203H
        PUBLIC ??afIncomingData?relay
        FUNCTION ??afIncomingData?relay,0203H
        PUBLIC ??afNumEndPoints?relay
        FUNCTION ??afNumEndPoints?relay,0203H
        PUBLIC ??afReflectError?relay
        FUNCTION ??afReflectError?relay,0203H
        PUBLIC ??afRegister?relay
        FUNCTION ??afRegister?relay,0203H
        PUBLIC ??afRegisterExtended?relay
        FUNCTION ??afRegisterExtended?relay,0203H
        PUBLIC ??afSetApplCB?relay
        FUNCTION ??afSetApplCB?relay,0203H
        PUBLIC ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0a1203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afReflectError
        FUNCTION afReflectError,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetApplCB
        FUNCTION afSetApplCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
??APSDE_DataReq?relay SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
??APSDE_DataReqMTU?relay SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
??NLME_IsAddressBroadcast?relay SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
??RTG_AddSrcRtgEntry_Guaranteed?relay SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
??RTG_CheckRtStatus?relay SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
??aps_FindGroupForEndpoint?relay SYMBOL "?relay", aps_FindGroupForEndpoint
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
??AF_DataRequestSrcRtg?relay SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
??afAPSF_ConfigGet?relay SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
??afAPSF_ConfigSet?relay SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
??afCopyAddress?relay SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
??afDataConfirm?relay SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
??afDelete?relay    SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
??afEndPoints?relay SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
??afFindSimpleDesc?relay SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
??afGetMatch?relay  SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
??afIncomingData?relay SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
??afNumEndPoints?relay SYMBOL "?relay", afNumEndPoints
afReflectError      SYMBOL "afReflectError"
??afReflectError?relay SYMBOL "?relay", afReflectError
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
??afRegisterExtended?relay SYMBOL "?relay", afRegisterExtended
afSetApplCB         SYMBOL "afSetApplCB"
??afSetApplCB?relay SYMBOL "?relay", afSetApplCB
afSetMatch          SYMBOL "afSetMatch"
??afSetMatch?relay  SYMBOL "?relay", afSetMatch

        EXTERN ??APSDE_DataReq?relay
        FUNCTION ??APSDE_DataReq?relay,00H
        EXTERN ??APSDE_DataReqMTU?relay
        FUNCTION ??APSDE_DataReqMTU?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_IsAddressBroadcast?relay
        FUNCTION ??NLME_IsAddressBroadcast?relay,00H
        EXTERN ??RTG_AddSrcRtgEntry_Guaranteed?relay
        FUNCTION ??RTG_AddSrcRtgEntry_Guaranteed?relay,00H
        EXTERN ??RTG_CheckRtStatus?relay
        FUNCTION ??RTG_CheckRtStatus?relay,00H
        EXTERN ??aps_FindGroupForEndpoint?relay
        FUNCTION ??aps_FindGroupForEndpoint?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
//    4   Revision:       $Revision: 39295 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  * @param   applFn - pointer to the Application callback function
//  134  *
//  135  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  136  *
//  137  * @return  Pointer to epList_t on success, NULL otherwise.
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn ){
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  140   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
//  141 
//  142   if (ep != NULL) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_69
//  143     ep->nextDesc = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??Subroutine38_0 & 0xFFFF
//  144     epList = ep;
??CrossCallReturnLabel_68:
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine35 & 0xFFFF
//  145     ep->epDesc = epDesc;
??CrossCallReturnLabel_59:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine27 & 0xFFFF
//  146     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_46:
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        LCALL   ?Subroutine26 & 0xFFFF
//  147     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
??CrossCallReturnLabel_44:
        INC     DPTR
        MOV     A,#0x32
        LCALL   ?Subroutine25 & 0xFFFF
//  148     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
??CrossCallReturnLabel_42:
        MOV     A,#0x1
        LCALL   ?Subroutine25 & 0xFFFF
//  149     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
??CrossCallReturnLabel_43:
        INC     DPTR
        MOVX    @DPTR,A
//  150     ep->pfnApplCB = applFn;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  151   }
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
//  152 
//  153   return ep;
??CrossCallReturnLabel_69:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  154 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function afRegisterExtended
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function afRegisterExtended
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//  155 
//  156 /*********************************************************************
//  157  * @fn      afRegister
//  158  *
//  159  * @brief   Register an Application's EndPoint description.
//  160  *
//  161  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  162  *
//  163  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  164  *
//  165  * @return  afStatus_SUCCESS - Registered
//  166  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  167  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  168  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 afStatus_t afRegister( endPointDesc_t *epDesc ){
afRegister:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function afRegister
        CODE
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  170 	if (afFindEndPointDescList(epDesc->endPoint)){  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??afRegister_0
//  171     	return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afRegister_1
//  172 	}
//  173 
//  174 	return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??afRegisterExtended?relay; Banked call to: afRegisterExtended
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??afRegister_2
        MOV     R1,#0x10
        SJMP    ??afRegister_1
??afRegister_2:
        MOV     R1,#0x0
??afRegister_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock7
//  175 }
//  176 
//  177 /*********************************************************************
//  178  * @fn      afDelete
//  179  *
//  180  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  181  *
//  182  * @param   EndPoint - Application Endpoint to delete
//  183  *
//  184  * @return  afStatus_SUCCESS - endpoint deleted
//  185  *          afStatus_INVALID_PARAMETER - endpoint not found
//  186  *          afStatus_FAILED - endpoint list empty
//  187  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  188 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function afDelete
        CODE
//  189 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  190   epList_t *epCurrent;
//  191   epList_t *epPrevious;
//  192 
//  193   if ( epList != NULL )
        MOV     DPTR,#epList
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??afDelete_0
//  194   {
//  195     epPrevious = epCurrent = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     R1,A
//  196 
//  197     // first element of the list matches
//  198     if ( epCurrent->epDesc->endPoint == EndPoint )
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??afDelete_1
//  199     {
//  200       epList = epCurrent->nextDesc;
        MOV     DPTR,#epList
        SJMP    ??afDelete_2
//  201       osal_mem_free( epCurrent );
//  202 
//  203       return ( afStatus_SUCCESS );
//  204     }
//  205     else
//  206     {
//  207       // search the list
//  208       for ( epCurrent = epPrevious->nextDesc;
//  209             epCurrent != NULL;
//  210             epCurrent = epCurrent->nextDesc )
//  211       {
//  212         if ( epCurrent->epDesc->endPoint == EndPoint )
//  213         {
//  214           epPrevious->nextDesc = epCurrent->nextDesc;
//  215           osal_mem_free( epCurrent );
//  216 
//  217           // delete the entry and free the memory
//  218           return ( afStatus_SUCCESS );
//  219         }
//  220         epPrevious = epCurrent;
??afDelete_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
??afDelete_1:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDelete_4
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??afDelete_3
        MOV     DPL,R0
        MOV     DPH,R1
??afDelete_2:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
        MOV     R1,#0x0
        SJMP    ??afDelete_5
//  221       }
//  222     }
//  223 
//  224     // no endpoint found
//  225     return ( afStatus_INVALID_PARAMETER );
??afDelete_4:
        MOV     R1,#0x2
        SJMP    ??afDelete_5
//  226   }
//  227   else
//  228   {
//  229     // epList is empty
//  230     return ( afStatus_FAILED );
??afDelete_0:
        MOV     R1,#0x1
          CFI EndBlock cfiBlock8
//  231   }
??afDelete_5:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  232 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function afDelete
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R7
        MOVX    A,@DPTR
        XRL     A,R6
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  233 
//  234 /*********************************************************************
//  235  * @fn          afDataConfirm
//  236  *
//  237  * @brief       This function will generate the Data Confirm back to
//  238  *              the application.
//  239  *
//  240  * @param       endPoint - confirm end point
//  241  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  242  * @param       status - status of APSDE_DATA_REQUEST
//  243  *
//  244  * @return      none
//  245  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  247 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,R3
//  248   endPointDesc_t *epDesc;
//  249   afDataConfirm_t *msgPtr;
//  250 
//  251   // Find the endpoint description
//  252   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  253   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDataConfirm_0
//  254     return;
//  255 
//  256   // Determine the incoming command type
//  257   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
//  258   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDataConfirm_0
//  259   {
//  260     // Build the Data Confirm message
//  261     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  262     msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V2
        LCALL   ?Subroutine22 & 0xFFFF
//  263     msgPtr->endpoint = endPoint;
//  264     msgPtr->transID = transID;
//  265 
//  266 #if defined ( MT_AF_CB_FUNC )
//  267     /* If MT has subscribed for this callback, don't send as a message. */
//  268     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  269     {
//  270       /* Send callback if it's subscribed */
//  271       MT_AfDataConfirm ((void *)msgPtr);
//  272       /* Release the memory. */
//  273       osal_msg_deallocate( (void *)msgPtr );
//  274     }
//  275     else
//  276 #endif
//  277     {
//  278       /* send message through task message */
//  279       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  280     }
//  281   }
??CrossCallReturnLabel_38:
        MOV     A,?V1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  282 }
??afDataConfirm_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function afReflectError
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function afDataConfirm
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function afReflectError
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  283 
//  284 /*********************************************************************
//  285  * @fn          afReflectError
//  286  *
//  287  * @brief       This function will generate the Reflect Error message to
//  288  *              the application.
//  289  *
//  290  * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
//  291  * @param       dstAddr - intended destination
//  292  * @param       endPoint - confirm end point
//  293  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  294  * @param       status - status of APSDE_DATA_REQUEST
//  295  *
//  296  * @return      none
//  297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
afReflectError:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function afReflectError
        CODE
//  299 {
        FUNCALL afReflectError, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V1,R1
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V0,R4
        MOV     ?V4,R5
//  300   endPointDesc_t *epDesc;
//  301   afReflectError_t *msgPtr;
//  302 
//  303   // Find the endpoint description
//  304   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V0
        LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
//  305   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afReflectError_0
//  306     return;
//  307 
//  308   // Determine the incoming command type
//  309   msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
//  310   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afReflectError_0
//  311   {
//  312     // Build the Data Confirm message
//  313     msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  314     msgPtr->hdr.status = status;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
//  315     msgPtr->endpoint = endPoint;
//  316     msgPtr->transID = transID;
//  317     msgPtr->dstAddrMode = dstAddrMode;
//  318     msgPtr->dstAddr = dstAddr;
//  319 
//  320 #if defined ( MT_AF_CB_FUNC )
//  321     /* If MT has subscribed for this callback, don't send as a message. */
//  322     if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
//  323     {
//  324       /* Send callback if it's subscribed */
//  325       MT_AfReflectError( (void *)msgPtr );
//  326       /* Release the memory. */
//  327       osal_msg_deallocate( (void *)msgPtr );
//  328     }
//  329     else
//  330 #endif
//  331     {
//  332       /* send message through task message */
//  333       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  334     }
//  335   }
??CrossCallReturnLabel_39:
        MOV     A,?V4
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
          CFI EndBlock cfiBlock21
//  336 }
??afReflectError_0:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function afReflectError
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_53:
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function afReflectError
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function afRegisterExtended
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_43
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function afRegisterExtended
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_44
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afReflectError
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_45
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function afReflectError
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,?V0
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_54:
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function afDataConfirm
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_38
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function afReflectError
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_39
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function afRegisterExtended
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_42
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-8
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function afRegisterExtended
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_43
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-8
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function afRegisterExtended
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_44
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-8
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function afReflectError
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_45
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-8
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function afRegisterExtended
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_46
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-8
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function afReflectError
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_47
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-8
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function afDataConfirm
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_38
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-8
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function afReflectError
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_39
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-8
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function afReflectError
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_47
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function afDataConfirm
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_38
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function afReflectError
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_39
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function afRegisterExtended
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_43
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-6
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function afRegisterExtended
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_44
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-6
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function afReflectError
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_45
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-6
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function afRegisterExtended
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_46
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-6
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function afReflectError
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_47
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-6
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function afDataConfirm
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_38
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-6
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function afReflectError
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_39
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-6
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_61:
        INC     DPTR
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
//  337 
//  338 /*********************************************************************
//  339  * @fn          afIncomingData
//  340  *
//  341  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  342  *
//  343  * @param       aff  - pointer to APS frame format
//  344  * @param       SrcAddress  - Source address
//  345  * @param       SrcPanId  - Source PAN ID
//  346  * @param       sig - incoming message's link quality
//  347  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  348  * @param       SecurityUse - Security enable/disable
//  349  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  350  * @param       radius - incoming messages received radius
//  351  *
//  352  * @return      none
//  353  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  354 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  355                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
//  356                      uint32 timestamp, uint8 radius )
//  357 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V8,R2
        MOV     ?V9,R3
//  358   endPointDesc_t *epDesc = NULL;
//  359   epList_t *pList = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine11 & 0xFFFF
//  360 #if !defined ( APS_NO_GROUPS )
//  361   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
??CrossCallReturnLabel_13:
        MOV     ?V4,#-0x2
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_0
//  362 #endif
//  363 
//  364   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  365   {
//  366 #if !defined ( APS_NO_GROUPS )
//  367     // Find the first endpoint for this group
//  368     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V4,A
//  369     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V4
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  370       return;   // No endpoint found
//  371 
//  372     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  373     if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??afIncomingData_2
//  374       return;   // Endpoint descriptor not found
        LJMP    ??afIncomingData_1 & 0xFFFF
//  375 
//  376     pList = afFindEndPointDescList( epDesc->endPoint );
//  377 #else
//  378     return; // Not supported
//  379 #endif
//  380   }
//  381   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??afIncomingData_3
//  382   {
//  383     // Set the list
//  384     if ( pList != NULL )
        MOV     A,?V6
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  385     {
//  386       epDesc = pList->epDesc;
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_4:
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        SJMP    ??afIncomingData_5
//  387     }
//  388   }
//  389   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_4
//  390   {
//  391     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V6,R2
        MOV     ?V7,R3
        SJMP    ??afIncomingData_4
//  392   }
//  393 
//  394   while ( epDesc )
//  395   {
//  396     uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
//  397 
//  398     if ( pList->pfnDescCB )
//  399     {
//  400       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  401                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  402       if ( pID )
//  403       {
//  404         epProfileID = *pID;
//  405         osal_mem_free( pID );
//  406       }
//  407     }
//  408     else if ( epDesc->simpleDesc )
//  409     {
//  410       epProfileID = epDesc->simpleDesc->AppProfId;
//  411     }
//  412 
//  413     // First part of verification is to make sure that:
//  414     // the local Endpoint ProfileID matches the received ProfileID OR
//  415     // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
//  416     // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
//  417     if ( (aff->ProfileID == epProfileID) ||
//  418          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
//  419          ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
//  420     {
//  421       // Save original endpoint
//  422       uint8 endpoint = aff->DstEndPoint;
//  423 
//  424       // overwrite with descriptor's endpoint
//  425       aff->DstEndPoint = epDesc->endPoint;
//  426 
//  427       afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  428                          nwkSeqNum, SecurityUse, timestamp, radius );
//  429 
//  430       // Restore with original endpoint
//  431       aff->DstEndPoint = endpoint;
//  432     }
//  433 
//  434     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  435     {
//  436 #if !defined ( APS_NO_GROUPS )
//  437       // Find the next endpoint for this group
//  438       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  439       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  440         return;   // No endpoint found
//  441 
//  442       epDesc = afFindEndPointDesc( grpEp );
//  443       if ( epDesc == NULL )
//  444         return;   // Endpoint descriptor not found
//  445 
//  446       pList = afFindEndPointDescList( epDesc->endPoint );
//  447 #else
//  448       return;
//  449 #endif
//  450     }
//  451     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  452     {
//  453       pList = pList->nextDesc;
//  454       if ( pList )
//  455         epDesc = pList->epDesc;
??afIncomingData_6:
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_5:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        SJMP    ??afIncomingData_7
??afIncomingData_8:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V6,R2
        MOV     ?V7,R3
??afIncomingData_7:
        MOV     ?V10,#-0x2
        MOV     ?V11,#-0x1
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??afIncomingData_9
        ; Setup parameters for indirect call
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?CALL_IND
        MOV     A,R2
        ORL     A,R3
        JZ      ??afIncomingData_10
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
        SJMP    ??afIncomingData_10
??afIncomingData_9:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ      ??afIncomingData_10
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
??afIncomingData_10:
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_66:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V10
        XRL     A,R0
        JNZ     ??afIncomingData_11
        MOV     A,?V11
        XRL     A,R1
??afIncomingData_11:
        JZ      ??afIncomingData_12
        MOV     A,R2
        JNZ     ??afIncomingData_13
        MOV     A,R0
        ORL     A,R1
        JNZ     ??afIncomingData_14
        SJMP    ??afIncomingData_12
??afIncomingData_13:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??afIncomingData_15
        MOV     A,#-0x1
        XRL     A,R1
??afIncomingData_15:
        JNZ     ??afIncomingData_14
??afIncomingData_12:
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     A,R2
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V14
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   ??afBuildMSGIncoming?relay; Banked call to: afBuildMSGIncoming
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
??afIncomingData_14:
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_16
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,?V4
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V4,A
        MOV     A,#-0x2
        XRL     A,?V4
        JZ      ??afIncomingData_1
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??afIncomingData_8 & 0xFFFF
        SJMP    ??afIncomingData_1
??afIncomingData_16:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_1
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,?V6
        ORL     A,?V7
        JZ      $+5
        LJMP    ??afIncomingData_6 & 0xFFFF
//  456       else
//  457         epDesc = NULL;
//  458     }
//  459     else
//  460       epDesc = NULL;
//  461   }
//  462 }
??afIncomingData_1:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function afCopyAddress
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function afIncomingData
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function afCopyAddress
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70
//  463 
//  464 /*********************************************************************
//  465  * @fn          afBuildMSGIncoming
//  466  *
//  467  * @brief       Build the message for the app
//  468  *
//  469  * @param
//  470  *
//  471  * @return      pointer to next in data buffer
//  472  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  473 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  474                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  475                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
//  476 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V4,R4
        MOV     ?V5,R5
        MOV     ?V8,R1
//  477   afIncomingMSGPacket_t *MSGpkt;
//  478   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  479   uint8 *asdu = aff->asdu;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?Subroutine11 & 0xFFFF
//  480   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_15:
        MOV     A,R2
        ADD     A,#0x10
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x27
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
//  481 
//  482   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
//  483   {
//  484     return;
//  485   }
//  486 
//  487   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        LCALL   ?Subroutine28 & 0xFFFF
//  488   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_48:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine23 & 0xFFFF
//  489   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_40:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
//  490   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function afCopyAddress
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   ??afCopyAddress?relay; Banked call to: afCopyAddress
//  491   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  492   MSGpkt->endPoint = epDesc->endPoint;
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  493   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  494   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_24:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  495   MSGpkt->correlation = sig->correlation;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  496   MSGpkt->rssi = sig->rssi;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  497   MSGpkt->SecurityUse = SecurityUse;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  498   MSGpkt->timestamp = timestamp;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
//  499   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV     A,R6
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V8
        MOVX    @DPTR,A
//  500   MSGpkt->macSrcAddr = aff->macSrcAddr;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_26:
        ADD     A,#0x24
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine23 & 0xFFFF
//  501   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_41:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        ADD     A,#0x12
        LCALL   ?Subroutine24 & 0xFFFF
//  502   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_77:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        ADD     A,#0x10
        LCALL   ?Subroutine24 & 0xFFFF
//  503   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_78:
        MOV     A,R6
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  504   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  505   MSGpkt->radius = radius;
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x26
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  506 
//  507   if ( MSGpkt->cmd.DataLength )
        MOV     A,R6
        ADD     A,#0x22
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V10,R0
        MOV     ?V11,R1
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??afBuildMSGIncoming_1
//  508   {
//  509     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x27
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,?V10
        MOV     DPH,?V11
        LCALL   ??Subroutine38_0 & 0xFFFF
//  510     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,?V6
        MOV     ?V1,?V7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine16 & 0xFFFF
//  511   }
??CrossCallReturnLabel_21:
        MOV     DPL,?V10
        MOV     DPH,?V11
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??afBuildMSGIncoming_2
//  512   else
//  513   {
//  514     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        MOV     DPL,?V10
        MOV     DPH,?V11
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  515   }
//  516 
//  517 #if defined ( MT_AF_CB_FUNC )
//  518   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  519   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  520   {
//  521     MT_AfIncomingMsg( (void *)MSGpkt );
//  522     // Release the memory.
//  523     osal_msg_deallocate( (void *)MSGpkt );
//  524   }
//  525   else
//  526 #endif
//  527   {
//  528     // Send message through task message.
//  529     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine36_0 & 0xFFFF
//  530   }
??CrossCallReturnLabel_64:
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  531 }
??afBuildMSGIncoming_0:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function afBuildMSGIncoming
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function afBuildMSGIncoming
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_40
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function afBuildMSGIncoming
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_41
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function AF_DataRequest
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function afBuildMSGIncoming
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function afBuildMSGIncoming
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     A,R6
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function afIncomingData
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function afBuildMSGIncoming
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
        RET
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function afBuildMSGIncoming
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function afBuildMSGIncoming
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function AF_DataRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function AF_DataRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95
//  532 
//  533 /*********************************************************************
//  534  * @fn      AF_DataRequest
//  535  *
//  536  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  537  *          SendMulti and MSG-Send.
//  538  *
//  539  * input parameters
//  540  *
//  541  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  542  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  543  * @param   cID - A valid cluster ID as specified by the Profile.
//  544  * @param   len - Number of bytes of data pointed to by next param.
//  545  * @param  *buf - A pointer to the data bytes to send.
//  546  * @param  *transID - A pointer to a byte which can be modified and which will
//  547  *                    be used as the transaction sequence number of the msg.
//  548  * @param   options - Valid bit mask of Tx options.
//  549  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  550  *
//  551  * output parameters
//  552  *
//  553  * @param  *transID - Incremented by one if the return value is success.
//  554  *
//  555  * @return  afStatus_t - See previous definition of afStatus_... types.
//  556  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  557 uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  558 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  559                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  560                            uint8 options, uint8 radius )
//  561 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V2,R1
//  562   pDescCB pfnDescCB;
//  563   ZStatus_t stat;
//  564   APSDE_DataReq_t req;
//  565   afDataReqMTU_t mtu;
//  566   epList_t *pList;
//  567 
//  568   // Verify source end point
//  569   if ( srcEP == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  570   {
//  571     return afStatus_INVALID_PARAMETER;
//  572   }
//  573 
//  574 #if !defined( REFLECTOR )
//  575   if ( dstAddr->addrMode == afAddrNotPresent )
//  576   {
//  577     return afStatus_INVALID_PARAMETER;
//  578   }
//  579 #endif
//  580 
//  581   // Check if route is available before sending data
//  582   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V1,A
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??AF_DataRequest_1
//  583   {
//  584     if ( dstAddr->addrMode != afAddr16Bit )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  585     {
//  586       return ( afStatus_INVALID_PARAMETER );
//  587     }
//  588 
//  589     // First, make sure the destination is not its self, then check for an existing route.
//  590     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  591         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     A,?V6
        XRL     A,R2
        JNZ     ??AF_DataRequest_2
        MOV     A,?V7
        XRL     A,R3
??AF_DataRequest_2:
        JZ      ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV     R4,#0x3
        MOV     R1,#0x1
        LCALL   ??RTG_CheckRtStatus?relay; Banked call to: RTG_CheckRtStatus
        MOV     A,R1
        JZ      ??AF_DataRequest_1
//  592     {
//  593       // A valid route to a concentrator wasn't found
//  594       return ( afStatus_NO_ROUTE );
        MOV     R1,#-0x33
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  595     }
//  596   }
//  597 
//  598   // Validate broadcasting
//  599   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  600        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??AF_DataRequest_4
        MOV     A,#0xf
        XRL     A,R0
        JNZ     ??AF_DataRequest_5
//  601   {
//  602     // Check for valid broadcast values
//  603     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        MOV     DPL,?V0
        MOV     DPH,?V1
        JZ      ??AF_DataRequest_6
//  604     {
//  605       // Force mode to broadcast
//  606       dstAddr->addrMode = afAddrBroadcast;
        MOV     A,#0xf
        MOVX    @DPTR,A
//  607     }
//  608     else
//  609     {
//  610       // Address is not a valid broadcast type
//  611       if ( dstAddr->addrMode == afAddrBroadcast )
//  612       {
//  613         return afStatus_INVALID_PARAMETER;
//  614       }
//  615     }
//  616   }
//  617   else if ( dstAddr->addrMode != afAddr64Bit &&
//  618             dstAddr->addrMode != afAddrGroup &&
//  619             dstAddr->addrMode != afAddrNotPresent )
//  620   {
//  621     return afStatus_INVALID_PARAMETER;
//  622   }
//  623 
//  624   // Set destination address
//  625   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine28 & 0xFFFF
//  626   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_50:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??AF_DataRequest_8
//  627   {
//  628     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_72
//  629   }
??AF_DataRequest_6:
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_7
        SJMP    ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??AF_DataRequest_7
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_7
        MOV     A,R0
        JZ      ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  630   else
//  631   {
//  632     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine19 & 0xFFFF
//  633   }
??CrossCallReturnLabel_29:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  634 
//  635   // This option is to use Wildcard ProfileID in outgoing packets
//  636   if ( options & AF_WILDCARD_PROFILEID )
??CrossCallReturnLabel_72:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.1
        MOV     A,#0x11
        JNC     ??AF_DataRequest_9
//  637   {
//  638     req.profileID = ZDO_WILDCARD_PROFILE_ID;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??AF_DataRequest_10
//  639   }
//  640   else
//  641   {
//  642     req.profileID = ZDO_PROFILE_ID;
??AF_DataRequest_9:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  643 
//  644     if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV     DPTR,#epList
??AF_DataRequest_11:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??AF_DataRequest_12
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,R6
        XRL     A,R2
        JNZ     ??AF_DataRequest_13
        MOV     A,R7
        XRL     A,R3
??AF_DataRequest_13:
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AF_DataRequest_11
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??AF_DataRequest_12
//  645     {
//  646       uint16 *pID = (uint16 *)(pfnDescCB(
//  647                                    AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?CALL_IND
//  648       if ( pID )
        MOV     A,R2
        ORL     A,R3
        JZ      ??AF_DataRequest_14
//  649       {
//  650         req.profileID = *pID;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  651         osal_mem_free( pID );
??CrossCallReturnLabel_73:
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
        SJMP    ??AF_DataRequest_14
//  652       }
//  653     }
//  654     else if ( srcEP->simpleDesc )
??AF_DataRequest_12:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??AF_DataRequest_14
//  655     {
//  656       req.profileID = srcEP->simpleDesc->AppProfId;
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
//  657     }
//  658   }
??CrossCallReturnLabel_31:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??AF_DataRequest_10:
        MOVX    @DPTR,A
//  659 
//  660   req.txOptions = 0;
??AF_DataRequest_14:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  661 
//  662   if ( ( options & AF_ACK_REQUEST              ) &&
//  663        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  664        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_15
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xf
        XRL     A,R0
        JZ      ??AF_DataRequest_15
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_15
//  665   {
//  666     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  667   }
//  668 
//  669   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_15:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_16
//  670   {
//  671     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
//  672   }
//  673 
//  674   if ( options & AF_EN_SECURITY )
??AF_DataRequest_16:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_17
//  675   {
//  676     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  677     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??AF_DataRequest_18
//  678   }
//  679   else
//  680   {
//  681     mtu.aps.secure = FALSE;
??AF_DataRequest_17:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??AF_DataRequest_18:
        MOVX    @DPTR,A
//  682   }
//  683 
//  684   if ( options & AF_PREPROCESS )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.2
        JNC     ??AF_DataRequest_19
//  685   {
//  686     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x40
        MOVX    @DPTR,A
//  687   }
//  688 
//  689   mtu.kvp = FALSE;
??AF_DataRequest_19:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  690 
//  691   if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.5
        JNC     ??AF_DataRequest_20
//  692   {
//  693     req.discoverRoute = DISC_ROUTE_INITIATE;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??AF_DataRequest_21
//  694   }
//  695   else
//  696   {
//  697     req.discoverRoute = AF_DataRequestDiscoverRoute;
??AF_DataRequest_20:
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
??AF_DataRequest_21:
        MOVX    @DPTR,A
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  698   }
//  699 
//  700   req.transID       = *transID;
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  701   req.srcEP         = srcEP->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  702   req.dstEP         = dstAddr->endPoint;
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  703   req.clusterID     = cID;
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  704   req.asduLen       = len;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
//  705   req.asdu          = buf;
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  706   req.radiusCounter = radius;
??CrossCallReturnLabel_75:
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  707 #if defined ( INTER_PAN )
//  708   req.dstPanId      = dstAddr->panId;
//  709 #endif // INTER_PAN
//  710 
//  711   // Look if there is a Callback function registered for this endpoint
//  712   // The callback is used to control the AF Transaction ID used when sending messages
//  713   pList = afFindEndPointDescList( srcEP->endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
//  714 
//  715   if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??AF_DataRequest_22
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??AF_DataRequest_22
//  716   {
//  717     pList->pfnApplCB( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ?CALL_IND
//  718   }
//  719 
//  720 #if defined ( INTER_PAN )
//  721   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  722   {
//  723     if ( len > INTERP_DataReqMTU() )
//  724     {
//  725       stat = afStatus_INVALID_PARAMETER;
//  726     }
//  727     else
//  728     {
//  729       stat = INTERP_DataReq( &req );
//  730     }
//  731   }
//  732   else
//  733 #endif // INTER_PAN
//  734   {
//  735     if (len > afDataReqMTU( &mtu ) )
??AF_DataRequest_22:
        ; Setup parameters for call to function afDataReqMTU
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ??afDataReqMTU?relay ; Banked call to: afDataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,?V4
        CLR     A
        SUBB    A,?V5
        JNC     ??AF_DataRequest_23
//  736     {
//  737       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??AF_DataRequest_24
//  738       {
//  739         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??Subroutine44_0 & 0xFFFF
//  740       }
??CrossCallReturnLabel_96:
        LCALL   ?CALL_IND
        SJMP    ??AF_DataRequest_25
//  741       else
//  742       {
//  743         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_24:
        MOV     ?V3,#0x2
        SJMP    ??AF_DataRequest_26
//  744       }
//  745     }
//  746     else
//  747     {
//  748       stat = APSDE_DataReq( &req );
??AF_DataRequest_23:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??APSDE_DataReq?relay; Banked call to: APSDE_DataReq
??AF_DataRequest_25:
        MOV     A,R1
        MOV     ?V3,A
//  749     }
//  750   }
//  751 
//  752   /*
//  753    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  754    * get added to the NWK databufs. So it will not go OTA and it will not get
//  755    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  756    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  757    * message with the first in line TransSeqNumber, even on a multi message.
//  758    * Also note that a reflected msg will not have its confirmation generated
//  759    * here.
//  760    */
//  761   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  762        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_26:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_27
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_28
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_28:
        JNZ     ??AF_DataRequest_27
//  763   {
//  764     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     R3,?V3
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afDataConfirm?relay; Banked call to: afDataConfirm
//  765   }
//  766 
//  767   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_27:
        MOV     A,?V3
        JNZ     ??AF_DataRequest_29
//  768   {
//  769     (*transID)++;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  770   }
//  771 
//  772   return (afStatus_t)stat;
??AF_DataRequest_29:
        MOV     R1,?V3
??AF_DataRequest_3:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock96
//  773 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function afBuildMSGIncoming
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function afRegisterExtended
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function afBuildMSGIncoming
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function afBuildMSGIncoming
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function AF_DataRequest
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function AF_DataRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function AF_DataRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function AF_DataRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function afCopyAddress
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function afBuildMSGIncoming
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function afBuildMSGIncoming
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function AF_DataRequest
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,R4
        MOV     DPH,R5
        RET
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function AF_DataRequest
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function AF_DataRequest
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function AF_DataRequest
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function AF_DataRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_82:
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function afBuildMSGIncoming
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_12
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function afIncomingData
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_10
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function AF_DataRequest
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_9
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function afRegisterExtended
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_17
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function afBuildMSGIncoming
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_26
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function afBuildMSGIncoming
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_27
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function afBuildMSGIncoming
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_28
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function afDelete
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_6
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function afBuildMSGIncoming
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_7
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function AF_DataRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_5
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function AF_DataRequest
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_8
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function AF_DataRequest
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_29
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function AF_DataRequest
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_30
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-4
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function AF_DataRequest
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_31
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function AF_DataRequest
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_32
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function AF_DataRequest
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_33
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function afBuildMSGIncoming
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_11
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function afBuildMSGIncoming
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_12
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function afIncomingData
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_10
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function AF_DataRequest
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_9
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function AF_DataRequest
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function AF_DataRequest
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function AF_DataRequest
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     A,DPL
        ORL     A,DPH
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151
//  774 
//  775 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  776 /*********************************************************************
//  777  * @fn      AF_DataRequestSrcRtg
//  778  *
//  779  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  780  *          SendMulti and MSG-Send.
//  781  *
//  782  * input parameters
//  783  *
//  784  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  785  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  786  * @param   cID - A valid cluster ID as specified by the Profile.
//  787  * @param   len - Number of bytes of data pointed to by next param.
//  788  * @param  *buf - A pointer to the data bytes to send.
//  789  * @param  *transID - A pointer to a byte which can be modified and which will
//  790  *                    be used as the transaction sequence number of the msg.
//  791  * @param   options - Valid bit mask of Tx options.
//  792  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  793  * @param   relayCnt - Number of devices in the relay list
//  794  * @param   pRelayList - Pointer to the relay list
//  795  *
//  796  * output parameters
//  797  *
//  798  * @param  *transID - Incremented by one if the return value is success.
//  799  *
//  800  * @return  afStatus_t - See previous definition of afStatus_... types.
//  801  */
//  802 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  803 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  804                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  805                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  806 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  807   uint8 status;
//  808 
//  809   /* Add the source route to the source routing table */
//  810   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  811                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,R1
//  812 
//  813   if( status == RTG_SUCCESS)
        JNZ     ??AF_DataRequestSrcRtg_0
//  814   {
//  815     /* Call AF_DataRequest to send the data */
//  816     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,?V2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??AF_DataRequestSrcRtg_1
//  817   }
//  818   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV     A,#0x5
        XRL     A,R1
        JNZ     ??AF_DataRequestSrcRtg_2
//  819   {
//  820     /* The source route relay count is exceeding the network limit */
//  821     status = afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??AF_DataRequestSrcRtg_1
//  822   }
//  823   else
//  824   {
//  825     /* The guaranteed adding entry fails due to memory failure */
//  826     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV     R1,#0x10
//  827   }
//  828   return status;
??AF_DataRequestSrcRtg_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock152
//  829 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function afBuildMSGIncoming
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function AF_DataRequestSrcRtg
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function afEndPoints
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond156) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond156) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond156) CFA_SP SP+-7
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157
//  830 
//  831 #endif
//  832 
//  833 /*********************************************************************
//  834  * @fn      afFindEndPointDescList
//  835  *
//  836  * @brief   Find the endpoint description entry from the endpoint
//  837  *          number.
//  838  *
//  839  * @param   EndPoint - Application Endpoint to look for
//  840  *
//  841  * @return  the address to the endpoint/interface description entry
//  842  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  843 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  844 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  845   epList_t *epSearch;
//  846 
//  847   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV     DPTR,#epList
        SJMP    ??afFindEndPointDescList_0
??afFindEndPointDescList_1:
        MOV     DPL,R2
        MOV     DPH,R3
??afFindEndPointDescList_0:
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     A,R2
        ORL     A,R3
        JZ      ??afFindEndPointDescList_2
//  848   {
//  849     if (epSearch->epDesc->endPoint == EndPoint)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine20 & 0xFFFF
//  850     {
//  851       break;
//  852     }
//  853   }
??CrossCallReturnLabel_34:
        XRL     A,R1
        JNZ     ??afFindEndPointDescList_1
          CFI EndBlock cfiBlock158
//  854 
//  855   return epSearch;
??afFindEndPointDescList_2:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  856 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function afIncomingData
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker162 Using cfiCommon1
          CFI (cfiPicker162) NoFunction
          CFI (cfiPicker162) Picker
        INC     DPTR
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiPicker162
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond163 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function afIncomingData
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function afIncomingData
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        INC     DPTR
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function afFindEndPointDesc
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function afFindSimpleDesc
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function afIncomingData
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function afIncomingData
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function afBuildMSGIncoming
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function AF_DataRequest
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function AF_DataRequest
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function AF_DataRequestSrcRtg
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function afFindEndPointDescList
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond178) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond178) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond178) CFA_SP SP+-7
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function AF_DataRequest
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function afFindEndPointDesc
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function afFindSimpleDesc
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function afIncomingData
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function afIncomingData
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184
//  857 
//  858 /*********************************************************************
//  859  * @fn      afFindEndPointDesc
//  860  *
//  861  * @brief   Find the endpoint description entry from the endpoint
//  862  *          number.
//  863  *
//  864  * @param   EndPoint - Application Endpoint to look for
//  865  *
//  866  * @return  the address to the endpoint/interface description entry
//  867  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  868 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  869 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  870   epList_t *epSearch;
//  871 
//  872   // Look for the endpoint
//  873   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
//  874 
//  875   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afFindEndPointDesc_0
//  876     return ( epSearch->epDesc );
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_92:
        SJMP    ??afFindEndPointDesc_1
//  877   else
//  878     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock185
//  879 }
//  880 
//  881 /*********************************************************************
//  882  * @fn      afFindSimpleDesc
//  883  *
//  884  * @brief   Find the Simple Descriptor from the endpoint number.
//  885  *
//  886  * @param   EP - Application Endpoint to look for.
//  887  *
//  888  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  889  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  890 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  891 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//  892   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
//  893   uint8 rtrn = FALSE;
        MOV     R1,#0x0
//  894 
//  895   if ( epItem )
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindSimpleDesc_0
//  896   {
//  897     if ( epItem->pfnDescCB )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afFindSimpleDesc_1
//  898     {
//  899       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V0
        INC     R1
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  900       rtrn = TRUE;
        MOV     R1,#0x1
        SJMP    ??afFindSimpleDesc_2
//  901     }
//  902     else
//  903     {
//  904       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine33 & 0xFFFF
//  905     }
//  906   }
??CrossCallReturnLabel_97:
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??afFindSimpleDesc_3
//  907   else
//  908   {
//  909     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??afFindSimpleDesc_3:
        MOVX    @DPTR,A
//  910   }
//  911 
//  912   return rtrn;
??afFindSimpleDesc_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock186
//  913 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function afFindEndPointDescList
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_34
          CFI (cfiCond188) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond188) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond188) CFA_SP SP+-9
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function afEndPoints
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_35
          CFI (cfiCond189) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond189) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond189) CFA_SP SP+-9
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        INC     DPTR
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function afReflectError
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_63
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function afBuildMSGIncoming
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_64
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function afFindSimpleDesc
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function afFindEndPointDescList
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_34
          CFI (cfiCond195) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond195) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond195) CFA_SP SP+-9
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function afEndPoints
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_35
          CFI (cfiCond196) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond196) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond196) CFA_SP SP+-9
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function afDataConfirm
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_62
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-4
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function afReflectError
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_63
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-4
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function afBuildMSGIncoming
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_64
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-4
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function afFindSimpleDesc
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function afFindEndPointDescList
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_34
          CFI (cfiCond203) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond203) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond203) CFA_SP SP+-9
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function afEndPoints
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_35
          CFI (cfiCond204) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond204) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond204) CFA_SP SP+-9
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205
//  914 
//  915 /*********************************************************************
//  916  * @fn      afGetDescCB
//  917  *
//  918  * @brief   Get the Descriptor callback function.
//  919  *
//  920  * @param   epDesc - pointer to the endpoint descriptor
//  921  *
//  922  * @return  function pointer or NULL
//  923  */
//  924 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  925 {
//  926   epList_t *epSearch;
//  927 
//  928   // Start at the beginning
//  929   epSearch = epList;
//  930 
//  931   // Look through the list until the end
//  932   while ( epSearch )
//  933   {
//  934     // Is there a match?
//  935     if ( epSearch->epDesc == epDesc )
//  936     {
//  937       return ( epSearch->pfnDescCB );
//  938     }
//  939     else
//  940       epSearch = epSearch->nextDesc;  // Next entry
//  941   }
//  942 
//  943   return ( (pDescCB)NULL );
//  944 }
//  945 
//  946 /*********************************************************************
//  947  * @fn      afDataReqMTU
//  948  *
//  949  * @brief   Get the Data Request MTU(Max Transport Unit).
//  950  *
//  951  * @param   fields - afDataReqMTU_t
//  952  *
//  953  * @return  uint8(MTU)
//  954  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  955 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock206 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  956 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  957   uint8 len;
//  958   uint8 hdr;
//  959 
//  960   if ( fields->kvp == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  961   {
//  962     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     R6,#0x8
        SJMP    ??afDataReqMTU_1
//  963   }
//  964   else
//  965   {
//  966     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     R6,#0x0
//  967   }
//  968 
//  969   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  970 
//  971   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSDE_DataReqMTU?relay; Banked call to: APSDE_DataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        MOV     R1,A
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock206
//  972 }
//  973 
//  974 /*********************************************************************
//  975  * @fn      afGetMatch
//  976  *
//  977  * @brief   Set the allow response flag.
//  978  *
//  979  * @param   ep - Application Endpoint to look for
//  980  * @param   action - true - allow response, false - no response
//  981  *
//  982  * @return  TRUE allow responses, FALSE no response
//  983  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  984 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  985 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  986   epList_t *epSearch;
//  987 
//  988   // Look for the endpoint
//  989   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
//  990 
//  991   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afGetMatch_0
//  992   {
//  993     if ( epSearch->flags & eEP_AllowMatch )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_0
//  994       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_1
//  995     else
//  996       return ( FALSE );
//  997   }
//  998   else
//  999     return ( FALSE );
??afGetMatch_0:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock207
??afGetMatch_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1000 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock208 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock208
// 1001 
// 1002 /*********************************************************************
// 1003  * @fn      afSetMatch
// 1004  *
// 1005  * @brief   Set the allow response flag.
// 1006  *
// 1007  * @param   ep - Application Endpoint to look for
// 1008  * @param   action - true - allow response, false - no response
// 1009  *
// 1010  * @return  TRUE if success, FALSE if endpoint not found
// 1011  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1012 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock209 Using cfiCommon0
          CFI Function afSetMatch
        CODE
// 1013 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
// 1014   epList_t *epSearch;
// 1015 
// 1016   // Look for the endpoint
// 1017   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
// 1018 
// 1019   if ( epSearch )
        MOV     A,R0
        ORL     A,R1
        JZ      ??afSetMatch_0
// 1020   {
// 1021     if ( action )
        MOV     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R7
        JZ      ??afSetMatch_1
// 1022     {
// 1023       epSearch->flags |= eEP_AllowMatch;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??afSetMatch_2
// 1024     }
// 1025     else
// 1026     {
// 1027       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??afSetMatch_2:
        MOVX    @DPTR,A
// 1028     }
// 1029     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetMatch_3
// 1030   }
// 1031   else
// 1032     return ( FALSE );
??afSetMatch_0:
        MOV     R1,#0x0
??afSetMatch_3:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock209
// 1033 }
// 1034 
// 1035 /*********************************************************************
// 1036  * @fn      afNumEndPoints
// 1037  *
// 1038  * @brief   Returns the number of endpoints defined (including 0)
// 1039  *
// 1040  * @param   none
// 1041  *
// 1042  * @return  number of endpoints
// 1043  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1044 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock210 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
// 1045 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1046   epList_t *epSearch;
// 1047   uint8 endpoints;
// 1048 
// 1049   // Start at the beginning
// 1050   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine17 & 0xFFFF
// 1051   endpoints = 0;
??CrossCallReturnLabel_25:
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_19
// 1052 
// 1053   while ( epSearch )
// 1054   {
// 1055     endpoints++;
??afNumEndPoints_0:
        INC     R1
// 1056     epSearch = epSearch->nextDesc;
        LCALL   ?Subroutine13 & 0xFFFF
// 1057   }
??CrossCallReturnLabel_19:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??afNumEndPoints_0
// 1058 
// 1059   return ( endpoints );
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock210
// 1060 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function afNumEndPoints
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond212) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond212) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond212) CFA_SP SP+-7
          CFI Block cfiPicker213 Using cfiCommon1
          CFI (cfiPicker213) NoFunction
          CFI (cfiPicker213) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_55:
        RET
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiPicker213

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond214 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function AF_DataRequest
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_1
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function AF_DataRequest
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_2
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function afBuildMSGIncoming
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_24
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function afNumEndPoints
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_25
          CFI (cfiCond218) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond218) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond218) CFA_SP SP+-9
          CFI Block cfiPicker219 Using cfiCommon1
          CFI (cfiPicker219) NoFunction
          CFI (cfiPicker219) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiPicker219

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond220 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function afNumEndPoints
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond221) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond221) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond221) CFA_SP SP+-7
          CFI Block cfiPicker222 Using cfiCommon1
          CFI (cfiPicker222) NoFunction
          CFI (cfiPicker222) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiPicker222
// 1061 
// 1062 /*********************************************************************
// 1063  * @fn      afEndPoints
// 1064  *
// 1065  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1066  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1067  *
// 1068  * @param   epBuf - pointer to mem used
// 1069  *
// 1070  * @return  void
// 1071  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1072 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock223 Using cfiCommon0
          CFI Function afEndPoints
        CODE
// 1073 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1074   epList_t *epSearch;
// 1075   uint8 endPoint;
// 1076 
// 1077   // Start at the beginning
// 1078   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afEndPoints_0
// 1079 
// 1080   while ( epSearch )
// 1081   {
// 1082     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     R0,A
// 1083 
// 1084     if ( !skipZDO || endPoint != 0 )
        MOV     A,R1
        JZ      ??afEndPoints_2
        MOV     A,R0
        JZ      ??afEndPoints_3
// 1085       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1086 
// 1087     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R4
        MOV     DPH,R5
// 1088   }
??afEndPoints_0:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??afEndPoints_1
// 1089 }
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock223

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond224 Using cfiCommon0
          CFI Function afFindEndPointDescList
          CFI Conditional ??CrossCallReturnLabel_34
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function afEndPoints
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond225) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond225) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond225) CFA_SP SP+-7
          CFI Block cfiPicker226 Using cfiCommon1
          CFI (cfiPicker226) NoFunction
          CFI (cfiPicker226) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_98:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiPicker226
// 1090 
// 1091 /*********************************************************************
// 1092  * @fn      afCopyAddress
// 1093  *
// 1094  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1095  *          from the zAddrType_t parameter.
// 1096  *
// 1097  * @param   epBuf - pointer to mem used
// 1098  *
// 1099  * @return  void
// 1100  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1101 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock227 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1102 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1103   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     A,R4
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1104   if ( zAddr->addrMode == Addr64Bit )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??afCopyAddress_0
// 1105   {
// 1106     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_76
// 1107   }
// 1108   else
// 1109   {
// 1110     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine15 & 0xFFFF
// 1111   }
??CrossCallReturnLabel_67:
        LCALL   ??Subroutine38_0 & 0xFFFF
// 1112 
// 1113   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1114   afAddr->panId = 0;
??CrossCallReturnLabel_76:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1115 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock227
// 1116 
// 1117 /**************************************************************************************************
// 1118  * @fn          afAPSF_ConfigGet
// 1119  *
// 1120  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1121  *              the specified EndPoint.
// 1122  *
// 1123  * input parameters
// 1124  *
// 1125  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1126  *
// 1127  * output parameters
// 1128  *
// 1129  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1130  *
// 1131  * @return      None.
// 1132  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1133 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1134 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1135   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
// 1136 
// 1137   if (pList == NULL)
        MOV     A,R0
        ORL     A,R1
        JNZ     ??afAPSF_ConfigGet_0
// 1138   {
// 1139     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
// 1140     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??afAPSF_ConfigGet_1
// 1141   }
// 1142   else
// 1143   {
// 1144     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R0
        ADD     A,#0x6
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI EndBlock cfiBlock228
// 1145   }
// 1146 }
??afAPSF_ConfigGet_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock229 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock229
// 1147 
// 1148 /**************************************************************************************************
// 1149  * @fn          afAPSF_ConfigSet
// 1150  *
// 1151  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1152  *              the specified EndPoint.
// 1153  *
// 1154  * input parameters
// 1155  *
// 1156  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1157  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1158  *
// 1159  * output parameters
// 1160  *
// 1161  * None.
// 1162  *
// 1163  * @return      afStatus_SUCCESS for success.
// 1164  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1165  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1166 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1167 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1168   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
// 1169 
// 1170   if (pList == NULL)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??afAPSF_ConfigSet_0
// 1171   {
// 1172     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afAPSF_ConfigSet_1
// 1173   }
// 1174 
// 1175   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        JNC     ??afAPSF_ConfigSet_2
        INC     R3
??afAPSF_ConfigSet_2:
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1176   return afStatus_SUCCESS;
        MOV     R1,#0x0
??afAPSF_ConfigSet_1:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock230
// 1177 }
// 1178 
// 1179 /**************************************************************************************************
// 1180  * @fn          afSetApplCB
// 1181  *
// 1182  * @brief       Sets the pointer to the Application Callback function for a
// 1183  *              specific EndPoint.
// 1184  *
// 1185  * input parameters
// 1186  *
// 1187  * @param       endPoint - The specific EndPoint for which to set Application Callback.
// 1188  * @param       pApplFn - A pointer to the Application Callback function.
// 1189  *
// 1190  * output parameters
// 1191  *
// 1192  * None.
// 1193  *
// 1194  * @return      TRUE if success, FALSE if endpoint not found
// 1195  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1196 uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
afSetApplCB:
          CFI Block cfiBlock231 Using cfiCommon0
          CFI Function afSetApplCB
        CODE
// 1197 {
        FUNCALL afSetApplCB, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1198   if ( pApplFn != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afSetApplCB_0
// 1199   {
// 1200     epList_t *epSearch;
// 1201 
// 1202     // Look for the endpoint
// 1203     epSearch = afFindEndPointDescList( endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
// 1204 
// 1205     if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afSetApplCB_0
// 1206     {
// 1207       epSearch->pfnApplCB = pApplFn;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1208 
// 1209       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetApplCB_1
// 1210     }
// 1211   }
// 1212 
// 1213   return ( FALSE );
??afSetApplCB_0:
        MOV     R1,#0x0
??afSetApplCB_1:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock231
// 1214 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegisterExtended?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegister?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDelete?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataConfirm?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afReflectError?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afReflectError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afIncomingData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afBuildMSGIncoming?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AF_DataRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AF_DataRequestSrcRtg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDescList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDesc?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindSimpleDesc?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataReqMTU?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afGetMatch?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afSetMatch?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afNumEndPoints?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afEndPoints?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afCopyAddress?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afAPSF_ConfigGet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afAPSF_ConfigSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afSetApplCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetApplCB

        END
// 1215 
// 1216 /**************************************************************************************************
// 1217 */
// 
// 3 198 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 3 325 bytes of CODE  memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             27/Oct/2015  21:12:32 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDProfile.c                #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDProfile.c -D SECURE=0    #
#                          -D OSC32K_CRYSTAL_INSTALLED=FALSE -D               #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ZDProfile.lst            #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ZDProfile.r51             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   1300         DW 19
   \   000006   ....         DW ??ZDO_ProcessDeviceAnnce?relay
   \   000008   0100         DW 1
   \   00000A   ....         DW ??zdpProcessAddrReq?relay
   \   00000C   0200         DW 2
   \   00000E   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000010   0300         DW 3
   \   000012   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   000014   0400         DW 4
   \   000016   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000018   0500         DW 5
   \   00001A   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   00001C   0600         DW 6
   \   00001E   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000020   FFFF         DW 65535
   \   000022   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C0E0         PUSH    A
   \   000035   7408         MOV     A,#0x8
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   D0E0         POP     A
   \   00003C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00003F   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000042   12....       LCALL   ?Subroutine30 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_110:
   \   000045   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000048   E0           MOVX    A,@DPTR
   \   000049   24FF         ADD     A,#-0x1
   \   00004B   F5..         MOV     ?V2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   34FF         ADDC    A,#-0x1
   \   000051   F5..         MOV     ?V3,A
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   85..82       MOV     DPL,?V2
   \   00005D   85..83       MOV     DPH,?V3
   \   000060   F0           MOVX    @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000061                ; Setup parameters for call to function AF_DataRequest
   \   000061   75..1E       MOV     ?V5,#0x1e
   \   000064   78..         MOV     R0,#?V5
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV     R0,#?V2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   85....       MOV     ?V0,?V4
   \   000076   75..00       MOV     ?V1,#0x0
   \   000079   E5..         MOV     A,?V0
   \   00007B   2401         ADD     A,#0x1
   \   00007D   F5..         MOV     ?V0,A
   \   00007F   5002         JNC     ??fillAndSend_0
   \   000081   05..         INC     ?V1
   \                     ??fillAndSend_0:
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   7421         MOV     A,#0x21
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000090   90....       MOV     DPTR,#ZDP_TxOptions
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000097   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000099   7409         MOV     A,#0x9
   \   00009B   12....       LCALL   ?XSTACK_DISP101_8
   \   00009E   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   740C         MOV     A,#0xc
   \   0000A8   02....       LJMP    ?Subroutine0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine80_0
   \   000001                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL   ??Subroutine79_0 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_102:
   \   00000D   EE           MOV     A,R6
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000017   801F         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   12....       LCALL   ?Subroutine31 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_34:
   \   000027   A882         MOV     R0,DPL
   \   000029   A983         MOV     R1,DPH
   \   00002B   85..82       MOV     DPL,?V2
   \   00002E   85..83       MOV     DPH,?V3
   \   000031   A3           INC     DPTR
   \   000032   8582..       MOV     ?V2,DPL
   \   000035   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   2F           ADD     A,R7
   \   00003B   1F           DEC     R7
   \   00003C   04           INC     A
   \   00003D   70DA         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00003F   7410         MOV     A,#0x10
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   90....       MOV     DPTR,#ZDP_TxOptions
   \   000048   6004         JZ      ??ZDP_SendData_2
   \   00004A   7440         MOV     A,#0x40
   \   00004C   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004E   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV     A,#0xc
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000058   EE           MOV     A,R6
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   90....       MOV     DPTR,#ZDP_TxOptions
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   02....       LJMP    ??Subroutine92_0 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine19 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_9:
   \   00000A   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   02....       LJMP    ?Subroutine2 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V1,#0x0
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine75_0
   \   00000A                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine76_0
   \   000008                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine77_0
   \   000005                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000006   EC           MOV     A,R4
   \   000007   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00000A   ED           MOV     A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine40 & 0xFFFF
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_224:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine68 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_98:
   \   00002B   8012         SJMP    ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine46 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_57:
   \   00003B   E8           MOV     A,R0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV     A,R6
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   FD           MOV     R5,A
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    339          
    340            *pBuf++ = ReqType;
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E5..         MOV     A,?V2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
    341            *pBuf++ = StartIndex;
   \   000053   E5..         MOV     A,?V3
   \   000055   F0           MOVX    @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0,A
   \   000059   F5..         MOV     ?V1,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV     R1,#0xa
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP102_8
   \   000067   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000069   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7409         MOV     A,#0x9
   \   000075   02....       LJMP    ?Subroutine0 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine106_0 & 0xFFFF
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_240:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine23 & 0xFFFF
    369            dstAddr.addr.shortAddr = shortAddr;
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000019   EA           MOV     A,R2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000020   EB           MOV     A,R3
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
    373          
    374            *pBuf++ = ReqType;
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    375            *pBuf++ = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..01       MOV     ?V0,#0x1
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7904         MOV     R1,#0x4
   \   000035   02....       LJMP    ?Subroutine7 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine78_0
   \   000011                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   02....       LJMP    ??Subroutine77_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   EA           MOV     A,R2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EB           MOV     A,R3
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine53 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_226:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V1,A
   \   000031   740F         MOV     A,#0xf
   \   000033   65..         XRL     A,?V1
   \   000035   6006         JZ      ??ZDP_MatchDescReq_2
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V1
   \   00003B   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F4           CPL     A
   \   000043   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74FF         MOV     A,#-0x1
   \   000054   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6C           XRL     A,R4
   \   000058   7003         JNZ     ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV     R4,#-0x3
   \   000061   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV     A,R4
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006A   ED           MOV     A,R5
   \   00006B   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00006E   740E         MOV     A,#0xe
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine42 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    436            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_46:
   \   000076   A3           INC     DPTR
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   000077   EE           MOV     A,R6
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   08           INC     R0
   \   00007B   08           INC     R0
   \   00007C   08           INC     R0
   \   00007D   A983         MOV     R1,DPH
    439            if ( NumInClusters )
   \   00007F   6011         JZ      ??ZDP_MatchDescReq_7
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000081   75..00       MOV     ?V1,#0x0
   \   000084   7410         MOV     A,#0x10
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine43 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_48:
   \   00008C   12....       LCALL   ?Subroutine8 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
    445            }
   \                     ??CrossCallReturnLabel_0:
   \   00008F   9E           SUBB    A,R6
   \   000090   40FA         JC      ??CrossCallReturnLabel_48
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   E5..         MOV     A,?V0
   \   000098   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    448            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_198:
   \   00009B   6012         JZ      ??ZDP_MatchDescReq_8
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   00009D   75..00       MOV     ?V1,#0x0
   \   0000A0   7413         MOV     A,#0x13
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine43 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_49:
   \   0000A8   12....       LCALL   ?Subroutine8 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
    454            }
   \                     ??CrossCallReturnLabel_1:
   \   0000AB   95..         SUBB    A,?V0
   \   0000AD   40F9         JC      ??CrossCallReturnLabel_49
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_8:
   \   0000AF                ; Setup parameters for call to function fillAndSend
   \   0000AF   75..06       MOV     ?V0,#0x6
   \   0000B2   75..00       MOV     ?V1,#0x0
   \   0000B5   78..         MOV     R0,#?V0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   EA           MOV     A,R2
   \   0000BD   FC           MOV     R4,A
   \   0000BE   EB           MOV     A,R3
   \   0000BF   FD           MOV     R5,A
   \   0000C0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000C4   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000CC   02....       LJMP    ??Subroutine93_0 & 0xFFFF
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E5..         MOV     A,?V1
   \   000002   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000005   EC           MOV     A,R4
   \   000006   25..         ADD     A,?V2
   \   000008   F5..         MOV     ?V2,A
   \   00000A   ED           MOV     A,R5
   \   00000B   35..         ADDC    A,?V3
   \   00000D   F5..         MOV     ?V3,A
   \   00000F   85..82       MOV     DPL,?V2
   \   000012   F583         MOV     DPH,A
   \   000014   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000017   A3           INC     DPTR
   \   000018   A882         MOV     R0,DPL
   \   00001A   A983         MOV     R1,DPH
   \   00001C   85..82       MOV     DPL,?V2
   \   00001F   85..83       MOV     DPH,?V3
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000026   05..         INC     ?V1
   \   000028   E5..         MOV     A,?V1
   \   00002A   C3           CLR     C
   \   00002B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F5..         MOV     ?V2,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F5..         MOV     ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   A3           INC     DPTR
   \   000004   08           INC     R0
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   ED           MOV     A,R5
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine105_0
   \   000001                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine106_0
   \   000001                ; // Fall through to label ??Subroutine106_0
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_10:
   \   000008   12....       LCALL   ?Subroutine16 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_7:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine75_0 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000C   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000F   7413         MOV     A,#0x13
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine51 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_65:
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   C3           CLR     C
   \   00001E   9410         SUBB    A,#0x10
   \   000020   5004         JNC     ??ZDP_UserDescSet_0
   \   000022   88..         MOV     ?V0,R0
   \   000024   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000026   75..10       MOV     ?V0,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000029   EC           MOV     A,R4
   \   00002A   85..82       MOV     DPL,?V4
   \   00002D   85..83       MOV     DPH,?V5
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000032   ED           MOV     A,R5
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
    513          
    514            *pBuf++ = len;
   \   000035   E5..         MOV     A,?V0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   8582..       MOV     ?V4,DPL
   \   00003C   8583..       MOV     ?V5,DPH
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00003F                ; Setup parameters for call to function osal_memset
   \   00003F   F5..         MOV     ?V6,A
   \   000041   7410         MOV     A,#0x10
   \   000043   C3           CLR     C
   \   000044   95..         SUBB    A,?V6
   \   000046   FC           MOV     R4,A
   \   000047   95E0         SUBB    A,0xE0 /* A   */
   \   000049   FD           MOV     R5,A
   \   00004A   7920         MOV     R1,#0x20
   \   00004C   E9           MOV     A,R1
   \   00004D   C0E0         PUSH    A
   \   00004F   EC           MOV     A,R4
   \   000050   FE           MOV     R6,A
   \   000051   ED           MOV     A,R5
   \   000052   FF           MOV     R7,A
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   A982         MOV     R1,DPL
   \   00005A   AA83         MOV     R2,DPH
   \   00005C   89..         MOV     ?V8,R1
   \   00005E   8A..         MOV     ?V9,R2
   \   000060   75..00       MOV     ?V10,#0x0
   \   000063   78..         MOV     R0,#?V8
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   AC..         MOV     R4,?V6
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   AA..         MOV     R2,?V4
   \   00006E   AB..         MOV     R3,?V5
   \   000070   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   EE           MOV     A,R6
   \   000079   FC           MOV     R4,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FD           MOV     R5,A
   \   00007C   D0E0         POP     A
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000082                ; Setup parameters for call to function fillAndSend
   \   000082   75..14       MOV     ?V4,#0x14
   \   000085   75..00       MOV     ?V5,#0x0
   \   000088   78..         MOV     R0,#?V4
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7913         MOV     R1,#0x13
   \   00008F   AC..         MOV     R4,?V2
   \   000091   AD..         MOV     R5,?V3
   \   000093   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000095   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000097   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00009A   7402         MOV     A,#0x2
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   7F0B         MOV     R7,#0xb
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   E8           MOV     A,R0
   \   000004   FA           MOV     R2,A
   \   000005   E9           MOV     A,R1
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine53 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_227:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine20 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_11:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
    542            *pBuf = HI_UINT16( serverMask );
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0,#0x15
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   02....       LJMP    ??Subroutine78_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine20 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_12:
   \   000014   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine21 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_13:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   80..         SJMP    ?Subroutine7
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine85_0
   \   000003                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    599            uint8 *pBuf = ZDP_TmpBuf;
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine23 & 0xFFFF
    606            dstAddr.addr.shortAddr = parentAddr;
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \                     ??CrossCallReturnLabel_18:
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000018   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   00001A   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00001D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000027   EF           MOV     A,R7
   \   000028   F0           MOVX    @DPTR,A
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..1F       MOV     ?V0,#0x1f
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   790A         MOV     R1,#0xa
   \   000036                REQUIRE ?Subroutine7
   \   000036                ; // Fall through to label ?Subroutine7
    614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V2,#-0x2
   \   000011   75..FF       MOV     ?V3,#-0x1
    636            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0,#0x0
   \   000017   75..00       MOV     ?V1,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F5..         MOV     ?V10,A
   \   00001F   E4           CLR     A
   \   000020   35..         ADDC    A,?V9
   \   000022   F5..         MOV     ?V11,A
   \   000024   85..82       MOV     DPL,?V10
   \   000027   F583         MOV     DPH,A
   \   000029   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00002C   4B           ORL     A,R3
   \   00002D   7004         JNZ     ??zdpProcessAddrReq_0
   \   00002F   7C08         MOV     R4,#0x8
   \   000031   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000033   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000035   E5..         MOV     A,?V8
   \   000037   2413         ADD     A,#0x13
   \   000039   F5..         MOV     ?V12,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V9
   \   00003E   F5..         MOV     ?V13,A
   \   000040   85..82       MOV     DPL,?V12
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000048   2C           ADD     A,R4
   \   000049   F582         MOV     DPL,A
   \   00004B   E4           CLR     A
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V4,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000052   EA           MOV     A,R2
   \   000053   4B           ORL     A,R3
   \   000054   705C         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   000056   88..         MOV     ?V0,R0
   \   000058   89..         MOV     ?V1,R1
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005A                ; Setup parameters for call to function sAddrExtCmp
   \   00005A   AC..         MOV     R4,?V0
   \   00005C   AD..         MOV     R5,?V1
   \   00005E   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000060   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000062   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000065   E9           MOV     A,R1
   \   000066   6006         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000068   12....       LCALL   ?Subroutine39 & 0xFFFF
    648              }
   \                     ??CrossCallReturnLabel_106:
   \   00006B   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00006E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6007         JZ      ??zdpProcessAddrReq_5
   \   000074   6401         XRL     A,#0x1
   \   000076   6003         JZ      $+5
   \   000078   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
   \                     ??zdpProcessAddrReq_5:
   \   00007B                ; Setup parameters for call to function AssocGetWithExt
   \   00007B   AA..         MOV     R2,?V0
   \   00007D   AB..         MOV     R3,?V1
   \   00007F   12....       LCALL   ??AssocGetWithExt?relay; Banked call to: AssocGetWithExt
   \   000082   8A..         MOV     ?V6,R2
   \   000084   8B..         MOV     ?V7,R3
   \   000086   A8..         MOV     R0,?V6
   \   000088   A9..         MOV     R1,?V7
   \   00008A   E8           MOV     A,R0
   \   00008B   49           ORL     A,R1
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6401         XRL     A,#0x1
   \   00009C   6003         JZ      $+5
   \   00009E   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    653              {
    654                aoi = pAssoc->shortAddr;
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   12....       LCALL   ??Subroutine79_0 & 0xFFFF
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_103:
   \   0000A8   E5..         MOV     A,?V4
   \   0000AA   6003         JZ      $+5
   \   0000AC   02....       LJMP    ??zdpProcessAddrReq_7 & 0xFFFF
   \   0000AF   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    656                  reqType = 0xFF; // Force Invalid
    657              }
    658            }
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000B2   8882         MOV     DPL,R0
   \   0000B4   8983         MOV     DPH,R1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   E4           CLR     A
   \   0000BC   C8           XCH     A,R0
   \   0000BD   F9           MOV     R1,A
   \   0000BE   EA           MOV     A,R2
   \   0000BF   28           ADD     A,R0
   \   0000C0   F5..         MOV     ?V2,A
   \   0000C2   E4           CLR     A
   \   0000C3   39           ADDC    A,R1
   \   0000C4   F5..         MOV     ?V3,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000C6   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   65..         XRL     A,?V2
   \   0000CC   7004         JNZ     ??zdpProcessAddrReq_8
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_8:
   \   0000D2   7008         JNZ     ??zdpProcessAddrReq_9
    664              {
    665                ieee = saveExtAddr;
   \   0000D4   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   0000D7   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
   \   0000DA   805A         SJMP    ??zdpProcessAddrReq_4
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_9:
   \   0000DC   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6004         JZ      ??zdpProcessAddrReq_10
   \   0000E2   6401         XRL     A,#0x1
   \   0000E4   7062         JNZ     ??zdpProcessAddrReq_6
   \                     ??zdpProcessAddrReq_10:
   \   0000E6                ; Setup parameters for call to function AssocGetWithShort
   \   0000E6   AB..         MOV     R3,?V3
   \   0000E8   12....       LCALL   ??AssocGetWithShort?relay; Banked call to: AssocGetWithShort
   \   0000EB   8A..         MOV     ?V6,R2
   \   0000ED   8B..         MOV     ?V7,R3
   \   0000EF   A8..         MOV     R0,?V6
   \   0000F1   A9..         MOV     R1,?V7
   \   0000F3   E8           MOV     A,R0
   \   0000F4   49           ORL     A,R1
   \   0000F5   6051         JZ      ??zdpProcessAddrReq_6
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6401         XRL     A,#0x1
   \   000102   7044         JNZ     ??zdpProcessAddrReq_6
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E4           CLR     A
   \   00010A   12....       LCALL   ?Subroutine31 & 0xFFFF
    673                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_32:
   \   00010D   A3           INC     DPTR
   \   00010E   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000111   740C         MOV     A,#0xc
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   12....       LCALL   ?Subroutine30 & 0xFFFF
    674                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_111:
   \   000119                ; Setup parameters for call to function AddrMgrEntryGet
   \   000119   7401         MOV     A,#0x1
   \   00011B   12....       LCALL   ?XSTACK_DISP101_8
   \   00011E   12....       LCALL   ??AddrMgrEntryGet?relay; Banked call to: AddrMgrEntryGet
   \   000121   E9           MOV     A,R1
   \   000122   600B         JZ      ??zdpProcessAddrReq_11
    675                {
    676                  ieee = addrEntry.extAddr;
   \   000124   7404         MOV     A,#0x4
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   8582..       MOV     ?V0,DPL
   \   00012C   8583..       MOV     ?V1,DPH
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_11:
   \   00012F   E5..         MOV     A,?V4
   \   000131   6003         JZ      ??zdpProcessAddrReq_4
    680                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_7:
   \   000133   75..FF       MOV     ?V4,#-0x1
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000136   74FE         MOV     A,#-0x2
   \   000138   65..         XRL     A,?V2
   \   00013A   7004         JNZ     ??zdpProcessAddrReq_12
   \   00013C   74FF         MOV     A,#-0x1
   \   00013E   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_12:
   \   000140   6006         JZ      ??zdpProcessAddrReq_6
   \   000142   E5..         MOV     A,?V0
   \   000144   45..         ORL     A,?V1
   \   000146   7011         JNZ     ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_6:
   \   000148   E5..         MOV     A,?V8
   \   00014A   240B         ADD     A,#0xb
   \   00014C   F582         MOV     DPL,A
   \   00014E   E4           CLR     A
   \   00014F   35..         ADDC    A,?V9
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   6003         JZ      $+5
   \   000156   02....       LJMP    ??zdpProcessAddrReq_14 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_13:
   \   000159   12....       LCALL   ?Subroutine47 & 0xFFFF
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_218:
   \   00015C   75..0B       MOV     ?V5,#0xb
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   00015F   74FE         MOV     A,#-0x2
   \   000161   65..         XRL     A,?V2
   \   000163   7004         JNZ     ??zdpProcessAddrReq_15
   \   000165   74FF         MOV     A,#-0x1
   \   000167   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_15:
   \   000169   601A         JZ      ??zdpProcessAddrReq_16
   \   00016B   E5..         MOV     A,?V0
   \   00016D   45..         ORL     A,?V1
   \   00016F   6014         JZ      ??zdpProcessAddrReq_16
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000171   E5..         MOV     A,?V4
   \   000173   6006         JZ      ??zdpProcessAddrReq_17
   \   000175   7401         MOV     A,#0x1
   \   000177   65..         XRL     A,?V4
   \   000179   7005         JNZ     ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   00017B   75..00       MOV     ?V6,#0x0
   \   00017E   801F         SJMP    ??zdpProcessAddrReq_19
   \                     ??zdpProcessAddrReq_18:
   \   000180   75..80       MOV     ?V6,#-0x80
   \   000183   801A         SJMP    ??zdpProcessAddrReq_19
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_16:
   \   000185   75..81       MOV     ?V6,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   000188   85..82       MOV     DPL,?V10
   \   00018B   85..83       MOV     DPH,?V11
   \   00018E   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000191   49           ORL     A,R1
   \   000192   7005         JNZ     ??zdpProcessAddrReq_20
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000194   12....       LCALL   ?Subroutine39 & 0xFFFF
    706                }
   \                     ??CrossCallReturnLabel_107:
   \   000197   8006         SJMP    ??zdpProcessAddrReq_19
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_20:
   \   000199   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   00019C   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_19:
   \   00019F   8E82         MOV     DPL,R6
   \   0001A1   8F83         MOV     DPH,R7
   \   0001A3   E5..         MOV     A,?V6
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   A3           INC     DPTR
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   0001A7                ; Setup parameters for call to function sAddrExtCpy
   \   0001A7   AC..         MOV     R4,?V0
   \   0001A9   AD..         MOV     R5,?V1
   \   0001AB   AA82         MOV     R2,DPL
   \   0001AD   AB83         MOV     R3,DPH
   \   0001AF   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0001B2   8A..         MOV     ?V0,R2
   \   0001B4   8B..         MOV     ?V1,R3
   \   0001B6   AE..         MOV     R6,?V0
   \   0001B8   AF..         MOV     R7,?V1
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   0001BA   8E82         MOV     DPL,R6
   \   0001BC   8F83         MOV     DPH,R7
   \   0001BE   E5..         MOV     A,?V2
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1   A3           INC     DPTR
    718              *pBuf++ = HI_UINT16( aoi );
   \   0001C2   E5..         MOV     A,?V3
   \   0001C4   12....       LCALL   ??Subroutine95_0 & 0xFFFF
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_174:
   \   0001C7   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   6007         JZ      ??zdpProcessAddrReq_21
   \   0001CD   6401         XRL     A,#0x1
   \   0001CF   6003         JZ      $+5
   \   0001D1   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
   \                     ??zdpProcessAddrReq_21:
   \   0001D4   7401         MOV     A,#0x1
   \   0001D6   65..         XRL     A,?V4
   \   0001D8   6003         JZ      $+5
   \   0001DA   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   0001DD   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   65..         XRL     A,?V2
   \   0001E3   7004         JNZ     ??zdpProcessAddrReq_23
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_23:
   \   0001E9   6003         JZ      $+5
   \   0001EB   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   0001EE   E5..         MOV     A,?V6
   \   0001F0   6003         JZ      $+5
   \   0001F2   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    724                {
    725                  uint8  cnt = 0;
   \   0001F5   85..82       MOV     DPL,?XSP + 0
   \   0001F8   85..83       MOV     DPH,?XSP + 1
   \   0001FB   E4           CLR     A
   \   0001FC   F0           MOVX    @DPTR,A
    726                  uint16 *list = AssocMakeList( &cnt );
   \   0001FD                ; Setup parameters for call to function AssocMakeList
   \   0001FD   AA..         MOV     R2,?XSP + 0
   \   0001FF   AB..         MOV     R3,?XSP + 1
   \   000201   12....       LCALL   ??AssocMakeList?relay; Banked call to: AssocMakeList
    727          
    728                  if ( list != NULL )
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   A983         MOV     R1,DPH
   \   00020B   EA           MOV     A,R2
   \   00020C   4B           ORL     A,R3
   \   00020D   7003         JNZ     $+5
   \   00020F   02....       LJMP    ??zdpProcessAddrReq_24 & 0xFFFF
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   000212   85..82       MOV     DPL,?V10
   \   000215   85..83       MOV     DPH,?V11
   \   000218   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00021B   EC           MOV     A,R4
   \   00021C   4D           ORL     A,R5
   \   00021D   7004         JNZ     ??zdpProcessAddrReq_25
   \   00021F   7C08         MOV     R4,#0x8
   \   000221   8002         SJMP    ??zdpProcessAddrReq_26
   \                     ??zdpProcessAddrReq_25:
   \   000223   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_26:
   \   000225   85..82       MOV     DPL,?V12
   \   000228   85..83       MOV     DPH,?V13
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   2C           ADD     A,R4
   \   00022D   F5..         MOV     ?V0,A
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   3400         ADDC    A,#0x0
   \   000233   85..82       MOV     DPL,?V0
   \   000236   F583         MOV     DPH,A
   \   000238   A3           INC     DPTR
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F5..         MOV     ?V0,A
    731                    uint16 *pList = list + idx;
   \   00023C   25E0         ADD     A,0xE0 /* A   */
   \   00023E   FC           MOV     R4,A
   \   00023F   E4           CLR     A
   \   000240   33           RLC     A
   \   000241   FD           MOV     R5,A
   \   000242   EA           MOV     A,R2
   \   000243   2C           ADD     A,R4
   \   000244   FC           MOV     R4,A
   \   000245   EB           MOV     A,R3
   \   000246   3D           ADDC    A,R5
   \   000247   FD           MOV     R5,A
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
   \   000248   85..82       MOV     DPL,?XSP + 0
   \   00024B   85..83       MOV     DPH,?XSP + 1
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F5..         MOV     ?V1,A
   \   000251   E5..         MOV     A,?V0
   \   000253   C3           CLR     C
   \   000254   95..         SUBB    A,?V1
   \   000256   500D         JNC     ??zdpProcessAddrReq_27
    735                    {
    736                      cnt -= idx;
   \   000258   E0           MOVX    A,@DPTR
   \   000259   C3           CLR     C
   \   00025A   95..         SUBB    A,?V0
   \   00025C   F0           MOVX    @DPTR,A
    737                      len += (cnt * sizeof( uint16 ));
   \   00025D   C3           CLR     C
   \   00025E   33           RLC     A
   \   00025F   240B         ADD     A,#0xb
   \   000261   F5..         MOV     ?V5,A
   \   000263   8002         SJMP    ??zdpProcessAddrReq_28
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
   \                     ??zdpProcessAddrReq_27:
   \   000265   E4           CLR     A
   \   000266   F0           MOVX    @DPTR,A
    742                    }
    743                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_28:
   \   000267   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00026A   0E           INC     R6
   \   00026B   E9           MOV     A,R1
   \   00026C   FF           MOV     R7,A
    744                    len++;
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
   \   00026D   8E82         MOV     DPL,R6
   \   00026F   8F83         MOV     DPH,R7
   \   000271   E5..         MOV     A,?V0
   \   000273   12....       LCALL   ??Subroutine86_0 & 0xFFFF
    748                    len++;
   \                     ??CrossCallReturnLabel_154:
   \   000276   05..         INC     ?V5
   \   000278   05..         INC     ?V5
   \   00027A   801E         SJMP    ??zdpProcessAddrReq_29
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_30:
   \   00027C   8C82         MOV     DPL,R4
   \   00027E   8D83         MOV     DPH,R5
   \   000280   12....       LCALL   ?Subroutine11 & 0xFFFF
    753                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_179:
   \   000283   8C82         MOV     DPL,R4
   \   000285   8D83         MOV     DPH,R5
   \   000287   12....       LCALL   ?Subroutine32 & 0xFFFF
    754                      pList++;
   \                     ??CrossCallReturnLabel_155:
   \   00028A   EC           MOV     A,R4
   \   00028B   2402         ADD     A,#0x2
   \   00028D   FC           MOV     R4,A
   \   00028E   5001         JNC     ??zdpProcessAddrReq_31
   \   000290   0D           INC     R5
    755                      cnt--;
   \                     ??zdpProcessAddrReq_31:
   \   000291   85..82       MOV     DPL,?XSP + 0
   \   000294   85..83       MOV     DPH,?XSP + 1
   \   000297   E0           MOVX    A,@DPTR
   \   000298   14           DEC     A
   \   000299   F0           MOVX    @DPTR,A
    756                    }
   \                     ??zdpProcessAddrReq_29:
   \   00029A   85..82       MOV     DPL,?XSP + 0
   \   00029D   85..83       MOV     DPH,?XSP + 1
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   70D9         JNZ     ??zdpProcessAddrReq_30
    757          
    758                    osal_mem_free( (uint8 *)list );
   \   0002A3                ; Setup parameters for call to function osal_mem_free
   \   0002A3   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0002A6   8009         SJMP    ??zdpProcessAddrReq_22
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_24:
   \   0002A8   8E82         MOV     DPL,R6
   \   0002AA   8F83         MOV     DPH,R7
   \   0002AC   E4           CLR     A
   \   0002AD   F0           MOVX    @DPTR,A
    764                    len++;
   \   0002AE   75..0C       MOV     ?V5,#0xc
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_22:
   \   0002B1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002B4   7410         MOV     A,#0x10
   \   0002B6   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0002B7                ; Setup parameters for call to function fillAndSend
   \   0002B7   85..82       MOV     DPL,?V10
   \   0002BA   85..83       MOV     DPH,?V11
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   F5..         MOV     ?V0,A
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   4480         ORL     A,#0x80
   \   0002C4   F5..         MOV     ?V1,A
   \   0002C6   78..         MOV     R0,#?V0
   \   0002C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CB   A9..         MOV     R1,?V5
   \   0002CD   E5..         MOV     A,?V8
   \   0002CF   2402         ADD     A,#0x2
   \   0002D1   FC           MOV     R4,A
   \   0002D2   E4           CLR     A
   \   0002D3   35..         ADDC    A,?V9
   \   0002D5   FD           MOV     R5,A
   \   0002D6   E5..         MOV     A,?V8
   \   0002D8   240F         ADD     A,#0xf
   \   0002DA   FA           MOV     R2,A
   \   0002DB   E4           CLR     A
   \   0002DC   35..         ADDC    A,?V9
   \   0002DE   FB           MOV     R3,A
   \   0002DF   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0002E2   7402         MOV     A,#0x2
   \   0002E4   12....       LCALL   ?DEALLOC_XSTACK8
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002E7   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002EA   E4           CLR     A
   \   0002EB   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_14:
   \   0002EC   740E         MOV     A,#0xe
   \   0002EE   02....       LJMP    ??Subroutine94_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine79_0
   \   000003                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003                REQUIRE ??Subroutine86_0
   \   000003                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   0E           INC     R6
   \   000003   AF83         MOV     R7,DPH
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine98_0
   \   000001                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ??Subroutine106_0 & 0xFFFF
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_241:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   12....       LCALL   ?Subroutine33 & 0xFFFF
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_35:
   \   00000F   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000012   740A         MOV     A,#0xa
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine43 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_51:
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   541F         ANL     A,#0x1f
   \   000021   12....       LCALL   ??Subroutine84_0 & 0xFFFF
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_141:
   \   000024   12....       LCALL   ?Subroutine15 & 0xFFFF
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_139:
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?Subroutine14 & 0xFFFF
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_117:
   \   00002B   12....       LCALL   ?Subroutine14 & 0xFFFF
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_118:
   \   00002E   12....       LCALL   ?Subroutine10 & 0xFFFF
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_2:
   \   000031   12....       LCALL   ??Subroutine81_0 & 0xFFFF
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_119:
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine13 & 0xFFFF
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_5:
   \   000039   12....       LCALL   ??Subroutine83_0 & 0xFFFF
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_128:
   \   00003C   2408         ADD     A,#0x8
   \   00003E   FE           MOV     R6,A
   \   00003F   E4           CLR     A
   \   000040   3D           ADDC    A,R5
   \   000041   FF           MOV     R7,A
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ??Subroutine82_0 & 0xFFFF
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_120:
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   12....       LCALL   ?Subroutine13 & 0xFFFF
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_6:
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ?Subroutine17 & 0xFFFF
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_125:
   \   000055   240B         ADD     A,#0xb
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3D           ADDC    A,R5
   \   00005B   F583         MOV     DPH,A
   \   00005D   12....       LCALL   ??Subroutine83_0 & 0xFFFF
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_129:
   \   000060   240C         ADD     A,#0xc
   \   000062   F582         MOV     DPL,A
   \   000064   E4           CLR     A
   \   000065   3D           ADDC    A,R5
   \   000066   F583         MOV     DPH,A
   \   000068   12....       LCALL   ?Subroutine56 & 0xFFFF
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_74:
   \   00006B                ; Setup parameters for call to function fillAndSend
   \   00006B   75..02       MOV     ?V0,#0x2
   \   00006E   75..80       MOV     ?V1,#-0x80
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   7910         MOV     R1,#0x10
   \   000078   EA           MOV     A,R2
   \   000079   2402         ADD     A,#0x2
   \   00007B   FC           MOV     R4,A
   \   00007C   E4           CLR     A
   \   00007D   3B           ADDC    A,R3
   \   00007E   FD           MOV     R5,A
   \   00007F   EA           MOV     A,R2
   \   000080   240F         ADD     A,#0xf
   \   000082   FA           MOV     R2,A
   \   000083   5001         JNC     ??ZDP_NodeDescMsg_0
   \   000085   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   000086   02....       LJMP    ??Subroutine76_0 & 0xFFFF
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine81_0
   \   000001                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EC           MOV     A,R4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   ED           MOV     A,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine83_0
   \   000001                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine84_0
   \   000001                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine88_0 & 0xFFFF
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    838          
    839            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_163:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ?Subroutine33 & 0xFFFF
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_36:
   \   000013   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001E   12....       LCALL   ?Subroutine34 & 0xFFFF
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_38:
   \   000021   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   F0           MOVX    @DPTR,A
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0,#0x3
   \   00003A   75..80       MOV     ?V1,#-0x80
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   FC           MOV     R4,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   EE           MOV     A,R6
   \   00004C   240F         ADD     A,#0xf
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   FB           MOV     R3,A
   \   000052   02....       LJMP    ??Subroutine76_0 & 0xFFFF
    850          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   0A           INC     R2
   \   00000B   AB83         MOV     R3,DPH
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   12....       LCALL   ?Subroutine53 & 0xFFFF
    867            uint8 *pBuf = ZDP_TmpBuf;
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_228:
   \   00000C   EC           MOV     A,R4
   \   00000D   2409         ADD     A,#0x9
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   FB           MOV     R3,A
   \   000013   8A..         MOV     ?V4,R2
   \   000015   8B..         MOV     ?V5,R3
   \   000017   EC           MOV     A,R4
   \   000018   2406         ADD     A,#0x6
   \   00001A   FA           MOV     R2,A
   \   00001B   E4           CLR     A
   \   00001C   3D           ADDC    A,R5
   \   00001D   FB           MOV     R3,A
   \   00001E   8A..         MOV     ?V6,R2
   \   000020   8B..         MOV     ?V7,R3
   \   000022   EE           MOV     A,R6
   \   000023   7022         JNZ     ??ZDP_SimpleDescMsg_0
   \   000025   EC           MOV     A,R4
   \   000026   4D           ORL     A,R5
   \   000027   601E         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000029   85..82       MOV     DPL,?V4
   \   00002C   85..83       MOV     DPH,?V5
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   85..82       MOV     DPL,?V6
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   2A           ADD     A,R2
   \   000038   C3           CLR     C
   \   000039   33           RLC     A
   \   00003A   240C         ADD     A,#0xc
   \   00003C   FA           MOV     R2,A
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \   00003D   C3           CLR     C
   \   00003E   944F         SUBB    A,#0x4f
   \   000040   4007         JC      ??ZDP_SimpleDescMsg_1
    881            {
    882              return afStatus_MEM_FAIL;
   \   000042   7910         MOV     R1,#0x10
   \   000044   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    883            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000047   7A04         MOV     R2,#0x4
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000049   EE           MOV     A,R6
   \   00004A   12....       LCALL   ??Subroutine100_0 & 0xFFFF
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_202:
   \   00004D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000050   12....       LCALL   ??Subroutine82_0 & 0xFFFF
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_121:
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000056   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000059   A3           INC     DPTR
    889          
    890            if ( len > 4 )
   \   00005A   EA           MOV     A,R2
   \   00005B   C3           CLR     C
   \   00005C   9405         SUBB    A,#0x5
   \   00005E   5003         JNC     $+5
   \   000060   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   000063   74FC         MOV     A,#-0x4
   \   000065   2A           ADD     A,R2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   08           INC     R0
   \   000069   08           INC     R0
   \   00006A   A983         MOV     R1,DPH
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   12....       LCALL   ?Subroutine15 & 0xFFFF
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_140:
   \   000073   8582..       MOV     ?V2,DPL
   \   000076   8583..       MOV     ?V3,DPH
   \   000079   12....       LCALL   ?Subroutine24 & 0xFFFF
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_19:
   \   00007C   12....       LCALL   ?Subroutine17 & 0xFFFF
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_126:
   \   00007F   2403         ADD     A,#0x3
   \   000081   F5..         MOV     ?V2,A
   \   000083   E4           CLR     A
   \   000084   3D           ADDC    A,R5
   \   000085   F5..         MOV     ?V3,A
   \   000087   85..82       MOV     DPL,?V2
   \   00008A   F583         MOV     DPH,A
   \   00008C   12....       LCALL   ?Subroutine24 & 0xFFFF
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_20:
   \   00008F   12....       LCALL   ?Subroutine10 & 0xFFFF
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_3:
   \   000092   540F         ANL     A,#0xf
   \   000094   12....       LCALL   ?Subroutine25 & 0xFFFF
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_21:
   \   000097   12....       LCALL   ?Subroutine25 & 0xFFFF
    903              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_22:
   \   00009A   602E         JZ      ??ZDP_SimpleDescMsg_4
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   EC           MOV     A,R4
   \   00009F   2407         ADD     A,#0x7
   \   0000A1   F5..         MOV     ?V2,A
   \   0000A3   E4           CLR     A
   \   0000A4   3D           ADDC    A,R5
   \   0000A5   85....       MOV     ?V8,?V2
   \   0000A8   F5..         MOV     ?V9,A
   \   0000AA   8011         SJMP    ??ZDP_SimpleDescMsg_5
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000AC   EB           MOV     A,R3
   \   0000AD   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000B0   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000B3   12....       LCALL   ?Subroutine9 & 0xFFFF
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_206:
   \   0000B6   12....       LCALL   ?Subroutine57 & 0xFFFF
    909                }
   \                     ??CrossCallReturnLabel_78:
   \   0000B9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000BC   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000BD   85..82       MOV     DPL,?V6
   \   0000C0   85..83       MOV     DPH,?V7
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FF           MOV     R7,A
   \   0000C5   EB           MOV     A,R3
   \   0000C6   C3           CLR     C
   \   0000C7   9F           SUBB    A,R7
   \   0000C8   40E2         JC      ??ZDP_SimpleDescMsg_6
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000CA   85..82       MOV     DPL,?V4
   \   0000CD   85..83       MOV     DPH,?V5
   \   0000D0   12....       LCALL   ??Subroutine99_0 & 0xFFFF
    913              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_204:
   \   0000D3   85..82       MOV     DPL,?V4
   \   0000D6   85..83       MOV     DPH,?V5
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   6044         JZ      ??ZDP_SimpleDescMsg_7
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000DC   7B00         MOV     R3,#0x0
   \   0000DE   EC           MOV     A,R4
   \   0000DF   240A         ADD     A,#0xa
   \   0000E1   FC           MOV     R4,A
   \   0000E2   5001         JNC     ??ZDP_SimpleDescMsg_8
   \   0000E4   0D           INC     R5
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000E5   8C..         MOV     ?V2,R4
   \   0000E7   8D..         MOV     ?V3,R5
   \                     ??ZDP_SimpleDescMsg_9:
   \   0000E9   85..82       MOV     DPL,?V4
   \   0000EC   85..83       MOV     DPH,?V5
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FC           MOV     R4,A
   \   0000F1   EB           MOV     A,R3
   \   0000F2   C3           CLR     C
   \   0000F3   9C           SUBB    A,R4
   \   0000F4   502A         JNC     ??ZDP_SimpleDescMsg_7
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0000F6   EB           MOV     A,R3
   \   0000F7   25E0         ADD     A,0xE0 /* A   */
   \   0000F9   FC           MOV     R4,A
   \   0000FA   E4           CLR     A
   \   0000FB   33           RLC     A
   \   0000FC   FD           MOV     R5,A
   \   0000FD   85..82       MOV     DPL,?V2
   \   000100   85..83       MOV     DPH,?V3
   \   000103   E0           MOVX    A,@DPTR
   \   000104   2C           ADD     A,R4
   \   000105   FF           MOV     R7,A
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   3D           ADDC    A,R5
   \   000109   12....       LCALL   ?Subroutine9 & 0xFFFF
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_207:
   \   00010C   85..82       MOV     DPL,?V2
   \   00010F   85..83       MOV     DPH,?V3
   \   000112   E0           MOVX    A,@DPTR
   \   000113   2C           ADD     A,R4
   \   000114   FF           MOV     R7,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   3D           ADDC    A,R5
   \   000118   12....       LCALL   ?Subroutine26 & 0xFFFF
    919                }
   \                     ??CrossCallReturnLabel_124:
   \   00011B   0B           INC     R3
   \   00011C   80CB         SJMP    ??ZDP_SimpleDescMsg_9
    920              }
    921            }
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   00011E   E4           CLR     A
   \   00011F   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000120                ; Setup parameters for call to function fillAndSend
   \   000120   75..04       MOV     ?V2,#0x4
   \   000123   75..80       MOV     ?V3,#-0x80
   \   000126   78..         MOV     R0,#?V2
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012B   EA           MOV     A,R2
   \   00012C   F9           MOV     R1,A
   \   00012D   E5..         MOV     A,?V0
   \   00012F   2402         ADD     A,#0x2
   \   000131   FC           MOV     R4,A
   \   000132   E4           CLR     A
   \   000133   35..         ADDC    A,?V1
   \   000135   FD           MOV     R5,A
   \   000136   E5..         MOV     A,?V0
   \   000138   240F         ADD     A,#0xf
   \   00013A   FA           MOV     R2,A
   \   00013B   E4           CLR     A
   \   00013C   35..         ADDC    A,?V1
   \   00013E   FB           MOV     R3,A
   \   00013F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   000147                REQUIRE ?Subroutine4
   \   000147                ; // Fall through to label ?Subroutine4
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V2
   \   000009   FF           MOV     R7,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine82_0
   \   000005                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   85..82       MOV     DPL,?V6
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   85..82       MOV     DPL,?V2
   \   000006   85..83       MOV     DPH,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine99_0
   \   000004                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ??Subroutine88_0 & 0xFFFF
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_164:
   \   00001D   75..04       MOV     ?V0,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV     A,#0x6
   \   000022   65..         XRL     A,?V2
   \   000024   7004         JNZ     ??ZDP_EPRsp_0
   \   000026   7480         MOV     A,#-0x80
   \   000028   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002A   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00002C   75..10       MOV     ?V1,#0x10
   \   00002F   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000031   75..00       MOV     ?V1,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000034   7410         MOV     A,#0x10
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00003C   7411         MOV     A,#0x11
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine29 & 0xFFFF
    966            *pBuf++ = LO_UINT16( nwkAddr );
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_30:
   \   000044   7413         MOV     A,#0x13
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004B   12....       LCALL   ??Subroutine90_0 & 0xFFFF
    970          
    971            if ( Count )
   \                     ??CrossCallReturnLabel_168:
   \   00004E   601E         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   000050   7404         MOV     A,#0x4
   \   000052   29           ADD     A,R1
   \   000053   F5..         MOV     ?V0,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   7414         MOV     A,#0x14
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine45 & 0xFFFF
    975            }
   \                     ??CrossCallReturnLabel_54:
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000060   89..         MOV     ?V4,R1
   \   000062   AC..         MOV     R4,?V4
   \   000064   7D00         MOV     R5,#0x0
   \   000066   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00006E   E5..         MOV     A,?V1
   \   000070   90....       MOV     DPTR,#ZDP_TxOptions
   \   000073   F0           MOVX    @DPTR,A
   \   000074                ; Setup parameters for call to function fillAndSend
   \   000074   78..         MOV     R0,#?V2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   A9..         MOV     R1,?V0
   \   00007B   EE           MOV     A,R6
   \   00007C   FC           MOV     R4,A
   \   00007D   EF           MOV     A,R7
   \   00007E   FD           MOV     R5,A
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP101_8
   \   000084   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00008F   E4           CLR     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   04           INC     A
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   7F07         MOV     R7,#0x7
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E9           MOV     A,R1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   0A           INC     R2
   \   000009   0A           INC     R2
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   75..00       MOV     ?V6,#0x0
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
    997            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000019   7413         MOV     A,#0x13
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000021   88..         MOV     ?V8,R0
   \   000023   89..         MOV     ?V9,R1
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000025   8882         MOV     DPL,R0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2404         ADD     A,#0x4
   \   00002C   F5..         MOV     ?V2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV     DPL,?V0
   \   000031   85..83       MOV     DPH,?V1
   \   000034   12....       LCALL   ?Subroutine33 & 0xFFFF
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_37:
   \   000037   12....       LCALL   ?Subroutine22 & 0xFFFF
   1008          
   1009            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_15:
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   12....       LCALL   ?Subroutine22 & 0xFFFF
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_16:
   \   000044   A3           INC     DPTR
   \   000045   A982         MOV     R1,DPL
   \   000047   AA83         MOV     R2,DPH
   \   000049   89..         MOV     ?V4,R1
   \   00004B   8A..         MOV     ?V5,R2
   \   00004D   75..00       MOV     ?V6,#0x0
   \   000050   78..         MOV     R0,#?V4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   85..82       MOV     DPL,?V8
   \   000058   85..83       MOV     DPH,?V9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FC           MOV     R4,A
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   AA..         MOV     R2,?V0
   \   000061   AB..         MOV     R3,?V1
   \   000063   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006B                ; Setup parameters for call to function fillAndSend
   \   00006B   75..11       MOV     ?V0,#0x11
   \   00006E   75..80       MOV     ?V1,#-0x80
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   A9..         MOV     R1,?V2
   \   000078   EE           MOV     A,R6
   \   000079   FC           MOV     R4,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FD           MOV     R5,A
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP101_8
   \   000081   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   02....       LJMP    ?Subroutine5 & 0xFFFF
   1013          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0,DPL
   \   000005   8583..       MOV     ?V1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine87_0
   \   000005                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   1033            uint8 *pBuf = ZDP_TmpBuf;
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_229:
   \   000016   EE           MOV     A,R6
   \   000017   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00001A   740D         MOV     A,#0xd
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine42 & 0xFFFF
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   1043            *pBuf++ = HI_UINT16( serverMask );
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_47:
   \   000022   90....       MOV     DPTR,#ZDP_TxOptions
   \   000025   7410         MOV     A,#0x10
   \   000027   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..15       MOV     ?V0,#0x15
   \   00002B   75..80       MOV     ?V1,#-0x80
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7903         MOV     R1,#0x3
   \   000035   EA           MOV     A,R2
   \   000036   FC           MOV     R4,A
   \   000037   EB           MOV     A,R3
   \   000038   FD           MOV     R5,A
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000046   90....       MOV     DPTR,#ZDP_TxOptions
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   00004B   04           INC     A
   \   00004C   02....       LJMP    ??Subroutine77_0 & 0xFFFF
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_233:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine16 & 0xFFFF
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_8:
   \   00002F   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1082            len = 4;
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine6
   \   000057                ; // Fall through to label ?Subroutine6
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V1,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000022   E5..         MOV     A,?V2
   \   000024   25..         ADD     A,?V1
   \   000026   C3           CLR     C
   \   000027   33           RLC     A
   \   000028   240F         ADD     A,#0xf
   \   00002A   F5..         MOV     ?V0,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   00002C   C3           CLR     C
   \   00002D   944F         SUBB    A,#0x4f
   \   00002F   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000039   EA           MOV     A,R2
   \   00003A   65..         XRL     A,?V4
   \   00003C   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00003E   EB           MOV     A,R3
   \   00003F   65..         XRL     A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000041   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000043   7902         MOV     R1,#0x2
   \   000045   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   E5..         MOV     A,?V4
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000050   E5..         MOV     A,?V5
   \   000052   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_175:
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055                ; Setup parameters for call to function NLME_GetExtAddr
   \   000055   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000058   EA           MOV     A,R2
   \   000059   FC           MOV     R4,A
   \   00005A   EB           MOV     A,R3
   \   00005B   FD           MOV     R5,A
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000063   8A..         MOV     ?V4,R2
   \   000065   8B..         MOV     ?V5,R3
   \   000067   AE..         MOV     R6,?V4
   \   000069   AF..         MOV     R7,?V5
   1148          
   1149            *pBuf++ = endPoint;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E5..         MOV     A,?V3
   \   000071   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000074   7412         MOV     A,#0x12
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine52 & 0xFFFF
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_67:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   1152            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_108:
   \   000083   A3           INC     DPTR
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \   000084   E5..         MOV     A,?V2
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   0E           INC     R6
   \   000089   0E           INC     R6
   \   00008A   0E           INC     R6
   \   00008B   AF83         MOV     R7,DPH
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   00008D   7C00         MOV     R4,#0x0
   \   00008F   7415         MOV     A,#0x15
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000097   8027         SJMP    ??ZDP_EndDeviceBindReq_4
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000099   EC           MOV     A,R4
   \   00009A   25E0         ADD     A,0xE0 /* A   */
   \   00009C   F5..         MOV     ?V4,A
   \   00009E   E4           CLR     A
   \   00009F   33           RLC     A
   \   0000A0   F5..         MOV     ?V5,A
   \   0000A2   EA           MOV     A,R2
   \   0000A3   25..         ADD     A,?V4
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   EB           MOV     A,R3
   \   0000A8   35..         ADDC    A,?V5
   \   0000AA   F5..         MOV     ?V5,A
   \   0000AC   85..82       MOV     DPL,?V4
   \   0000AF   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000B2   E8           MOV     A,R0
   \   0000B3   FE           MOV     R6,A
   \   0000B4   E9           MOV     A,R1
   \   0000B5   FF           MOV     R7,A
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000B6   85..82       MOV     DPL,?V4
   \   0000B9   85..83       MOV     DPH,?V5
   \   0000BC   12....       LCALL   ?Subroutine32 & 0xFFFF
   1159            }
   \                     ??CrossCallReturnLabel_156:
   \   0000BF   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   A882         MOV     R0,DPL
   \   0000C7   A983         MOV     R1,DPH
   \   0000C9   EC           MOV     A,R4
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V2
   \   0000CD   40CA         JC      ??ZDP_EndDeviceBindReq_5
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   E5..         MOV     A,?V1
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   E8           MOV     A,R0
   \   0000D7   FE           MOV     R6,A
   \   0000D8   E9           MOV     A,R1
   \   0000D9   FF           MOV     R7,A
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \   0000DA   7C00         MOV     R4,#0x0
   \   0000DC   7418         MOV     A,#0x18
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000E4   801C         SJMP    ??ZDP_EndDeviceBindReq_6
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000E6   EC           MOV     A,R4
   \   0000E7   25E0         ADD     A,0xE0 /* A   */
   \   0000E9   FA           MOV     R2,A
   \   0000EA   E4           CLR     A
   \   0000EB   33           RLC     A
   \   0000EC   FB           MOV     R3,A
   \   0000ED   E8           MOV     A,R0
   \   0000EE   2A           ADD     A,R2
   \   0000EF   FA           MOV     R2,A
   \   0000F0   E9           MOV     A,R1
   \   0000F1   3B           ADDC    A,R3
   \   0000F2   FB           MOV     R3,A
   \   0000F3   8A82         MOV     DPL,R2
   \   0000F5   8B83         MOV     DPH,R3
   \   0000F7   12....       LCALL   ?Subroutine11 & 0xFFFF
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_180:
   \   0000FA   8A82         MOV     DPL,R2
   \   0000FC   8B83         MOV     DPH,R3
   \   0000FE   12....       LCALL   ?Subroutine32 & 0xFFFF
   1166            }
   \                     ??CrossCallReturnLabel_157:
   \   000101   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000102   EC           MOV     A,R4
   \   000103   C3           CLR     C
   \   000104   95..         SUBB    A,?V1
   \   000106   40DE         JC      ??ZDP_EndDeviceBindReq_7
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000108                ; Setup parameters for call to function fillAndSend
   \   000108   75..20       MOV     ?V4,#0x20
   \   00010B   75..00       MOV     ?V5,#0x0
   \   00010E   78..         MOV     R0,#?V4
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   A9..         MOV     R1,?V0
   \   000115   AC..         MOV     R4,?V6
   \   000117   AD..         MOV     R5,?V7
   \   000119   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00011B   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00011D   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000125   80..         SJMP    ??Subroutine87_0
   1169          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine96_0
   \   000002                ; // Fall through to label ??Subroutine96_0
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_165:
   \   000012   75..0C       MOV     ?V2,#0xc
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_215:
   \   00001D   EE           MOV     A,R6
   \   00001E   2408         ADD     A,#0x8
   \   000020   F5..         MOV     ?V0,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   F5..         MOV     ?V1,A
   \   000026   85..82       MOV     DPL,?V0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7403         MOV     A,#0x3
   \   00002F   68           XRL     A,R0
   \   000030   7005         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV     ?V2,#0x15
   \   000035   8008         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV     A,#0x1
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV     ?V2,#0xe
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV     A,#0x12
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000047   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1208            *pBuf++ = SrcEndPoint;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E5..         MOV     A,?V3
   \   000050   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000053   7414         MOV     A,#0x14
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine29 & 0xFFFF
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   1213            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_31:
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   12....       LCALL   ?Subroutine35 & 0xFFFF
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_169:
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   68           XRL     A,R0
   \   00006F   7017         JNZ     ??ZDP_BindUnbindReq_2
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1217              *pBuf = DstEndPoint;
   \   000071   7418         MOV     A,#0x18
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   C0E0         PUSH    A
   \   000079                ; Setup parameters for call to function sAddrExtCpy
   \   000079   EE           MOV     A,R6
   \   00007A   FC           MOV     R4,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FD           MOV     R5,A
   \   00007D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000080   8A82         MOV     DPL,R2
   \   000082   8B83         MOV     DPH,R3
   \   000084   D0E0         POP     A
   \   000086   8014         SJMP    ??CrossCallReturnLabel_94
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000088   7401         MOV     A,#0x1
   \   00008A   68           XRL     A,R0
   \   00008B   7010         JNZ     ??ZDP_BindUnbindReq_3
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   12....       LCALL   ?Subroutine35 & 0xFFFF
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_170:
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   12....       LCALL   ?Subroutine66 & 0xFFFF
   1223            }
   \                     ??CrossCallReturnLabel_94:
   \   00009C   F0           MOVX    @DPTR,A
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   00009D   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A0   7410         MOV     A,#0x10
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3                ; Setup parameters for call to function fillAndSend
   \   0000A3   78..         MOV     R0,#?V6
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   A9..         MOV     R1,?V2
   \   0000AA   AC..         MOV     R4,?V4
   \   0000AC   AD..         MOV     R5,?V5
   \   0000AE   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000B0   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B2   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   02....       LJMP    ??Subroutine87_0 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine90_0
   \   000001                ; // Fall through to label ??Subroutine90_0
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   1252            uint8 *pBuf = ZDP_TmpBuf;
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000018   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1258          
   1259            *pBuf++ = ScanDuration;
   \   000024   E5..         MOV     A,?V0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   1260            *pBuf = StartIndex;
   \   000028   E5..         MOV     A,?V1
   \   00002A   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV     ?V2,#0x30
   \   00002E   75..00       MOV     ?V3,#0x0
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV     R1,#0x6
   \   000038   80..         SJMP    ??Subroutine91_0
   1263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000010                REQUIRE ??Subroutine92_0
   \   000010                ; // Fall through to label ??Subroutine92_0
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine88_0
   \   000006                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A                REQUIRE ??Subroutine91_0
   \   00000A                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine55 & 0xFFFF
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_158:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00000E   C8           XCH     A,R0
   \   00000F   2408         ADD     A,#0x8
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   38           ADDC    A,R0
   \   000015   F583         MOV     DPH,A
   \   000017   E5..         MOV     A,?V0
   \   000019   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV     ?V2,#0x35
   \   00001D   80..         SJMP    ?Subroutine1
   1288          }
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine21 & 0xFFFF
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_14:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine55 & 0xFFFF
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_159:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2408         ADD     A,#0x8
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   00001D   04           INC     A
   \   00001E   65..         XRL     A,?V0
   \   000020   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV     A,#0x40
   \   000024   F0           MOVX    @DPTR,A
   1341            }
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV     A,#0xc
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7008         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   D2E7         SETB    0xE0 /* A   */.7
   \   000036   F0           MOVX    @DPTR,A
   1345            }
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV     ?V2,#0x34
   \   00003A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   \   00000D   8D..         MOV     ?V2,R5
   1373            uint8 *pBuf = ZDP_TmpBuf;
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV     ?V3,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV     A,#0xe
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00001D   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   8A..         MOV     ?V4,R2
   \   000027   8B..         MOV     ?V5,R3
   \   000029   A8..         MOV     R0,?V4
   \   00002B   A9..         MOV     R1,?V5
   1377          
   1378            *pBuf++ = ScanDuration;
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   E5..         MOV     A,?V0
   \   000033   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_200:
   \   000036   A3           INC     DPTR
   \   000037   AB83         MOV     R3,DPH
   \   000039   C3           CLR     C
   \   00003A   9406         SUBB    A,#0x6
   \   00003C   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   00003E   75..06       MOV     ?V3,#0x6
   1384          
   1385              *pBuf++ = ScanCount;
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   E5..         MOV     A,?V1
   \   000047   8031         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000049   74FE         MOV     A,#-0x2
   \   00004B   65..         XRL     A,?V0
   \   00004D   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   65..         XRL     A,?V0
   \   000053   7026         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000055   75..06       MOV     ?V3,#0x6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   E5..         MOV     A,?V2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   08           INC     R0
   \   000060   EB           MOV     A,R3
   \   000061   F9           MOV     R1,A
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   000062   74FF         MOV     A,#-0x1
   \   000064   65..         XRL     A,?V0
   \   000066   7013         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1395              {
   1396                len += sizeof( uint16 );
   \   000068   75..08       MOV     ?V3,#0x8
   \   00006B   7412         MOV     A,#0x12
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ?Subroutine54 & 0xFFFF
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \                     ??CrossCallReturnLabel_71:
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000079   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00007A   F0           MOVX    @DPTR,A
   1400              }
   1401            }
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   00007B                ; Setup parameters for call to function fillAndSend
   \   00007B   75..38       MOV     ?V4,#0x38
   \   00007E   75..00       MOV     ?V5,#0x0
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV     R1,?V3
   \   000088   EE           MOV     A,R6
   \   000089   FC           MOV     R4,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FD           MOV     R5,A
   \   00008C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00008E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000090   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000093   7402         MOV     A,#0x2
   \   000095                REQUIRE ?Subroutine0
   \   000095                ; // Fall through to label ?Subroutine0
   1404          }
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V7,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV     B,#0xc
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V5,A
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V0,R2
   \   000032   8B..         MOV     ?V1,R3
   1447            if ( buf == NULL )
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V1
   \   000037   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000039   7910         MOV     R1,#0x10
   \   00003B   02....       LJMP    ??CrossCallReturnLabel_23 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A3           INC     DPTR
   \   000043   8582..       MOV     ?V8,DPL
   \   000046   8583..       MOV     ?V9,DPH
   1453          
   1454            *pBuf++ = Status;
   \   000049   E5..         MOV     A,?V10
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   1455            *pBuf++ = NetworkCount;
   \   00004D   E5..         MOV     A,?V7
   \   00004F   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   1456            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_177:
   \   000052   7417         MOV     A,#0x17
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00005A   A3           INC     DPTR
   1457            *pBuf++ = NetworkListCount;
   \   00005B   E5..         MOV     A,?V4
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   0E           INC     R6
   \   000060   0E           INC     R6
   \   000061   AF83         MOV     R7,DPH
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   000063   75..00       MOV     ?V6,#0x0
   \   000066   7419         MOV     A,#0x19
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00006E   8015         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000070   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000071   F0           MOVX    @DPTR,A
   \   000072   0E           INC     R6
   \   000073   E9           MOV     A,R1
   \   000074   FF           MOV     R7,A
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000075   E5..         MOV     A,?V2
   \   000077   2414         ADD     A,#0x14
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   35..         ADDC    A,?V3
   \   00007E   F583         MOV     DPH,A
   \   000080   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000083   05..         INC     ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000085   E5..         MOV     A,?V6
   \   000087   C3           CLR     C
   \   000088   95..         SUBB    A,?V4
   \   00008A   507F         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   00008C                ; Setup parameters for call to function sAddrExtCpy
   \   00008C   E5..         MOV     A,?V2
   \   00008E   240B         ADD     A,#0xb
   \   000090   FC           MOV     R4,A
   \   000091   E4           CLR     A
   \   000092   35..         ADDC    A,?V3
   \   000094   FD           MOV     R5,A
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00009C   EE           MOV     A,R6
   \   00009D   2408         ADD     A,#0x8
   \   00009F   FE           MOV     R6,A
   \   0000A0   5001         JNC     ??ZDP_MgmtNwkDiscRsp_5
   \   0000A2   0F           INC     R7
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0000A3   85..82       MOV     DPL,?V2
   \   0000A6   85..83       MOV     DPH,?V3
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0000AE   85..82       MOV     DPL,?V2
   \   0000B1   85..83       MOV     DPH,?V3
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000BC   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000BF   85..82       MOV     DPL,?V2
   \   0000C2   85..83       MOV     DPH,?V3
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000CD   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000D0   740F         MOV     A,#0xf
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   08           INC     R0
   \   0000D4   EF           MOV     A,R7
   \   0000D5   F9           MOV     R1,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   0E           INC     R6
   \   0000D8   AF83         MOV     R7,DPH
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   740F         MOV     A,#0xf
   \   0000E0   44F0         ORL     A,#0xf0
   \   0000E2   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E5   A3           INC     DPTR
   \   0000E6   A983         MOV     R1,DPH
   \   0000E8   85..82       MOV     DPL,?V2
   \   0000EB   85..83       MOV     DPH,?V3
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   64FE         XRL     A,#0xfe
   \   0000F8   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   000106   7401         MOV     A,#0x1
   \   000108   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1480            }
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00010B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00010E   E5..         MOV     A,?V8
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E5..         MOV     A,?V9
   \   000114   F0           MOVX    @DPTR,A
   \   000115                ; Setup parameters for call to function fillAndSend
   \   000115   75..30       MOV     ?V2,#0x30
   \   000118   75..80       MOV     ?V3,#-0x80
   \   00011B   78..         MOV     R0,#?V2
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   A9..         MOV     R1,?V5
   \   000122   AC..         MOV     R4,?V12
   \   000124   AD..         MOV     R5,?V13
   \   000126   7402         MOV     A,#0x2
   \   000128   12....       LCALL   ?XSTACK_DISP101_8
   \   00012B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   FE           MOV     R6,A
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   AA..         MOV     R2,?V0
   \   000137   AB..         MOV     R3,?V1
   \   000139   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00013C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00013F                REQUIRE ?Subroutine3
   \   00013F                ; // Fall through to label ?Subroutine3
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine94_0
   \   000002                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8D..         MOV     ?V14,R5
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   741A         MOV     A,#0x1a
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_221:
   \   000020   EC           MOV     A,R4
   \   000021   6020         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL   ?Subroutine44 & 0xFFFF
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1521            }
   \                     ??CrossCallReturnLabel_149:
   \   000026   EC           MOV     A,R4
   \   000027   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   AC..         MOV     R4,?V12
   \   000031   AD..         MOV     R5,?V13
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP101_8
   \   000038   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000043   7419         MOV     A,#0x19
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V5,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004B   75F016       MOV     B,#0x16
   \   00004E   A4           MUL     AB
   \   00004F   2404         ADD     A,#0x4
   \   000051   F5..         MOV     ?V6,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000056   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV     ?V2,R2
   \   00005B   8B..         MOV     ?V3,R3
   1528            if ( buf == NULL )
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V3
   \   000060   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   000062   7910         MOV     R1,#0x10
   \   000064   02....       LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   8582..       MOV     ?V8,DPL
   \   00006F   8583..       MOV     ?V9,DPH
   1534          
   1535            *pBuf++ = Status;
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   1536            *pBuf++ = NeighborLqiEntries;
   \   000075   E5..         MOV     A,?V14
   \   000077   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   1537            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_178:
   \   00007A   7418         MOV     A,#0x18
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000082   A3           INC     DPTR
   1538            *pBuf++ = NeighborLqiCount;
   \   000083   E5..         MOV     A,?V5
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   0E           INC     R6
   \   000088   0E           INC     R6
   \   000089   AF83         MOV     R7,DPH
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \   00008B   75..00       MOV     ?V4,#0x0
   \   00008E   02....       LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   E5..         MOV     A,?V0
   \   000093   2402         ADD     A,#0x2
   \   000095   FC           MOV     R4,A
   \   000096   E4           CLR     A
   \   000097   35..         ADDC    A,?V1
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000A1                ; Setup parameters for call to function sAddrExtCpy
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   240A         ADD     A,#0xa
   \   0000A5   FC           MOV     R4,A
   \   0000A6   E4           CLR     A
   \   0000A7   35..         ADDC    A,?V1
   \   0000A9   FD           MOV     R5,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2408         ADD     A,#0x8
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E4           CLR     A
   \   0000AF   3F           ADDC    A,R7
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000B4   8A..         MOV     ?V10,R2
   \   0000B6   8B..         MOV     ?V11,R3
   \   0000B8   AE..         MOV     R6,?V10
   \   0000BA   AF..         MOV     R7,?V11
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000BC   E5..         MOV     A,?V0
   \   0000BE   2412         ADD     A,#0x12
   \   0000C0   F8           MOV     R0,A
   \   0000C1   E4           CLR     A
   \   0000C2   35..         ADDC    A,?V1
   \   0000C4   F9           MOV     R1,A
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   12....       LCALL   ?Subroutine11 & 0xFFFF
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_182:
   \   0000CC   8882         MOV     DPL,R0
   \   0000CE   8983         MOV     DPH,R1
   \   0000D0   A3           INC     DPTR
   \   0000D1   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_191:
   \   0000D4   2414         ADD     A,#0x14
   \   0000D6   F582         MOV     DPL,A
   \   0000D8   E4           CLR     A
   \   0000D9   35..         ADDC    A,?V1
   \   0000DB   12....       LCALL   ?Subroutine41 & 0xFFFF
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_187:
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   2415         ADD     A,#0x15
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   E4           CLR     A
   \   0000E5   35..         ADDC    A,?V1
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   33           RLC     A
   \   0000EB   33           RLC     A
   \   0000EC   54FC         ANL     A,#0xfc
   \   0000EE   F8           MOV     R0,A
   \   0000EF   8E82         MOV     DPL,R6
   \   0000F1   8F83         MOV     DPH,R7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   48           ORL     A,R0
   \   0000F5   12....       LCALL   ?Subroutine36 & 0xFFFF
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \                     ??CrossCallReturnLabel_41:
   \   0000F8   E5..         MOV     A,?V0
   \   0000FA   2416         ADD     A,#0x16
   \   0000FC   F582         MOV     DPL,A
   \   0000FE   E4           CLR     A
   \   0000FF   35..         ADDC    A,?V1
   \   000101   F583         MOV     DPH,A
   \   000103   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000106   F0           MOVX    @DPTR,A
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \   000107   E5..         MOV     A,?V0
   \   000109   2417         ADD     A,#0x17
   \   00010B   12....       LCALL   ?Subroutine18 & 0xFFFF
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   1569          
   1570              list++; // next list entry
   1571            }
   \                     ??CrossCallReturnLabel_188:
   \   00010E   2418         ADD     A,#0x18
   \   000110   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000113   2419         ADD     A,#0x19
   \   000115   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000118   241A         ADD     A,#0x1a
   \   00011A   F5..         MOV     ?V0,A
   \   00011C   5002         JNC     ??ZDP_MgmtLqiRsp_4
   \   00011E   05..         INC     ?V1
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000120   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000122   E5..         MOV     A,?V4
   \   000124   C3           CLR     C
   \   000125   95..         SUBB    A,?V5
   \   000127   5003         JNC     $+5
   \   000129   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00012C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00012F   E5..         MOV     A,?V8
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E5..         MOV     A,?V9
   \   000135   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   A9..         MOV     R1,?V6
   \   00013D   AC..         MOV     R4,?V12
   \   00013F   AD..         MOV     R5,?V13
   \   000141   7402         MOV     A,#0x2
   \   000143   12....       LCALL   ?XSTACK_DISP101_8
   \   000146   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000149   7402         MOV     A,#0x2
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014E   E9           MOV     A,R1
   \   00014F   FE           MOV     R6,A
   \   000150                ; Setup parameters for call to function osal_mem_free
   \   000150   AA..         MOV     R2,?V2
   \   000152   AB..         MOV     R3,?V3
   \   000154   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000157   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00015A   7401         MOV     A,#0x1
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   7F0F         MOV     R7,#0xf
   \   000161   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0,#0x31
   \   000004   75..80       MOV     ?V1,#-0x80
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine97_0
   \   000007                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   0E           INC     R6
   \   000006   AF83         MOV     R7,DPH
   \   000008   E5..         MOV     A,?V0
   \   00000A   22           RET
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   8C..         MOV     ?V1,R4
   \   000018   8D..         MOV     ?V0,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V5,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV     B,#0x5
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V4,A
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V6,R2
   \   000032   8B..         MOV     ?V7,R3
   \   000034   AE..         MOV     R6,?V6
   \   000036   AF..         MOV     R7,?V7
   1613            if ( buf == NULL )
   \   000038   EE           MOV     A,R6
   \   000039   4F           ORL     A,R7
   \   00003A   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV     R1,#0x10
   \   00003E   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   1619          
   1620            *pBuf++ = Status;
   \   00004A   E5..         MOV     A,?V1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   1621            *pBuf++ = RoutingTableEntries;
   \   00004E   E5..         MOV     A,?V0
   \   000050   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1622            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_201:
   \   000053   7415         MOV     A,#0x15
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00005B   A3           INC     DPTR
   1623            *pBuf++ = RoutingListCount;
   \   00005C   E5..         MOV     A,?V5
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   08           INC     R0
   \   000061   08           INC     R0
   \   000062   A983         MOV     R1,DPH
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \   000064   75..00       MOV     ?V6,#0x0
   \   000067   7417         MOV     A,#0x17
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00006F   8074         SJMP    ??ZDP_MgmtRtgRsp_2
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_205:
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   12....       LCALL   ?Subroutine10 & 0xFFFF
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_4:
   \   00007F   5407         ANL     A,#0x7
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   F0           MOVX    @DPTR,A
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000086   EC           MOV     A,R4
   \   000087   2406         ADD     A,#0x6
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3D           ADDC    A,R5
   \   00008D   F583         MOV     DPH,A
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   5418         ANL     A,#0x18
   \   000092   6027         JZ      ??ZDP_MgmtRtgRsp_4
   1632              {
   1633                uint8 options = 0;
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000094   75..02       MOV     ?V7,#0x2
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000097   E0           MOVX    A,@DPTR
   \   000098   A2E2         MOV     C,0xE0 /* A   */.2
   \   00009A   5003         JNC     ??ZDP_MgmtRtgRsp_5
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   00009C   75..06       MOV     ?V7,#0x6
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   00009F   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A1   5007         JNC     ??ZDP_MgmtRtgRsp_6
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A3   D3           SETB    C
   \   0000A4   E5..         MOV     A,?V7
   \   0000A6   D2E0         SETB    0xE0 /* A   */.0
   \   0000A8   F5..         MOV     ?V7,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000AA   E5..         MOV     A,?V7
   \   0000AC   33           RLC     A
   \   0000AD   33           RLC     A
   \   0000AE   33           RLC     A
   \   0000AF   54F8         ANL     A,#0xf8
   \   0000B1   F5..         MOV     ?V7,A
   \   0000B3   8882         MOV     DPL,R0
   \   0000B5   8983         MOV     DPH,R1
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   45..         ORL     A,?V7
   \   0000BA   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   0000BB   8882         MOV     DPL,R0
   \   0000BD   8983         MOV     DPH,R1
   \   0000BF   A3           INC     DPTR
   \   0000C0   08           INC     R0
   \   0000C1   A983         MOV     R1,DPH
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000C3   EC           MOV     A,R4
   \   0000C4   2402         ADD     A,#0x2
   \   0000C6   F5..         MOV     ?V8,A
   \   0000C8   E4           CLR     A
   \   0000C9   3D           ADDC    A,R5
   \   0000CA   F5..         MOV     ?V9,A
   \   0000CC   85..82       MOV     DPL,?V8
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_122:
   \   0000D4   85..82       MOV     DPL,?V8
   \   0000D7   85..83       MOV     DPH,?V9
   \   0000DA   12....       LCALL   ?Subroutine17 & 0xFFFF
   1652              RoutingTableList++;    // Move to next list entry
   1653            }
   \                     ??CrossCallReturnLabel_127:
   \   0000DD   2407         ADD     A,#0x7
   \   0000DF   FC           MOV     R4,A
   \   0000E0   5001         JNC     ??ZDP_MgmtRtgRsp_7
   \   0000E2   0D           INC     R5
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000E3   05..         INC     ?V6
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000E5   E5..         MOV     A,?V6
   \   0000E7   C3           CLR     C
   \   0000E8   95..         SUBB    A,?V5
   \   0000EA   4085         JC      ??ZDP_MgmtRtgRsp_3
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000EC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EF   EA           MOV     A,R2
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   EB           MOV     A,R3
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4                ; Setup parameters for call to function fillAndSend
   \   0000F4   75..32       MOV     ?V6,#0x32
   \   0000F7   75..80       MOV     ?V7,#-0x80
   \   0000FA   78..         MOV     R0,#?V6
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   A9..         MOV     R1,?V4
   \   000101   AC..         MOV     R4,?V2
   \   000103   AD..         MOV     R5,?V3
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP101_8
   \   00010A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   E9           MOV     A,R1
   \   000113   F5..         MOV     ?V2,A
   \   000115                ; Setup parameters for call to function osal_mem_free
   \   000115   EE           MOV     A,R6
   \   000116   FA           MOV     R2,A
   \   000117   EF           MOV     A,R7
   \   000118   FB           MOV     R3,A
   \   000119   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00011C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00011F   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000121   F0           MOVX    @DPTR,A
   \   000122   A3           INC     DPTR
   \   000123   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000128   7401         MOV     A,#0x1
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   02....       LJMP    ?Subroutine4 & 0xFFFF
   1656          }
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V5,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV     B,#0x15
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00002B   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   1697          
   1698            if ( buf == NULL )
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V3
   \   000035   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   8582..       MOV     ?V6,DPL
   \   000044   8583..       MOV     ?V7,DPH
   1704          
   1705            *pBuf++ = Status;
   \   000047   E5..         MOV     A,?V10
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   1706            *pBuf++ = BindingTableEntries;
   \   00004B   E5..         MOV     A,?V5
   \   00004D   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1707            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_210:
   \   000050   7417         MOV     A,#0x17
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?Subroutine48 & 0xFFFF
   1708            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_58:
   \   000058   E5..         MOV     A,?V4
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   0A           INC     R2
   \   00005D   0A           INC     R2
   \   00005E   AB83         MOV     R3,DPH
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \   000060   75..04       MOV     ?V0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   000063   75..00       MOV     ?V1,#0x0
   \   000066   7419         MOV     A,#0x19
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00006E   8021         SJMP    ??ZDP_MgmtBindRsp_1
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1719              *pBuf++ = BindingTableList->srcEP;
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1727              {
   1728                len += extZdpBindEntrySize;
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1730                *pBuf++ = BindingTableList->dstEP;
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000070   740E         MOV     A,#0xe
   \   000072   25..         ADD     A,?V0
   \   000074   F5..         MOV     ?V0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_171:
   \   00007D   8C82         MOV     DPL,R4
   \   00007F   8D83         MOV     DPH,R5
   \   000081   A3           INC     DPTR
   \   000082   12....       LCALL   ?Subroutine48 & 0xFFFF
   1737              }
   \                     ??CrossCallReturnLabel_59:
   \   000085   0A           INC     R2
   \                     ??ZDP_MgmtBindRsp_3:
   \   000086   AB83         MOV     R3,DPH
   1738              BindingTableList++;    // Move to next list entry
   \   000088   EE           MOV     A,R6
   \   000089   2415         ADD     A,#0x15
   \   00008B   FE           MOV     R6,A
   \   00008C   5001         JNC     ??ZDP_MgmtBindRsp_4
   \   00008E   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_4:
   \   00008F   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000091   E5..         MOV     A,?V1
   \   000093   C3           CLR     C
   \   000094   95..         SUBB    A,?V4
   \   000096   505A         JNC     ??ZDP_MgmtBindRsp_5
   \   000098                ; Setup parameters for call to function sAddrExtCpy
   \   000098   EE           MOV     A,R6
   \   000099   FC           MOV     R4,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FD           MOV     R5,A
   \   00009C   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2409         ADD     A,#0x9
   \   0000B1   F8           MOV     R0,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2413         ADD     A,#0x13
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F9           MOV     R1,A
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000C9   EE           MOV     A,R6
   \   0000CA   240B         ADD     A,#0xb
   \   0000CC   FC           MOV     R4,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   FD           MOV     R5,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6403         XRL     A,#0x3
   \   0000D7   7097         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000D9   7415         MOV     A,#0x15
   \   0000DB   25..         ADD     A,?V0
   \   0000DD   F5..         MOV     ?V0,A
   \   0000DF                ; Setup parameters for call to function sAddrExtCpy
   \   0000DF   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2414         ADD     A,#0x14
   \   0000E5   F582         MOV     DPL,A
   \   0000E7   E4           CLR     A
   \   0000E8   3F           ADDC    A,R7
   \   0000E9   F583         MOV     DPH,A
   \   0000EB   12....       LCALL   ?Subroutine48 & 0xFFFF
   1739            }
   \                     ??CrossCallReturnLabel_60:
   \   0000EE   AA82         MOV     R2,DPL
   \   0000F0   8094         SJMP    ??ZDP_MgmtBindRsp_3
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_5:
   \   0000F2   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000F5   E5..         MOV     A,?V6
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E5..         MOV     A,?V7
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC                ; Setup parameters for call to function fillAndSend
   \   0000FC   75..33       MOV     ?V6,#0x33
   \   0000FF   75..80       MOV     ?V7,#-0x80
   \   000102   78..         MOV     R0,#?V6
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   A9..         MOV     R1,?V0
   \   000109   AC..         MOV     R4,?V12
   \   00010B   AD..         MOV     R5,?V13
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?XSTACK_DISP101_8
   \   000112   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   E9           MOV     A,R1
   \   00011B   FE           MOV     R6,A
   \   00011C                ; Setup parameters for call to function osal_mem_free
   \   00011C   AA..         MOV     R2,?V2
   \   00011E   AB..         MOV     R3,?V3
   \   000120   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000123   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000126   02....       LJMP    ?Subroutine3 & 0xFFFF
   1742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V8,R2
   \   000014   8B..         MOV     ?V9,R3
   \   000016   8C..         MOV     ?V7,R4
   \   000018   8D..         MOV     ?V0,R5
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V1,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000022   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V2,R2
   \   000027   8B..         MOV     ?V3,R3
   \   000029   AE..         MOV     R6,?V2
   \   00002B   AF..         MOV     R7,?V3
   1779            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   8582..       MOV     ?V2,DPL
   \   00003E   8583..       MOV     ?V3,DPH
   1785          
   1786            *pBuf++ = status;
   \   000041   E5..         MOV     A,?V7
   \   000043   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_211:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7417         MOV     A,#0x17
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine50 & 0xFFFF
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_63:
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000060   E9           MOV     A,R1
   \   000061   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000064   7419         MOV     A,#0x19
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine50 & 0xFFFF
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_64:
   \   00006C   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_109:
   \   00006F   A3           INC     DPTR
   1795          
   1796            *pBuf++ = listCount;
   \   000070   E5..         MOV     A,?V0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   0A           INC     R2
   \   000075   0A           INC     R2
   \   000076   0A           INC     R2
   \   000077   AB83         MOV     R3,DPH
   1797          
   1798            if ( listCount > 0 )
   \   000079   601A         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   741B         MOV     A,#0x1b
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086   85....       MOV     ?V4,?V0
   \   000089   AC..         MOV     R4,?V4
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000095   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000098   E5..         MOV     A,?V2
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E5..         MOV     A,?V3
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   741D         MOV     A,#0x1d
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9                ; Setup parameters for call to function fillAndSend
   \   0000A9   75..38       MOV     ?V2,#0x38
   \   0000AC   75..80       MOV     ?V3,#-0x80
   \   0000AF   78..         MOV     R0,#?V2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   A9..         MOV     R1,?V1
   \   0000B6   AC..         MOV     R4,?V8
   \   0000B8   AD..         MOV     R5,?V9
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000BF   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F5..         MOV     ?V1,A
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FB           MOV     R3,A
   \   0000CE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000D1   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D4   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E2   02....       LJMP    ?Subroutine5 & 0xFFFF
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   22           RET
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_247
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6054         JZ      ??CrossCallReturnLabel_112
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1838            }
   \                     ??CrossCallReturnLabel_247:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1842            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6035         JZ      ??ZDO_RegisterForZDOMsg_3
   1843            {
   1844              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ?Subroutine31 & 0xFFFF
   1845              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_33:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E5..         MOV     A,?V0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E5..         MOV     A,?V1
   \   000069   F0           MOVX    @DPTR,A
   1846              pNew->next = NULL;
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   000072   90....       MOV     DPTR,#zdoMsgCBs
   \   000075   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000078   4B           ORL     A,R3
   \   000079   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1848              {
   1849                pLast->next = pNew;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000081   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000084   12....       LCALL   ?Subroutine30 & 0xFFFF
   1853              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_112:
   \   000087   7900         MOV     R1,#0x0
   \   000089   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00008B   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008D   02....       LJMP    ??Subroutine93_0 & 0xFFFF
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1899              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00001B   49           ORL     A,R1
   \   00001C   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV     A,R2
   \   00004A   4B           ORL     A,R3
   \   00004B   90....       MOV     DPTR,#zdoMsgCBs
   \   00004E   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV     A,R2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EB           MOV     A,R3
   \   000054   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000061   7900         MOV     R1,#0x0
   \   000063   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP    ?Subroutine6 & 0xFFFF
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V4,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V3
   \   00001A   F5..         MOV     ?V9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_223 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   E5..         MOV     A,?V2
   \   000021   240C         ADD     A,#0xc
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   35..         ADDC    A,?V3
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000039   E8           MOV     A,R0
   \   00003A   6A           XRL     A,R2
   \   00003B   7002         JNZ     ??ZDO_SendMsgCBs_1
   \   00003D   E9           MOV     A,R1
   \   00003E   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003F   601B         JZ      ??ZDO_SendMsgCBs_2
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6A           XRL     A,R2
   \   000044   7003         JNZ     ??ZDO_SendMsgCBs_3
   \   000046   74FF         MOV     A,#-0x1
   \   000048   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004E   E9           MOV     A,R1
   \   00004F   5480         ANL     A,#0x80
   \   000051   7009         JNZ     ??ZDO_SendMsgCBs_2
   \   000053   7413         MOV     A,#0x13
   \   000055   68           XRL     A,R0
   \   000056   49           ORL     A,R1
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005C                ; Setup parameters for call to function osal_msg_allocate
   \   00005C   85..82       MOV     DPL,?V8
   \   00005F   85..83       MOV     DPH,?V9
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2417         ADD     A,#0x17
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3400         ADDC    A,#0x0
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00006D   8A..         MOV     ?V6,R2
   \   00006F   8B..         MOV     ?V7,R3
   \   000071   AE..         MOV     R6,?V6
   \   000073   AF..         MOV     R7,?V7
   1929                if ( msgPtr )
   \   000075   EE           MOV     A,R6
   \   000076   4F           ORL     A,R7
   \   000077   6078         JZ      ??ZDO_SendMsgCBs_4
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V2
   \   00007C   85....       MOV     ?V5,?V3
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C17         MOV     R4,#0x17
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   000093   85..82       MOV     DPL,?V8
   \   000096   85..83       MOV     DPH,?V9
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   603A         JZ      ??ZDO_SendMsgCBs_5
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009C   EE           MOV     A,R6
   \   00009D   2417         ADD     A,#0x17
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2413         ADD     A,#0x13
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   EA           MOV     A,R2
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EB           MOV     A,R3
   \   0000B0   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   E5..         MOV     A,?V2
   \   0000B3   2413         ADD     A,#0x13
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   35..         ADDC    A,?V3
   \   0000BA   F583         MOV     DPH,A
   \   0000BC   12....       LCALL   ?Subroutine62 & 0xFFFF
   1938                  }
   \                     ??CrossCallReturnLabel_90:
   \   0000BF   78..         MOV     R0,#?V4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C4   85..82       MOV     DPL,?V8
   \   0000C7   85..83       MOV     DPH,?V9
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D1   7403         MOV     A,#0x3
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   74D3         MOV     A,#-0x2d
   \   0000DC   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000DD                ; Setup parameters for call to function osal_msg_send
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   FB           MOV     R3,A
   \   0000E1   85..82       MOV     DPL,?V0
   \   0000E4   85..83       MOV     DPH,?V1
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F9           MOV     R1,A
   \   0000EB   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   1942                  ret = TRUE;
   \   0000EE   75..01       MOV     ?V4,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000F1   85..82       MOV     DPL,?V0
   \   0000F4   85..83       MOV     DPH,?V1
   \   0000F7   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1946            }
   \                     ??CrossCallReturnLabel_223:
   \   0000FA   E5..         MOV     A,?V0
   \   0000FC   45..         ORL     A,?V1
   \   0000FE   6003         JZ      $+5
   \   000100   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1947            return ( ret );
   \   000103   A9..         MOV     R1,?V4
   \   000105   02....       LJMP    ??Subroutine87_0 & 0xFFFF
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1966            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine38 & 0xFFFF
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_44:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine30 & 0xFFFF
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_113:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine38 & 0xFFFF
   1973            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_45:
   \   000039   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_114:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   2420         ADD     A,#0x20
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2422         ADD     A,#0x22
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   F0           MOVX    @DPTR,A
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \   00008B   8882         MOV     DPL,R0
   \   00008D   8983         MOV     DPH,R1
   \   00008F   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000092   E0           MOVX    A,@DPTR
   \   000093   C0E0         PUSH    A
   \   000095   740F         MOV     A,#0xf
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   00009D   EA           MOV     A,R2
   \   00009E   2412         ADD     A,#0x12
   \   0000A0   F582         MOV     DPL,A
   \   0000A2   E4           CLR     A
   \   0000A3   3B           ADDC    A,R3
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000A9   7411         MOV     A,#0x11
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine30 & 0xFFFF
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_115:
   \   0000B1   EA           MOV     A,R2
   \   0000B2   2424         ADD     A,#0x24
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E4           CLR     A
   \   0000B7   3B           ADDC    A,R3
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000BD   7415         MOV     A,#0x15
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine30 & 0xFFFF
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_116:
   \   0000C5                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   ??ZDO_SendMsgCBs?relay; Banked call to: ZDO_SendMsgCBs
   \   0000CC   E9           MOV     A,R1
   \   0000CD   FC           MOV     R4,A
   \   0000CE   8001         SJMP    ??ZDP_IncomingData_0
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000D0   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000D1   8E..         MOV     ?V0,R6
   \   0000D3   75..00       MOV     ?V1,#0x0
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   78..         MOV     R0,#?V0
   \   0000DA   12....       LCALL   ?S_SHL
   \   0000DD   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000DF   25..         ADD     A,?V0
   \   0000E1   F8           MOV     R0,A
   \   0000E2   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E4   35..         ADDC    A,?V1
   \   0000E6   F9           MOV     R1,A
   \   0000E7   8882         MOV     DPL,R0
   \   0000E9   8983         MOV     DPH,R1
   \   0000EB   E4           CLR     A
   \   0000EC   93           MOVC    A,@A+DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   93           MOVC    A,@A+DPTR
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   D082         POP     DPL
   \   0000F6   AA82         MOV     R2,DPL
   \   0000F8   AB83         MOV     R3,DPH
   \   0000FA   74FF         MOV     A,#-0x1
   \   0000FC   6A           XRL     A,R2
   \   0000FD   7003         JNZ     ??ZDP_IncomingData_2
   \   0000FF   74FF         MOV     A,#-0x1
   \   000101   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000102   6028         JZ      ??ZDP_IncomingData_3
   \   000104   740C         MOV     A,#0xc
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6A           XRL     A,R2
   \   00010B   7003         JNZ     ??ZDP_IncomingData_4
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   000110   70BE         JNZ     ??ZDP_IncomingData_1
   \   000112                ; Setup parameters for indirect call
   \   000112   AA..         MOV     R2,?XSP + 0
   \   000114   AB..         MOV     R3,?XSP + 1
   \   000116   8882         MOV     DPL,R0
   \   000118   8983         MOV     DPH,R1
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E4           CLR     A
   \   00011D   93           MOVC    A,@A+DPTR
   \   00011E   C0E0         PUSH    A
   \   000120   7401         MOV     A,#0x1
   \   000122   93           MOVC    A,@A+DPTR
   \   000123   F583         MOV     DPH,A
   \   000125   D082         POP     DPL
   \   000127   12....       LCALL   ?CALL_IND
   \   00012A   800A         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012C   EC           MOV     A,R4
   \   00012D   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   00012F                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012F   AA..         MOV     R2,?XSP + 0
   \   000131   AB..         MOV     R3,?XSP + 1
   \   000133   12....       LCALL   ??ZDApp_InMsgCB?relay; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   000136   7417         MOV     A,#0x17
   \   000138   02....       LJMP    ??Subroutine77_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceTimeoutReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     21   ZDP_EndDeviceTimeoutReq
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     31   ZDP_MgmtLqiRsp
        0     26   -> fillAndSend
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     25   ZDP_NwkAddrReq
        0     25   -> fillAndSend
        0     23   -> sAddrExtCmp
        0     23   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     24   ZDP_UserDescSet
        0     21   -> fillAndSend
        1     22   -> osal_memcpy
        0     19   -> osal_memset
      1     73   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     38   zdpProcessAddrReq
        0     36   -> AddrMgrEntryGet
        0     36   -> AssocGetWithExt
        0     36   -> AssocGetWithShort
        0     36   -> AssocMakeList
        0     38   -> fillAndSend
        0     36   -> osal_mem_free
        0     36   -> sAddrExtCmp
        0     36   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       4  ??Subroutine100_0
       7  ??Subroutine101_0
       7  ??Subroutine102_0
       6  ??Subroutine103_0
       8  ??Subroutine104_0
       1  ??Subroutine105_0
       3  ??Subroutine106_0
       4  ??Subroutine107_0
       5  ??Subroutine108_0
       8  ??Subroutine75_0
       5  ??Subroutine76_0
       8  ??Subroutine77_0
       5  ??Subroutine78_0
       8  ??Subroutine79_0
       5  ??Subroutine80_0
       6  ??Subroutine81_0
       4  ??Subroutine82_0
       5  ??Subroutine83_0
       4  ??Subroutine84_0
       4  ??Subroutine85_0
       6  ??Subroutine86_0
       5  ??Subroutine87_0
       3  ??Subroutine88_0
       6  ??Subroutine89_0
      10  ??Subroutine90_0
      16  ??Subroutine91_0
       5  ??Subroutine92_0
       5  ??Subroutine93_0
       8  ??Subroutine94_0
       7  ??Subroutine95_0
       5  ??Subroutine96_0
      11  ??Subroutine97_0
       6  ??Subroutine98_0
       1  ??Subroutine99_0
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_EndDeviceTimeoutReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
       3  ?Subroutine0
      10  ?Subroutine1
       5  ?Subroutine10
       3  ?Subroutine11
       3  ?Subroutine12
       6  ?Subroutine13
       1  ?Subroutine14
       1  ?Subroutine15
       7  ?Subroutine16
       1  ?Subroutine17
       7  ?Subroutine18
      12  ?Subroutine19
      10  ?Subroutine2
       5  ?Subroutine20
       4  ?Subroutine21
      13  ?Subroutine22
      15  ?Subroutine23
      10  ?Subroutine24
      16  ?Subroutine25
       5  ?Subroutine26
      13  ?Subroutine27
       6  ?Subroutine28
      13  ?Subroutine29
       2  ?Subroutine3
       1  ?Subroutine30
       7  ?Subroutine31
       3  ?Subroutine32
       8  ?Subroutine33
      18  ?Subroutine34
       1  ?Subroutine35
      10  ?Subroutine36
      10  ?Subroutine37
      10  ?Subroutine38
       3  ?Subroutine39
       5  ?Subroutine4
       3  ?Subroutine40
       2  ?Subroutine41
      15  ?Subroutine42
       6  ?Subroutine43
       3  ?Subroutine44
       9  ?Subroutine45
      10  ?Subroutine46
       3  ?Subroutine47
       6  ?Subroutine48
      12  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
       8  ?Subroutine51
       5  ?Subroutine52
       1  ?Subroutine53
       7  ?Subroutine54
       6  ?Subroutine55
       4  ?Subroutine56
      15  ?Subroutine57
       8  ?Subroutine58
      14  ?Subroutine59
       5  ?Subroutine6
       4  ?Subroutine60
       9  ?Subroutine61
       8  ?Subroutine62
       1  ?Subroutine63
      10  ?Subroutine64
       5  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
      16  ?Subroutine68
      15  ?Subroutine69
      17  ?Subroutine7
       9  ?Subroutine70
       8  ?Subroutine71
       9  ?Subroutine72
       3  ?Subroutine73
       7  ?Subroutine74
      44  ?Subroutine8
       4  ?Subroutine9
     144  ZDO_RegisterForZDOMsg
     106  ZDO_RemoveRegisteredCB
     264  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     194  ZDP_BindUnbindReq
      80  ZDP_Buf
      73  ZDP_DeviceAnnce
     154  ZDP_EPRsp
     295  ZDP_EndDeviceBindReq
      54  ZDP_EndDeviceTimeoutReq
      87  ZDP_GenericRsp
      56  ZDP_IEEEAddrReq
     315  ZDP_IncomingData
     207  ZDP_MatchDescReq
     297  ZDP_MgmtBindRsp
      31  ZDP_MgmtDirectJoinReq
      61  ZDP_MgmtLeaveReq
     356  ZDP_MgmtLqiRsp
      58  ZDP_MgmtNwkDiscReq
     319  ZDP_MgmtNwkDiscRsp
     229  ZDP_MgmtNwkUpdateNotify
     149  ZDP_MgmtNwkUpdateReq
      20  ZDP_MgmtPermitJoinReq
     304  ZDP_MgmtRtgRsp
      16  ZDP_NWKAddrOfInterestReq
     137  ZDP_NodeDescMsg
     120  ZDP_NwkAddrReq
      85  ZDP_PowerDescMsg
     106  ZDP_SendData
      79  ZDP_ServerDiscReq
      79  ZDP_ServerDiscRsp
     327  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     140  ZDP_UserDescRsp
     164  ZDP_UserDescSet
     171  fillAndSend
       2  zdoMsgCBs
      36  zdpMsgProcs
     753  zdpProcessAddrReq

 
 6 755 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    37 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 7 004 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none

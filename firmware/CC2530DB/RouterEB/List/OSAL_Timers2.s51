///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            27/Oct/2015  21:16:55 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\osal\common\OSAL_Timers2.c         /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Components\osal\common\OSAL_Timers2.c -D      /
//                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D     /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\OSAL_Timers2.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Timers2

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_FROM_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?UL_GE_X
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??osalAddTimer?relay,0203H
        FUNCTION ??osalFindTimer?relay,0203H
        PUBLIC ??osalTimerInit?relay
        FUNCTION ??osalTimerInit?relay,0203H
        PUBLIC ??osalTimerUpdate?relay
        FUNCTION ??osalTimerUpdate?relay,0203H
        PUBLIC ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,0203H
        PUBLIC ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,0203H
        PUBLIC ??osal_start_reload_timer?relay
        FUNCTION ??osal_start_reload_timer?relay,0203H
        PUBLIC ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,0203H
        PUBLIC ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,0203H
        PUBLIC ??osal_timer_num_active?relay
        FUNCTION ??osal_timer_num_active?relay,0203H
        PUBWEAK _A_IEN0
        FUNCTION osalAddTimer,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION osalFindTimer,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osalTimerInit
        FUNCTION osalTimerInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osalTimerUpdate
        FUNCTION osalTimerUpdate,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_start_timerEx
        FUNCTION osal_start_timerEx,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_timer_num_active
        FUNCTION osal_timer_num_active,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osalTimerInit       SYMBOL "osalTimerInit"
??osalTimerInit?relay SYMBOL "?relay", osalTimerInit
osalTimerUpdate     SYMBOL "osalTimerUpdate"
??osalTimerUpdate?relay SYMBOL "?relay", osalTimerUpdate
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
??osal_start_reload_timer?relay SYMBOL "?relay", osal_start_reload_timer
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
osal_timer_num_active SYMBOL "osal_timer_num_active"
??osal_timer_num_active?relay SYMBOL "?relay", osal_timer_num_active

        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\osal\common\OSAL_Timers2.c
//    1 
//    2 /**************************************************************************************************
//    3 
//    4  DESCRIPTION:
//    5   --
//    6 
//    7  CREATED: 10/02/2015, by Paolo Achdjian
//    8 
//    9  FILE: OSAL_Timers2.c
//   10 
//   11 ***************************************************************************************************/
//   12 
//   13 
//   14 /*********************************************************************
//   15  * INCLUDES
//   16  */
//   17 
//   18 #include "comdef.h"
//   19 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   20 #include "OSAL.h"
//   21 #include "OSAL_Timers.h"
//   22 #include "hal_timer.h"
//   23 
//   24 /*********************************************************************
//   25  * MACROS
//   26  */
//   27 
//   28 /*********************************************************************
//   29  * CONSTANTS
//   30  */
//   31 
//   32 /*********************************************************************
//   33  * TYPEDEFS
//   34  */
//   35 
//   36 struct TimerRec {
//   37   uint32 timeout;
//   38   uint16 eventFlag;
//   39   uint8  taskId;
//   40   uint32 reloadTimeout;
//   41 };
//   42 
//   43 /*********************************************************************
//   44  * GLOBAL VARIABLES
//   45  */
//   46 
//   47 #define MAXELEMENTS 10

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 static struct TimerRec timerRec[MAXELEMENTS];
timerRec:
        DS 110
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   49 static struct TimerRec * end = timerRec+MAXELEMENTS;
end:
        DATA16
        DS 2
        REQUIRE `?<Initializer for end>`
        REQUIRE __INIT_XDATA_I
//   50 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 static 	halIntState_t intState;
intState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   52 
//   53 /*********************************************************************
//   54  * EXTERNAL VARIABLES
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * EXTERNAL FUNCTIONS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * LOCAL VARIABLES
//   63  */
//   64 // Milliseconds since last reboot

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   65 static uint32 osal_systemClock;
osal_systemClock:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   66 
//   67 /*********************************************************************
//   68  * LOCAL FUNCTION PROTOTYPES
//   69  */
//   70 static struct TimerRec * getFreeElement(void);
//   71 static struct TimerRec * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
//   72 static struct TimerRec * osalFindTimer( uint8 task_id, uint16 event_flag );
//   73 
//   74 /*********************************************************************
//   75  * FUNCTIONS
//   76  *********************************************************************/
//   77 
//   78 
//   79 static struct TimerRec * getFreeElement(void) {
//   80 	struct TimerRec * iter = timerRec;
//   81 	
//   82 	for(;iter != end; iter++){
//   83 		if (iter->eventFlag == 0){
//   84 			return iter;
//   85 		}
//   86 	}
//   87 	return NULL;
//   88 }
//   89 
//   90 /*********************************************************************
//   91  * @fn      osalTimerInit
//   92  *
//   93  * @brief   Initialization for the OSAL Timer System.
//   94  *
//   95  * @param   none
//   96  *
//   97  * @return
//   98  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 void osalTimerInit( void ){
osalTimerInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function osalTimerInit
        CODE
        FUNCALL osalTimerInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  100   osal_systemClock = 0;
        MOV     DPTR,#osal_systemClock
        LCALL   ?Subroutine5 & 0xFFFF
//  101   osal_memset(timerRec, 0, sizeof(struct TimerRec)*MAXELEMENTS);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6e
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#timerRec & 0xff
        MOV     R3,#(timerRec >> 8) & 0xff
        LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
          CFI EndBlock cfiBlock0
//  102 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  103 
//  104 /*********************************************************************
//  105  * @fn      osalAddTimer
//  106  *
//  107  * @brief   Add a timer to the timer list.
//  108  *          Ints must be disabled.
//  109  *
//  110  * @param   task_id
//  111  * @param   event_flag
//  112  * @param   timeout
//  113  *
//  114  * @return  osalTimerRec_t * - pointer to newly created timer
//  115  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 struct TimerRec * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout ){
osalAddTimer:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function osalAddTimer
        CODE
        FUNCALL osalAddTimer, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V4,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  117  	// Look for an existing timer first
//  118 	struct TimerRec * iter;
//  119  	iter = osalFindTimer( task_id, event_flag );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
//  120  	if ( iter ) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??osalAddTimer_0
//  121 		iter->timeout = timeout;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  122 		return iter;
        SJMP    ??osalAddTimer_1
//  123 	} else {
//  124 		iter = getFreeElement();
??osalAddTimer_0:
        MOV     R2,#timerRec & 0xff
        MOV     R3,#(timerRec >> 8) & 0xff
        SJMP    ??osalAddTimer_2
??osalAddTimer_3:
        MOV     A,R2
        ADD     A,#0xb
        MOV     R2,A
        JNC     ??osalAddTimer_2
        INC     R3
??osalAddTimer_2:
        MOV     DPTR,#end
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??osalAddTimer_4
        MOV     A,R3
        XRL     A,R1
??osalAddTimer_4:
        JZ      ??osalAddTimer_5
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??osalAddTimer_3
//  125 		if ( iter ) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??osalAddTimer_5
//  126 			iter->taskId = task_id;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
//  127 			iter->eventFlag = event_flag;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  128 			iter->timeout = timeout;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  129 			iter->reloadTimeout = 0;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
//  130 			return iter;
??CrossCallReturnLabel_8:
        SJMP    ??osalAddTimer_1
//  131 		} else {
//  132 			return NULL;
??osalAddTimer_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
??osalAddTimer_1:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  133 		}
//  134 	}
//  135 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function osalTimerInit
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function osalAddTimer
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function osalTimerUpdate
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//  136 
//  137 /*********************************************************************
//  138  * @fn      osalFindTimer
//  139  *
//  140  * @brief   Find a timer in a timer list.
//  141  *          Ints must be disabled.
//  142  *
//  143  * @param   task_id
//  144  * @param   event_flag
//  145  *
//  146  * @return  index of elements or -1 if not found
//  147  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  148 struct TimerRec *  osalFindTimer( uint8 task_id, uint16 event_flag ){
osalFindTimer:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function osalFindTimer
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  149 	struct TimerRec * iter;
//  150 	iter = timerRec;	
        MOV     R4,#timerRec & 0xff
        MOV     R5,#(timerRec >> 8) & 0xff
        SJMP    ??osalFindTimer_0
//  151 	for(;iter != end; iter++){
??osalFindTimer_1:
        MOV     A,R4
        ADD     A,#0xb
        MOV     R4,A
        JNC     ??osalFindTimer_0
        INC     R5
??osalFindTimer_0:
        MOV     DPTR,#end
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R4
        XRL     A,R6
        JNZ     ??osalFindTimer_2
        MOV     A,R5
        XRL     A,R7
??osalFindTimer_2:
        JZ      ??osalFindTimer_3
//  152 		if (iter->taskId == task_id && iter->eventFlag == event_flag){
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??osalFindTimer_1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??osalFindTimer_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??osalFindTimer_4:
        JNZ     ??osalFindTimer_1
//  153 			return iter;
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        SJMP    ??osalFindTimer_5
//  154 		}
//  155 	}
//  156 	return NULL;
??osalFindTimer_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??osalFindTimer_5:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock7
//  157 }
//  158 
//  159 /*********************************************************************
//  160  * @fn      osal_start_timerEx
//  161  *
//  162  * @brief
//  163  *
//  164  *   This function is called to start a timer to expire in n mSecs.
//  165  *   When the timer expires, the calling task will get the specified event.
//  166  *
//  167  * @param   uint8 taskID - task id to set timer for
//  168  * @param   uint16 event_id - event to be notified with
//  169  * @param   uint32 timeout_value - in milliseconds.
//  170  *
//  171  * @return  SUCCESS, or NO_TIMER_AVAIL.
//  172  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  173 uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value ){
osal_start_timerEx:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function osal_start_timerEx
        CODE
        FUNCALL osal_start_timerEx, osalAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  174 	struct TimerRec * iter;
//  175 	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
//  176 
//  177 	iter = osalAddTimer( taskID, event_id, timeout_value );
        ; Setup parameters for call to function osalAddTimer
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V1,R3
        MOV     R1,?V1
//  178 
//  179 	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        LCALL   ?Subroutine4 & 0xFFFF
//  180 
//  181  	return ( (iter != NULL) ? SUCCESS : NO_TIMER_AVAIL );
??CrossCallReturnLabel_0:
        MOV     A,R2
        ORL     A,R1
        JZ      ??osal_start_timerEx_0
        MOV     R1,#0x0
        SJMP    ??osal_start_timerEx_1
??osal_start_timerEx_0:
        MOV     R1,#0x8
          CFI EndBlock cfiBlock8
??osal_start_timerEx_1:
        REQUIRE ?Subroutine1
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine1
//  182 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  183 
//  184 /*********************************************************************
//  185  * @fn      osal_start_reload_timer
//  186  *
//  187  * @brief
//  188  *
//  189  *   This function is called to start a timer to expire in n mSecs.
//  190  *   When the timer expires, the calling task will get the specified event
//  191  *   and the timer will be reloaded with the timeout value.
//  192  *
//  193  * @param   uint8 taskID - task id to set timer for
//  194  * @param   uint16 event_id - event to be notified with
//  195  * @param   UNINT16 timeout_value - in milliseconds.
//  196  *
//  197  * @return  SUCCESS, or NO_TIMER_AVAIL.
//  198  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value ){
osal_start_reload_timer:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function osal_start_reload_timer
        CODE
        FUNCALL osal_start_reload_timer, osalAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  200 	struct TimerRec * iter;
//  201 	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
//  202 
//  203 	// Add timer
//  204  	iter = osalAddTimer( taskID, event_id, timeout_value );
        ; Setup parameters for call to function osalAddTimer
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??osalAddTimer?relay ; Banked call to: osalAddTimer
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  205  	if ( iter ){
        MOV     A,R2
        ORL     A,R3
        JZ      ??osal_start_reload_timer_0
//  206  		iter->reloadTimeout = timeout_value;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  207  	}
//  208 
//  209 	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??osal_start_reload_timer_0:
        LCALL   ?Subroutine4 & 0xFFFF
//  210 
//  211 	return ( (iter != NULL) ? SUCCESS : NO_TIMER_AVAIL );
??CrossCallReturnLabel_1:
        MOV     A,R2
        ORL     A,R3
        JZ      ??osal_start_reload_timer_1
        MOV     R1,#0x0
        SJMP    ??osal_start_reload_timer_2
??osal_start_reload_timer_1:
        MOV     R1,#0x8
          CFI EndBlock cfiBlock10
??osal_start_reload_timer_2:
        REQUIRE ?Subroutine2
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine2
//  212 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  213 
//  214 /*********************************************************************
//  215  * @fn      osal_stop_timerEx
//  216  *
//  217  * @brief
//  218  *
//  219  *   This function is called to stop a timer that has already been started.
//  220  *   If ZSUCCESS, the function will cancel the timer and prevent the event
//  221  *   associated with the timer from being set for the calling task.
//  222  *
//  223  * @param   uint8 task_id - task id of timer to stop
//  224  * @param   uint16 event_id - identifier of the timer that is to be stopped
//  225  *
//  226  * @return  SUCCESS or INVALID_EVENT_ID
//  227  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  228 uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id ){
osal_stop_timerEx:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function osal_stop_timerEx
        CODE
        FUNCALL osal_stop_timerEx, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  229 	struct TimerRec * iter;
//  230  	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
//  231 
//  232  	iter = osalFindTimer( task_id, event_id );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  233  	if ( iter ){
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_stop_timerEx_0
//  234  		iter->eventFlag=0;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  235 	}
//  236 
//  237  	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??osal_stop_timerEx_0:
        LCALL   ?Subroutine4 & 0xFFFF
//  238 
//  239 	return ( (iter != NULL) ? SUCCESS : INVALID_EVENT_ID );
??CrossCallReturnLabel_2:
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_stop_timerEx_1
        MOV     R1,#0x0
        SJMP    ??osal_stop_timerEx_2
??osal_stop_timerEx_1:
        MOV     R1,#0x6
??osal_stop_timerEx_2:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock12
        REQUIRE _A_IEN0
//  240 }
//  241 
//  242 /*********************************************************************
//  243  * @fn      osal_get_timeoutEx
//  244  *
//  245  * @brief
//  246  *
//  247  * @param   uint8 task_id - task id of timer to check
//  248  * @param   uint16 event_id - identifier of timer to be checked
//  249  *
//  250  * @return  Return the timer's tick count if found, zero otherwise.
//  251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id ){
osal_get_timeoutEx:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function osal_get_timeoutEx
        CODE
        FUNCALL osal_get_timeoutEx, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  253 	struct TimerRec * iter;
//  254  	uint32 rtrn = 0;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
//  255 
//  256  	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
//  257 
//  258  	iter = osalFindTimer( task_id, event_id );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay; Banked call to: osalFindTimer
        MOV     DPL,R2
        MOV     DPH,R3
//  259 
//  260  	if ( iter ){
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??osal_get_timeoutEx_0
//  261 		rtrn = iter->timeout;
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
//  262  	}
//  263 
//  264  	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??osal_get_timeoutEx_0:
        LCALL   ?Subroutine4 & 0xFFFF
//  265 
//  266 	return rtrn;
??CrossCallReturnLabel_3:
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock13
        REQUIRE _A_IEN0
//  267 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function osal_start_timerEx
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function osal_start_reload_timer
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function osal_stop_timerEx
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function osal_get_timeoutEx
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function osal_timer_num_active
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond18) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond18) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond18) CFA_SP SP+-7
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function osalTimerUpdate
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function osalTimerUpdate
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV     DPTR,#intState
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
//  268 
//  269 /*********************************************************************
//  270  * @fn      osal_timer_num_active
//  271  *
//  272  * @brief
//  273  *
//  274  *   This function counts the number of active timers.
//  275  *
//  276  * @return  uint8 - number of timers
//  277  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  278 uint8 osal_timer_num_active( void ){
osal_timer_num_active:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function osal_timer_num_active
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  279 	struct TimerRec * iter;
//  280 	uint8 numTimers = 0;
        MOV     R1,#0x0
//  281 
//  282  	HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
//  283 
//  284 	iter = timerRec;	
        MOV     R2,#timerRec & 0xff
        MOV     R3,#(timerRec >> 8) & 0xff
        SJMP    ??osal_timer_num_active_0
//  285 	for(;iter != end; iter++){
//  286 		if (iter->eventFlag){
??osal_timer_num_active_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??osal_timer_num_active_2
//  287 			numTimers++;
        INC     R1
//  288 		}
//  289 	}
??osal_timer_num_active_2:
        MOV     A,R2
        ADD     A,#0xb
        MOV     R2,A
        JNC     ??osal_timer_num_active_0
        INC     R3
??osal_timer_num_active_0:
        MOV     DPTR,#end
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R2
        XRL     A,R4
        JNZ     ??osal_timer_num_active_3
        MOV     A,R3
        XRL     A,R5
??osal_timer_num_active_3:
        JNZ     ??osal_timer_num_active_1
//  290 
//  291 	HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        LCALL   ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock22
//  292 
//  293 	return numTimers;
??CrossCallReturnLabel_4:
        REQUIRE ?Subroutine3
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine3
//  294 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock23
//  295 
//  296 /*********************************************************************
//  297  * @fn      osalTimerUpdate
//  298  *
//  299  * @brief   Update the timer structures for a timer tick.
//  300  *
//  301  * @param   none
//  302  *
//  303  * @return  none
//  304  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 void osalTimerUpdate( uint32 updateTime ){
osalTimerUpdate:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function osalTimerUpdate
        CODE
        FUNCALL osalTimerUpdate, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  306 	struct TimerRec * iter;
//  307 	iter = timerRec;
        MOV     ?V0,#timerRec & 0xff
        MOV     ?V1,#(timerRec >> 8) & 0xff
//  308 
//  309  	HAL_ENTER_CRITICAL_SECTION( intState );  
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
//  310  	osal_systemClock += updateTime;
        MOV     DPTR,#osal_systemClock
        MOV     R0,#?V4
        LCALL   ?L_ADD_TO_X
//  311  	HAL_EXIT_CRITICAL_SECTION( intState );   
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        SJMP    ??osalTimerUpdate_0
//  312 
//  313  	// Look for open timer slot
//  314 	for (;iter != end; iter++){
//  315 		if (iter->eventFlag == 0)
//  316 			continue;
//  317 		HAL_ENTER_CRITICAL_SECTION( intState );  
//  318     	if (iter->timeout > updateTime) {
//  319         	iter->timeout -= updateTime;
//  320         } else {
//  321         	iter->timeout=0;
//  322         }
//  323 		if (iter->timeout == 0){
//  324 			osal_set_event( iter->taskId, iter->eventFlag );
//  325 			if (iter->reloadTimeout){
//  326 				iter->timeout = iter->reloadTimeout;
//  327 			} else {
//  328 				iter->eventFlag = 0;
??osalTimerUpdate_1:
        MOV     DPL,?V2
        MOV     DPH,?V3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  329 			}
//  330 		}
//  331 		HAL_EXIT_CRITICAL_SECTION( intState );   
??osalTimerUpdate_2:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,?V0
        ADD     A,#0xb
        MOV     ?V0,A
        JNC     ??osalTimerUpdate_0
        INC     ?V1
??osalTimerUpdate_0:
        MOV     DPTR,#end
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0
        XRL     A,R0
        JNZ     ??osalTimerUpdate_3
        MOV     A,?V1
        XRL     A,R1
??osalTimerUpdate_3:
        JNZ     $+5
        LJMP    ??osalTimerUpdate_4 & 0xFFFF
        MOV     A,?V0
        ADD     A,#0x4
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??CrossCallReturnLabel_6
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     DPTR,#intState
        MOVX    @DPTR,A
        CLR     0xa8.7
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     R0,#?V4
        LCALL   ?UL_GE_X
        MOV     DPL,?V0
        MOV     DPH,?V1
        JC      ??osalTimerUpdate_5
        MOV     R0,#?V4
        LCALL   ?L_SUB_FROM_X
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JNZ     ??osalTimerUpdate_2
        SJMP    ??CrossCallReturnLabel_9
??osalTimerUpdate_5:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function osal_set_event
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     A,?V8
        ORL     A,?V9
        ORL     A,?V10
        ORL     A,?V11
        JNZ     $+5
        LJMP    ??osalTimerUpdate_1 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     R0,#?V8
        LCALL   ?L_MOV_TO_X
        LJMP    ??osalTimerUpdate_2 & 0xFFFF
//  332 	}
//  333 }
??osalTimerUpdate_4:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
        REQUIRE _A_IEN0
//  334 
//  335 #ifdef POWER_SAVING
//  336 /*********************************************************************
//  337  * @fn      osal_adjust_timers
//  338  *
//  339  * @brief   Update the timer structures for elapsed ticks.
//  340  *
//  341  * @param   none
//  342  *
//  343  * @return  none
//  344  *********************************************************************/
//  345 void osal_adjust_timers( void ){
//  346 	 //Deprecated for CC2530 and CC2430 SoC.
//  347 	/*
//  348 	uint32 eTime;
//  349 
//  350  	if ( timerHead != NULL ) {
//  351 		// Compute elapsed time (msec)
//  352  		eTime = TimerElapsed() / TICK_COUNT;
//  353 
//  354 		if ( eTime ){
//  355 			osalTimerUpdate( eTime );
//  356 		}
//  357 	}
//  358 	*/
//  359 }
//  360 
//  361 /*********************************************************************
//  362  * @fn      osal_next_timeout
//  363  *
//  364  * @brief
//  365  *
//  366  *   Search timer table to return the lowest timeout value. If the
//  367  *   timer list is empty, then the returned timeout will be zero.
//  368  *
//  369  * @param   none
//  370  *
//  371  * @return  none
//  372  *********************************************************************/
//  373 uint32 osal_next_timeout( void ){
//  374 	uint32 nextTimeout;
//  375 	struct TimerRec * iter = timerRec;
//  376 	iter = timerRec;	
//  377 	
//  378 	nextTimeout=OSAL_TIMERS_MAX_TIMEOUT;
//  379 	for(;iter != end; iter++){
//  380 		if (iter->eventFlag==0)
//  381 			continue;
//  382 		if (iter->timeout < nextTimeout){
//  383 			nextTimeout = iter->timeout;
//  384 		}
//  385 	}
//  386 
//  387   	return nextTimeout;
//  388 }
//  389 #endif // POWER_SAVING
//  390 
//  391 /*********************************************************************
//  392  * @fn      osal_GetSystemClock()
//  393  *
//  394  * @brief   Read the local system clock.
//  395  *
//  396  * @param   none
//  397  *
//  398  * @return  local clock in milliseconds
//  399  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  400 uint32 osal_GetSystemClock( void ){
osal_GetSystemClock:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function osal_GetSystemClock
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  401 	return ( osal_systemClock );
        MOV     DPTR,#osal_systemClock
        LCALL   ?XLOAD_R2345
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock25
//  402 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for end>`:
        DATA16
        DW timerRec + 6EH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalTimerInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osalTimerInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalAddTimer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osalAddTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalFindTimer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osalFindTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_start_timerEx?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_start_timerEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_start_reload_timer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_start_reload_timer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_stop_timerEx?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_stop_timerEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_get_timeoutEx?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_get_timeoutEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_timer_num_active?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_timer_num_active

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalTimerUpdate?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osalTimerUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_GetSystemClock?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_GetSystemClock

        END
//  403 
//  404 /*********************************************************************
//  405 *********************************************************************/
// 
// 845 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//   2 bytes in segment XDATA_I
//   2 bytes in segment XDATA_ID
// 115 bytes in segment XDATA_Z
// 
// 907 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 1 byte shared)
// 117 bytes of XDATA memory
//
//Errors: none
//Warnings: none

///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            04/Nov/2015  21:35:00 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterBasic.c                /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\clusters\ClusterBasic.c -D SECURE=0    /
//                          -D OSC32K_CRYSTAL_INSTALLED=FALSE -D              /
//                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D      /
//                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ClusterBasic.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ClusterBasic

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??basicClusterReadAttribute?relay
        FUNCTION ??basicClusterReadAttribute?relay,0203H
        PUBLIC ??basicClusterWriteAttribute?relay
        FUNCTION ??basicClusterWriteAttribute?relay,0203H
        PUBLIC ??basicResetCB?relay
        FUNCTION ??basicResetCB?relay,0203H
        PUBLIC ??processBasicClusterCommands?relay
        FUNCTION ??processBasicClusterCommands?relay,0203H
        PUBLIC HWRevision
        PUBLIC ZCLVersion
        PUBLIC basicClusterReadAttribute
        FUNCTION basicClusterReadAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC basicClusterWriteAttribute
        FUNCTION basicClusterWriteAttribute,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC basicResetCB
        FUNCTION basicResetCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC dateCode
        PUBLIC deviceEnable
        PUBLIC locationDescription
        PUBLIC manufacturerName
        PUBLIC modelId
        PUBLIC physicalEnvironment
        PUBLIC powerSource
        PUBLIC processBasicClusterCommands
        FUNCTION processBasicClusterCommands,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
basicClusterReadAttribute SYMBOL "basicClusterReadAttribute"
??basicClusterReadAttribute?relay SYMBOL "?relay", basicClusterReadAttribute
basicClusterWriteAttribute SYMBOL "basicClusterWriteAttribute"
??basicClusterWriteAttribute?relay SYMBOL "?relay", basicClusterWriteAttribute
basicResetCB        SYMBOL "basicResetCB"
??basicResetCB?relay SYMBOL "?relay", basicResetCB
processBasicClusterCommands SYMBOL "processBasicClusterCommands"
??processBasicClusterCommands?relay SYMBOL "?relay", processBasicClusterCommands

        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Source\clusters\ClusterBasic.c
//    1 /**************************************************************************************************
//    2   Filename:       ClusterBasic.cpp
//    3 
//    4   Autorh:  Paolo Achdjia
//    5   Created: 13/10/2015
//    6 
//    7 **************************************************************************************************/
//    8 
//    9 #include "ClusterBasic.h"
//   10 #include "osal.h"
//   11 
//   12 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   13 const uint8 HWRevision = 1;
HWRevision:
        DB 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   14 const uint8 ZCLVersion = 1;
ZCLVersion:
        DB 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   15 const uint8 manufacturerName[] = { 20, 'A','c','h','d','j','i','a','n',' ','T','e','s','t',' ',' ',' ',' ',' ',' ',' ' };
manufacturerName:
        DB 20
        DB 65
        DB 99
        DB 104
        DB 100
        DB 106
        DB 105
        DB 97
        DB 110
        DB 32
        DB 84
        DB 101
        DB 115
        DB 116
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   16 const uint8 modelId[] = { 16,'z', 'P','o','w','e','r','M','e','t','e','r',' ',' ',' ',' ',' ' };
modelId:
        DB 16
        DB 122
        DB 80
        DB 111
        DB 119
        DB 101
        DB 114
        DB 77
        DB 101
        DB 116
        DB 101
        DB 114
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   17 const uint8 dateCode[] = { 16, '2','0','1','5','1','0','1','3',' ',' ',' ',' ',' ',' ',' ',' ' };
dateCode:
        DB 16
        DB 50
        DB 48
        DB 49
        DB 53
        DB 49
        DB 48
        DB 49
        DB 51
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   18 const uint8 powerSource = POWER_SOURCE_DC;
powerSource:
        DB 4
//   19 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   20 uint8 locationDescription[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };
locationDescription:
        DATA8
        DS 17
        REQUIRE `?<Initializer for locationDescription>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 uint8 physicalEnvironment = 0;
physicalEnvironment:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   22 uint8 deviceEnable = DEVICE_ENABLED;
deviceEnable:
        DATA8
        DS 1
        REQUIRE `?<Initializer for deviceEnable>`
        REQUIRE __INIT_XDATA_I
//   23 
//   24 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   25 void basicResetCB( void ){
basicResetCB:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function basicResetCB
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//   26   // Reset all attributes to default values
//   27 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//   28 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   29 void basicClusterWriteAttribute(ZclWriteAttribute_t * writeAttribute) {
basicClusterWriteAttribute:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function basicClusterWriteAttribute
        CODE
        FUNCALL basicClusterWriteAttribute, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL basicClusterWriteAttribute, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//   30 	if (writeAttribute == NULL){
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??basicClusterWriteAttribute_0 & 0xFFFF
//   31 		return;
//   32 	}
//   33 	writeAttribute->status=ZCL_STATUS_SUCCESS;
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
//   34 	switch(writeAttribute->attrId){
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??basicClusterWriteAttribute_1 & 0xFFFF
        MOV     A,?V0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for basicClusterWriteAttribute>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        17
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterWriteAttribute_1
        CODE
//   35 	case ATTRID_BASIC_HW_VERSION:
//   36 	case ATTRID_BASIC_ZCL_VERSION:
//   37 	case ATTRID_BASIC_MANUFACTURER_NAME:
//   38 	case ATTRID_BASIC_MODEL_ID:
//   39 	case ATTRID_BASIC_DATE_CODE:
//   40 	case ATTRID_BASIC_POWER_SOURCE:
//   41 		writeAttribute->status=ZCL_STATUS_READ_ONLY;
??basicClusterWriteAttribute_2:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        SJMP    ??basicClusterWriteAttribute_6
//   42 		break;
//   43 	case ATTRID_BASIC_LOCATION_DESC:
//   44 		if (writeAttribute->dataType == ZCL_DATATYPE_CHAR_STR)
??basicClusterWriteAttribute_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x42
        JNZ     ??basicClusterWriteAttribute_7
//   45 			osal_memcpy((void *)&locationDescription, writeAttribute->dataPtr, writeAttribute->len);
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#locationDescription & 0xff
        MOV     R3,#(locationDescription >> 8) & 0xff
        SJMP    ??basicClusterWriteAttribute_8
          CFI CFA_XSP16 add(XSP16, 11)
//   46 		else
//   47 			writeAttribute->status = ZCL_STATUS_INVALID_DATA_TYPE;
//   48 		break;
//   49 	case ATTRID_BASIC_PHYSICAL_ENV:
//   50 		if (writeAttribute->dataType == ZCL_DATATYPE_ENUM8)
??basicClusterWriteAttribute_4:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??basicClusterWriteAttribute_7
//   51 			osal_memcpy((void *)&physicalEnvironment, writeAttribute->dataPtr, writeAttribute->len);
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#physicalEnvironment & 0xff
        MOV     R3,#(physicalEnvironment >> 8) & 0xff
??basicClusterWriteAttribute_8:
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        SJMP    ??basicClusterWriteAttribute_0
//   52 		else 
//   53 			writeAttribute->status = ZCL_STATUS_INVALID_DATA_TYPE;
//   54 		break;
//   55 	case ATTRID_BASIC_DEVICE_ENABLED:
//   56 		if (writeAttribute->dataType == ZCL_DATATYPE_BOOLEAN)
??basicClusterWriteAttribute_5:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??basicClusterWriteAttribute_7
//   57 			deviceEnable = *(uint8 *)writeAttribute->dataPtr;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     DPTR,#deviceEnable
        SJMP    ??basicClusterWriteAttribute_6
//   58 		else 
//   59 			writeAttribute->status = ZCL_STATUS_INVALID_DATA_TYPE;
??basicClusterWriteAttribute_7:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x73
        SJMP    ??basicClusterWriteAttribute_6
//   60 		break;
//   61 	default:
//   62 		writeAttribute->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??basicClusterWriteAttribute_1:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x7a
??basicClusterWriteAttribute_6:
        MOVX    @DPTR,A
//   63 	}
//   64 }
??basicClusterWriteAttribute_0:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function basicClusterWriteAttribute
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function basicClusterWriteAttribute
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
//   65 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   66 void basicClusterReadAttribute(zclAttrRec_t * statusRec){
basicClusterReadAttribute:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function basicClusterReadAttribute
        CODE
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//   67 	if (statusRec == NULL){
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??basicClusterReadAttribute_0 & 0xFFFF
//   68 		return;
//   69 	}
//   70 	statusRec->attr.accessControl = ACCESS_CONTROL_READ;
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//   71 	switch(statusRec->attr.attrId){
        MOV     R4,#ZCLVersion & 0xff
        MOV     R5,#(ZCLVersion >> 8) & 0xff
        MOV     A,R2
        ADD     A,#0x6
        INC     R0
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??basicClusterReadAttribute_1 & 0xFFFF
        MOV     A,?V4
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for basicClusterReadAttribute>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        17
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??basicClusterReadAttribute_1
        CODE
//   72 	case ATTRID_BASIC_HW_VERSION:
//   73 		statusRec->attr.dataType = ZCL_DATATYPE_UINT8;
??basicClusterReadAttribute_3:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x20
        LCALL   ??Subroutine2_0 & 0xFFFF
//   74 		statusRec->attr.dataPtr = (void *)&HWRevision;
??CrossCallReturnLabel_5:
        MOV     A,#HWRevision & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(HWRevision >> 8) & 0xff
        LJMP    ??basicClusterReadAttribute_11 & 0xFFFF
//   75 		break;
//   76 	case ATTRID_BASIC_ZCL_VERSION:
//   77 		statusRec->attr.dataType = ZCL_DATATYPE_UINT8;
??basicClusterReadAttribute_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x20
        SJMP    ??basicClusterReadAttribute_12
//   78 		statusRec->attr.dataPtr = (void *)&ZCLVersion;
//   79 		break;
//   80 	case ATTRID_BASIC_MANUFACTURER_NAME:
//   81 		statusRec->attr.dataType = ZCL_DATATYPE_CHAR_STR;
??basicClusterReadAttribute_4:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x42
??basicClusterReadAttribute_12:
        LCALL   ??Subroutine2_0 & 0xFFFF
//   82 		statusRec->attr.dataPtr = (void *)&ZCLVersion;
??CrossCallReturnLabel_6:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        SJMP    ??basicClusterReadAttribute_11
//   83 		break;
//   84 	case ATTRID_BASIC_MODEL_ID:
//   85 		statusRec->attr.dataType = ZCL_DATATYPE_CHAR_STR;
??basicClusterReadAttribute_5:
        LCALL   ?Subroutine0 & 0xFFFF
//   86 		statusRec->attr.dataPtr = (void *)&modelId;
??CrossCallReturnLabel_2:
        MOV     A,#modelId & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(modelId >> 8) & 0xff
        SJMP    ??basicClusterReadAttribute_11
//   87 		break;
//   88 	case ATTRID_BASIC_DATE_CODE:
//   89 		statusRec->attr.dataType = ZCL_DATATYPE_CHAR_STR;
??basicClusterReadAttribute_6:
        LCALL   ?Subroutine0 & 0xFFFF
//   90 		statusRec->attr.dataPtr = (void *)&dateCode;
??CrossCallReturnLabel_3:
        MOV     A,#dateCode & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(dateCode >> 8) & 0xff
        SJMP    ??basicClusterReadAttribute_11
//   91 		break;
//   92 	case ATTRID_BASIC_POWER_SOURCE:
//   93 		statusRec->attr.dataType = ZCL_DATATYPE_ENUM8;
??basicClusterReadAttribute_7:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x30
        LCALL   ??Subroutine2_0 & 0xFFFF
//   94 		statusRec->attr.dataPtr = (void *)&powerSource;
??CrossCallReturnLabel_7:
        MOV     A,#powerSource & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(powerSource >> 8) & 0xff
        SJMP    ??basicClusterReadAttribute_11
//   95 		break;
//   96 	case ATTRID_BASIC_LOCATION_DESC:
//   97 		statusRec->attr.dataType = ZCL_DATATYPE_CHAR_STR;
??basicClusterReadAttribute_8:
        LCALL   ?Subroutine0 & 0xFFFF
//   98 		statusRec->attr.dataPtr = (void *)&locationDescription;
??CrossCallReturnLabel_4:
        MOV     A,#locationDescription & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(locationDescription >> 8) & 0xff
        SJMP    ??basicClusterReadAttribute_13
//   99 		statusRec->attr.accessControl = ACCESS_CONTROL_R_W; 
//  100 		break;
//  101 	case ATTRID_BASIC_PHYSICAL_ENV:
//  102 		statusRec->attr.dataType = ZCL_DATATYPE_ENUM8;
??basicClusterReadAttribute_9:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x30
        LCALL   ??Subroutine2_0 & 0xFFFF
//  103 		statusRec->attr.dataPtr = (void *)&physicalEnvironment;
??CrossCallReturnLabel_8:
        MOV     A,#physicalEnvironment & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(physicalEnvironment >> 8) & 0xff
        SJMP    ??basicClusterReadAttribute_13
//  104 		statusRec->attr.accessControl = ACCESS_CONTROL_R_W; 
//  105 		break;
//  106 	case ATTRID_BASIC_DEVICE_ENABLED:
//  107 		statusRec->attr.dataType = ZCL_DATATYPE_BOOLEAN;
??basicClusterReadAttribute_10:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x10
        LCALL   ??Subroutine2_0 & 0xFFFF
//  108 		statusRec->attr.dataPtr = (void *)&deviceEnable;
??CrossCallReturnLabel_9:
        MOV     A,#deviceEnable & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(deviceEnable >> 8) & 0xff
??basicClusterReadAttribute_13:
        MOVX    @DPTR,A
//  109 		statusRec->attr.accessControl = ACCESS_CONTROL_R_W; 
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#0x3
        SJMP    ??basicClusterReadAttribute_11
//  110 		break;
//  111 	default:
//  112 		statusRec->attr.status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??basicClusterReadAttribute_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x7a
??basicClusterReadAttribute_11:
        MOVX    @DPTR,A
//  113 	}
//  114 }
??basicClusterReadAttribute_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function basicClusterReadAttribute
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function basicClusterReadAttribute
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function basicClusterReadAttribute
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x42
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine2_0
        ; // Fall through to label ??Subroutine2_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine2_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function basicClusterReadAttribute
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function basicClusterReadAttribute
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function basicClusterReadAttribute
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function basicClusterReadAttribute
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function basicClusterReadAttribute
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function basicClusterReadAttribute
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function basicClusterReadAttribute
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function basicClusterReadAttribute
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  115 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 ZStatus_t processBasicClusterCommands( zclIncoming_t *pInMsg ){
processBasicClusterCommands:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function processBasicClusterCommands
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  117 	if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) ) {
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x8
        JNZ     ??processBasicClusterCommands_0
//  118 		switch(pInMsg->hdr.commandID){
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??processBasicClusterCommands_0
//  119 			case COMMAND_BASIC_RESET_FACT_DEFAULT:
//  120 				basicResetCB();
//  121 				return ZSuccess;
//  122 		default:
//  123       		return ZFailure;   // Error ignore the command
        MOV     R1,#0x1
        SJMP    ??processBasicClusterCommands_1
//  124 		}
//  125 	}
//  126 	return ZSuccess;
??processBasicClusterCommands_0:
        MOV     R1,#0x0
??processBasicClusterCommands_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
//  127 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for locationDescription>`:
        DATA8
        DB 16
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for deviceEnable>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??basicResetCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    basicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??basicClusterWriteAttribute?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    basicClusterWriteAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??basicClusterReadAttribute?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    basicClusterReadAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processBasicClusterCommands?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processBasicClusterCommands

        END
// 
// 545 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//  18 bytes in segment XDATA_I
//  18 bytes in segment XDATA_ID
//  58 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
// 587 bytes of CODE  memory
//  58 bytes of CONST memory
//  19 bytes of XDATA memory
//
//Errors: none
//Warnings: none

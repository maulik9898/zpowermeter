###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             27/Oct/2015  21:12:22 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\af\AF.c                        #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\af\AF.c -D SECURE=0 -D         #
#                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE    #
#                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN -D  #
#                          NV_INIT -D xNV_RESTORE -D MULTICAST_ENABLED=FALSE  #
#                          -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D          #
#                          FEATURE_SYSTEM_STATS -lC                           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\AF.lst                   #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\AF.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39295 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn ){
   \                     afRegisterExtended:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    140            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV     R2,#0xb
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
    141          
    142            if (ep != NULL) {
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6042         JZ      ??CrossCallReturnLabel_69
    143              ep->nextDesc = epList;
   \   000018   90....       MOV     DPTR,#epList
   \   00001B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00001E   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    144              epList = ep;
   \                     ??CrossCallReturnLabel_68:
   \   000021   90....       MOV     DPTR,#epList
   \   000024   EA           MOV     A,R2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine35 & 0xFFFF
    145              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_59:
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   12....       LCALL   ?Subroutine27 & 0xFFFF
    146              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_46:
   \   000032   A3           INC     DPTR
   \   000033   E5..         MOV     A,?V0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   12....       LCALL   ?Subroutine26 & 0xFFFF
    147              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_44:
   \   000039   A3           INC     DPTR
   \   00003A   7432         MOV     A,#0x32
   \   00003C   12....       LCALL   ?Subroutine25 & 0xFFFF
    148              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_42:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?Subroutine25 & 0xFFFF
    149              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_43:
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    150              ep->pfnApplCB = applFn;
   \   000046   740C         MOV     A,#0xc
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine12 & 0xFFFF
    151            }
   \                     ??CrossCallReturnLabel_17:
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    152          
    153            return ep;
   \                     ??CrossCallReturnLabel_69:
   \   00005A   02....       LJMP    ?Subroutine0 & 0xFFFF
    154          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC     DPTR
   \   000001   E5..         MOV     A,?V1
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    155          
    156          /*********************************************************************
    157           * @fn      afRegister
    158           *
    159           * @brief   Register an Application's EndPoint description.
    160           *
    161           * @param   epDesc - pointer to the Application's endpoint descriptor.
    162           *
    163           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    164           *
    165           * @return  afStatus_SUCCESS - Registered
    166           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    167           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          afStatus_t afRegister( endPointDesc_t *epDesc ){
   \                     afRegister:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    170          	if (afFindEndPointDescList(epDesc->endPoint)){  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV     ?V1,R3
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   6004         JZ      ??afRegister_0
    171              	return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV     R1,#0x2
   \   00001B   8027         SJMP    ??afRegister_1
    172          	}
    173          
    174          	return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR     A
   \   00001E   F5..         MOV     ?V0,A
   \   000020   F5..         MOV     ?V1,A
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   ??afRegisterExtended?relay; Banked call to: afRegisterExtended
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   8B..         MOV     ?V1,R3
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V1
   \   00003C   7004         JNZ     ??afRegister_2
   \   00003E   7910         MOV     R1,#0x10
   \   000040   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP    ?Subroutine1 & 0xFFFF
    175          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    176          
    177          /*********************************************************************
    178           * @fn      afDelete
    179           *
    180           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    181           *
    182           * @param   EndPoint - Application Endpoint to delete
    183           *
    184           * @return  afStatus_SUCCESS - endpoint deleted
    185           *          afStatus_INVALID_PARAMETER - endpoint not found
    186           *          afStatus_FAILED - endpoint list empty
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    189          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    190            epList_t *epCurrent;
    191            epList_t *epPrevious;
    192          
    193            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000D   6036         JZ      ??afDelete_0
    194            {
    195              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000015   F9           MOV     R1,A
    196          
    197              // first element of the list matches
    198              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000019   7009         JNZ     ??afDelete_1
    199              {
    200                epList = epCurrent->nextDesc;
   \   00001B   90....       MOV     DPTR,#epList
   \   00001E   8015         SJMP    ??afDelete_2
    201                osal_mem_free( epCurrent );
    202          
    203                return ( afStatus_SUCCESS );
    204              }
    205              else
    206              {
    207                // search the list
    208                for ( epCurrent = epPrevious->nextDesc;
    209                      epCurrent != NULL;
    210                      epCurrent = epCurrent->nextDesc )
    211                {
    212                  if ( epCurrent->epDesc->endPoint == EndPoint )
    213                  {
    214                    epPrevious->nextDesc = epCurrent->nextDesc;
    215                    osal_mem_free( epCurrent );
    216          
    217                    // delete the entry and free the memory
    218                    return ( afStatus_SUCCESS );
    219                  }
    220                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   000020   EA           MOV     A,R2
   \   000021   F8           MOV     R0,A
   \   000022   EB           MOV     A,R3
   \   000023   F9           MOV     R1,A
   \                     ??afDelete_1:
   \   000024   EC           MOV     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   ED           MOV     A,R5
   \   000027   FB           MOV     R3,A
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6015         JZ      ??afDelete_4
   \   00002C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002F   70EF         JNZ     ??afDelete_3
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \                     ??afDelete_2:
   \   000035   EC           MOV     A,R4
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   ED           MOV     A,R5
   \   000039   F0           MOVX    @DPTR,A
   \   00003A                ; Setup parameters for call to function osal_mem_free
   \   00003A   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   8006         SJMP    ??afDelete_5
    221                }
    222              }
    223          
    224              // no endpoint found
    225              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000041   7902         MOV     R1,#0x2
   \   000043   8002         SJMP    ??afDelete_5
    226            }
    227            else
    228            {
    229              // epList is empty
    230              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000045   7901         MOV     R1,#0x1
    231            }
   \                     ??afDelete_5:
   \   000047                REQUIRE ?Subroutine2
   \   000047                ; // Fall through to label ?Subroutine2
    232          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FD           MOV     R5,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8F82         MOV     DPL,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6E           XRL     A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    233          
    234          /*********************************************************************
    235           * @fn          afDataConfirm
    236           *
    237           * @brief       This function will generate the Data Confirm back to
    238           *              the application.
    239           *
    240           * @param       endPoint - confirm end point
    241           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    242           * @param       status - status of APSDE_DATA_REQUEST
    243           *
    244           * @return      none
    245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    247          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    248            endPointDesc_t *epDesc;
    249            afDataConfirm_t *msgPtr;
    250          
    251            // Find the endpoint description
    252            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV     ?V4,R2
   \   000010   8B..         MOV     ?V5,R3
   \   000012   AE..         MOV     R6,?V4
   \   000014   AF..         MOV     R7,?V5
    253            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   6020         JZ      ??afDataConfirm_0
    254              return;
    255          
    256            // Determine the incoming command type
    257            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV     R2,#0x4
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
    258            if ( msgPtr )
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   6015         JZ      ??afDataConfirm_0
    259            {
    260              // Build the Data Confirm message
    261              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   F0           MOVX    @DPTR,A
    262              msgPtr->hdr.status = status;
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V2
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
    263              msgPtr->endpoint = endPoint;
    264              msgPtr->transID = transID;
    265          
    266          #if defined ( MT_AF_CB_FUNC )
    267              /* If MT has subscribed for this callback, don't send as a message. */
    268              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    269              {
    270                /* Send callback if it's subscribed */
    271                MT_AfDataConfirm ((void *)msgPtr);
    272                /* Release the memory. */
    273                osal_msg_deallocate( (void *)msgPtr );
    274              }
    275              else
    276          #endif
    277              {
    278                /* send message through task message */
    279                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    280              }
    281            }
   \                     ??CrossCallReturnLabel_38:
   \   000032   E5..         MOV     A,?V1
   \   000034   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000037   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    282          }
   \                     ??afDataConfirm_0:
   \   00003A   7F06         MOV     R7,#0x6
   \   00003C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine36_0
   \   000005                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E5..         MOV     A,?V0
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    283          
    284          /*********************************************************************
    285           * @fn          afReflectError
    286           *
    287           * @brief       This function will generate the Reflect Error message to
    288           *              the application.
    289           *
    290           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    291           * @param       dstAddr - intended destination
    292           * @param       endPoint - confirm end point
    293           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    294           * @param       status - status of APSDE_DATA_REQUEST
    295           *
    296           * @return      none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afReflectError:
    299          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V4,R5
    300            endPointDesc_t *epDesc;
    301            afReflectError_t *msgPtr;
    302          
    303            // Find the endpoint description
    304            epDesc = afFindEndPointDesc( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDesc
   \   00000F   A9..         MOV     R1,?V0
   \   000011   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000014   8A..         MOV     ?V6,R2
   \   000016   8B..         MOV     ?V7,R3
   \   000018   AE..         MOV     R6,?V6
   \   00001A   AF..         MOV     R7,?V7
    305            if ( epDesc == NULL )
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6034         JZ      ??afReflectError_0
    306              return;
    307          
    308            // Determine the incoming command type
    309            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A07         MOV     R2,#0x7
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
    310            if ( msgPtr )
   \   000027   EA           MOV     A,R2
   \   000028   4B           ORL     A,R3
   \   000029   6029         JZ      ??afReflectError_0
    311            {
    312              // Build the Data Confirm message
    313              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   74FE         MOV     A,#-0x2
   \   000031   F0           MOVX    @DPTR,A
    314              msgPtr->hdr.status = status;
   \   000032   7410         MOV     A,#0x10
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E0           MOVX    A,@DPTR
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   A3           INC     DPTR
   \   00003D   12....       LCALL   ?Subroutine22 & 0xFFFF
    315              msgPtr->endpoint = endPoint;
    316              msgPtr->transID = transID;
    317              msgPtr->dstAddrMode = dstAddrMode;
    318              msgPtr->dstAddr = dstAddr;
    319          
    320          #if defined ( MT_AF_CB_FUNC )
    321              /* If MT has subscribed for this callback, don't send as a message. */
    322              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    323              {
    324                /* Send callback if it's subscribed */
    325                MT_AfReflectError( (void *)msgPtr );
    326                /* Release the memory. */
    327                osal_msg_deallocate( (void *)msgPtr );
    328              }
    329              else
    330          #endif
    331              {
    332                /* send message through task message */
    333                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    334              }
    335            }
   \                     ??CrossCallReturnLabel_39:
   \   000040   E5..         MOV     A,?V4
   \   000042   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000045   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000048   E5..         MOV     A,?V2
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V3
   \   00004E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000051   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    336          }
   \                     ??afReflectError_0:
   \   000054                REQUIRE ?Subroutine3
   \   000054                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    337          
    338          /*********************************************************************
    339           * @fn          afIncomingData
    340           *
    341           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    342           *
    343           * @param       aff  - pointer to APS frame format
    344           * @param       SrcAddress  - Source address
    345           * @param       SrcPanId  - Source PAN ID
    346           * @param       sig - incoming message's link quality
    347           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    348           * @param       SecurityUse - Security enable/disable
    349           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    350           * @param       radius - incoming messages received radius
    351           *
    352           * @return      none
    353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    355                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    356                               uint32 timestamp, uint8 radius )
    357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V8,R2
   \   00001E   8B..         MOV     ?V9,R3
    358            endPointDesc_t *epDesc = NULL;
    359            epList_t *pList = epList;
   \   000020   90....       MOV     DPTR,#epList
   \   000023   12....       LCALL   ?Subroutine11 & 0xFFFF
    360          #if !defined ( APS_NO_GROUPS )
    361            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_13:
   \   000026   75..FE       MOV     ?V4,#-0x2
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   540C         ANL     A,#0xc
   \   000030   640C         XRL     A,#0xc
   \   000032   7026         JNZ     ??afIncomingData_0
    362          #endif
    363          
    364            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    365            {
    366          #if !defined ( APS_NO_GROUPS )
    367              // Find the first endpoint for this group
    368              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000034                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000034   79FE         MOV     R1,#-0x2
   \   000036   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000039   12....       LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
   \   00003C   E9           MOV     A,R1
   \   00003D   F5..         MOV     ?V4,A
    369              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   00003F   74FE         MOV     A,#-0x2
   \   000041   65..         XRL     A,?V4
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    370                return;   // No endpoint found
    371          
    372              epDesc = afFindEndPointDesc( grpEp );
   \   000048                ; Setup parameters for call to function afFindEndPointDesc
   \   000048   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   00004B   8A..         MOV     ?V0,R2
   \   00004D   8B..         MOV     ?V1,R3
   \   00004F   AE..         MOV     R6,?V0
   \   000051   AF..         MOV     R7,?V1
    373              if ( epDesc == NULL )
   \   000053   EE           MOV     A,R6
   \   000054   4F           ORL     A,R7
   \   000055   704D         JNZ     ??afIncomingData_2
    374                return;   // Endpoint descriptor not found
   \   000057   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    375          
    376              pList = afFindEndPointDescList( epDesc->endPoint );
    377          #else
    378              return; // Not supported
    379          #endif
    380            }
    381            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   74FF         MOV     A,#-0x1
   \   000060   69           XRL     A,R1
   \   000061   702E         JNZ     ??afIncomingData_3
    382            {
    383              // Set the list
    384              if ( pList != NULL )
   \   000063   E5..         MOV     A,?V6
   \   000065   45..         ORL     A,?V7
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    385              {
    386                epDesc = pList->epDesc;
   \   00006C   85..82       MOV     DPL,?V6
   \   00006F   85..83       MOV     DPH,?V7
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FE           MOV     R6,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   000079   741B         MOV     A,#0x1b
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F5..         MOV     ?V14,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V15,A
   \   000085   7420         MOV     A,#0x20
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?L_MOV_X
   \   00008F   802F         SJMP    ??afIncomingData_5
    387              }
    388            }
    389            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000091                ; Setup parameters for call to function afFindEndPointDesc
   \   000091   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000094   8A..         MOV     ?V0,R2
   \   000096   8B..         MOV     ?V1,R3
   \   000098   A8..         MOV     R0,?V0
   \   00009A   A9..         MOV     R1,?V1
   \   00009C   E8           MOV     A,R0
   \   00009D   FE           MOV     R6,A
   \   00009E   E9           MOV     A,R1
   \   00009F   FF           MOV     R7,A
   \   0000A0   E8           MOV     A,R0
   \   0000A1   49           ORL     A,R1
   \   0000A2   60D5         JZ      ??afIncomingData_4
    390            {
    391              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000A4                ; Setup parameters for call to function afFindEndPointDescList
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F9           MOV     R1,A
   \   0000AA   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   0000AD   8A..         MOV     ?V6,R2
   \   0000AF   8B..         MOV     ?V7,R3
   \   0000B1   80C6         SJMP    ??afIncomingData_4
    392            }
    393          
    394            while ( epDesc )
    395            {
    396              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    397          
    398              if ( pList->pfnDescCB )
    399              {
    400                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    401                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    402                if ( pID )
    403                {
    404                  epProfileID = *pID;
    405                  osal_mem_free( pID );
    406                }
    407              }
    408              else if ( epDesc->simpleDesc )
    409              {
    410                epProfileID = epDesc->simpleDesc->AppProfId;
    411              }
    412          
    413              // First part of verification is to make sure that:
    414              // the local Endpoint ProfileID matches the received ProfileID OR
    415              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    416              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    417              if ( (aff->ProfileID == epProfileID) ||
    418                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    419                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    420              {
    421                // Save original endpoint
    422                uint8 endpoint = aff->DstEndPoint;
    423          
    424                // overwrite with descriptor's endpoint
    425                aff->DstEndPoint = epDesc->endPoint;
    426          
    427                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    428                                   nwkSeqNum, SecurityUse, timestamp, radius );
    429          
    430                // Restore with original endpoint
    431                aff->DstEndPoint = endpoint;
    432              }
    433          
    434              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    435              {
    436          #if !defined ( APS_NO_GROUPS )
    437                // Find the next endpoint for this group
    438                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    439                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    440                  return;   // No endpoint found
    441          
    442                epDesc = afFindEndPointDesc( grpEp );
    443                if ( epDesc == NULL )
    444                  return;   // Endpoint descriptor not found
    445          
    446                pList = afFindEndPointDescList( epDesc->endPoint );
    447          #else
    448                return;
    449          #endif
    450              }
    451              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    452              {
    453                pList = pList->nextDesc;
    454                if ( pList )
    455                  epDesc = pList->epDesc;
   \                     ??afIncomingData_6:
   \   0000B3   85..82       MOV     DPL,?V6
   \   0000B6   85..83       MOV     DPH,?V7
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FE           MOV     R6,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FF           MOV     R7,A
   \                     ??afIncomingData_5:
   \   0000C0   EE           MOV     A,R6
   \   0000C1   4F           ORL     A,R7
   \   0000C2   7003         JNZ     $+5
   \   0000C4   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000C7   800D         SJMP    ??afIncomingData_7
   \                     ??afIncomingData_8:
   \   0000C9                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   0000D2   8A..         MOV     ?V6,R2
   \   0000D4   8B..         MOV     ?V7,R3
   \                     ??afIncomingData_7:
   \   0000D6   75..FE       MOV     ?V10,#-0x2
   \   0000D9   75..FF       MOV     ?V11,#-0x1
   \   0000DC   85..82       MOV     DPL,?V6
   \   0000DF   85..83       MOV     DPH,?V7
   \   0000E2   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   601A         JZ      ??afIncomingData_9
   \   0000EB                ; Setup parameters for indirect call
   \   0000EB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000EE   12....       LCALL   ?CALL_IND
   \   0000F1   EA           MOV     A,R2
   \   0000F2   4B           ORL     A,R3
   \   0000F3   601D         JZ      ??afIncomingData_10
   \   0000F5   8A82         MOV     DPL,R2
   \   0000F7   8B83         MOV     DPH,R3
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V10,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F5..         MOV     ?V11,A
   \   000100                ; Setup parameters for call to function osal_mem_free
   \   000100   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000103   800D         SJMP    ??afIncomingData_10
   \                     ??afIncomingData_9:
   \   000105   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000108   6008         JZ      ??afIncomingData_10
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F5..         MOV     ?V10,A
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F5..         MOV     ?V11,A
   \                     ??afIncomingData_10:
   \   000112   85..82       MOV     DPL,?V8
   \   000115   85..83       MOV     DPH,?V9
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FA           MOV     R2,A
   \   000125   E5..         MOV     A,?V10
   \   000127   68           XRL     A,R0
   \   000128   7003         JNZ     ??afIncomingData_11
   \   00012A   E5..         MOV     A,?V11
   \   00012C   69           XRL     A,R1
   \                     ??afIncomingData_11:
   \   00012D   6013         JZ      ??afIncomingData_12
   \   00012F   EA           MOV     A,R2
   \   000130   7006         JNZ     ??afIncomingData_13
   \   000132   E8           MOV     A,R0
   \   000133   49           ORL     A,R1
   \   000134   7077         JNZ     ??afIncomingData_14
   \   000136   800A         SJMP    ??afIncomingData_12
   \                     ??afIncomingData_13:
   \   000138   74FF         MOV     A,#-0x1
   \   00013A   68           XRL     A,R0
   \   00013B   7003         JNZ     ??afIncomingData_15
   \   00013D   74FF         MOV     A,#-0x1
   \   00013F   69           XRL     A,R1
   \                     ??afIncomingData_15:
   \   000140   706B         JNZ     ??afIncomingData_14
   \                     ??afIncomingData_12:
   \   000142   85..82       MOV     DPL,?V8
   \   000145   85..83       MOV     DPH,?V9
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F5..         MOV     ?V5,A
   \   00014D   EA           MOV     A,R2
   \   00014E   85..82       MOV     DPL,?V8
   \   000151   85..83       MOV     DPH,?V9
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   F0           MOVX    @DPTR,A
   \   000157                ; Setup parameters for call to function afBuildMSGIncoming
   \   000157   7424         MOV     A,#0x24
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F5..         MOV     ?V10,A
   \   00015F   78..         MOV     R0,#?V10
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000164   78..         MOV     R0,#?V0
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000169   7424         MOV     A,#0x24
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F5..         MOV     ?V10,A
   \   000171   78..         MOV     R0,#?V10
   \   000173   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000176   7423         MOV     A,#0x23
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00017E   78..         MOV     R0,#?V14
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   740B         MOV     A,#0xb
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00018B   740C         MOV     A,#0xc
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   E0           MOVX    A,@DPTR
   \   000191   F9           MOV     R1,A
   \   000192   EE           MOV     A,R6
   \   000193   FC           MOV     R4,A
   \   000194   EF           MOV     A,R7
   \   000195   FD           MOV     R5,A
   \   000196   AA..         MOV     R2,?V8
   \   000198   AB..         MOV     R3,?V9
   \   00019A   12....       LCALL   ??afBuildMSGIncoming?relay; Banked call to: afBuildMSGIncoming
   \   00019D   740C         MOV     A,#0xc
   \   00019F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A2   85..82       MOV     DPL,?V8
   \   0001A5   85..83       MOV     DPH,?V9
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   E5..         MOV     A,?V5
   \   0001AC   F0           MOVX    @DPTR,A
   \                     ??afIncomingData_14:
   \   0001AD   85..82       MOV     DPL,?V8
   \   0001B0   85..83       MOV     DPH,?V9
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   540C         ANL     A,#0xc
   \   0001B6   640C         XRL     A,#0xc
   \   0001B8   7025         JNZ     ??afIncomingData_16
   \   0001BA                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001BA   A9..         MOV     R1,?V4
   \   0001BC   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0001BF   12....       LCALL   ??aps_FindGroupForEndpoint?relay; Banked call to: aps_FindGroupForEndpoint
   \   0001C2   E9           MOV     A,R1
   \   0001C3   F5..         MOV     ?V4,A
   \   0001C5   74FE         MOV     A,#-0x2
   \   0001C7   65..         XRL     A,?V4
   \   0001C9   602C         JZ      ??afIncomingData_1
   \   0001CB                ; Setup parameters for call to function afFindEndPointDesc
   \   0001CB   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   0001CE   8A..         MOV     ?V6,R2
   \   0001D0   8B..         MOV     ?V7,R3
   \   0001D2   AE..         MOV     R6,?V6
   \   0001D4   AF..         MOV     R7,?V7
   \   0001D6   EE           MOV     A,R6
   \   0001D7   4F           ORL     A,R7
   \   0001D8   6003         JZ      $+5
   \   0001DA   02....       LJMP    ??afIncomingData_8 & 0xFFFF
   \   0001DD   8018         SJMP    ??afIncomingData_1
   \                     ??afIncomingData_16:
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   F4           CPL     A
   \   0001E3   7012         JNZ     ??afIncomingData_1
   \   0001E5   85..82       MOV     DPL,?V6
   \   0001E8   85..83       MOV     DPH,?V7
   \   0001EB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001EE   E5..         MOV     A,?V6
   \   0001F0   45..         ORL     A,?V7
   \   0001F2   6003         JZ      $+5
   \   0001F4   02....       LJMP    ??afIncomingData_6 & 0xFFFF
    456                else
    457                  epDesc = NULL;
    458              }
    459              else
    460                epDesc = NULL;
    461            }
    462          }
   \                     ??afIncomingData_1:
   \   0001F7   7403         MOV     A,#0x3
   \   0001F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FC   7F10         MOV     R7,#0x10
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   E8           MOV     A,R0
   \   000004   FC           MOV     R4,A
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   EC           MOV     A,R4
   \   000008   4D           ORL     A,R5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000006   E582         MOV     A,DPL
   \   000008   4583         ORL     A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    463          
    464          /*********************************************************************
    465           * @fn          afBuildMSGIncoming
    466           *
    467           * @brief       Build the message for the app
    468           *
    469           * @param
    470           *
    471           * @return      pointer to next in data buffer
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    474                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    475                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V8,R1
    477            afIncomingMSGPacket_t *MSGpkt;
    478            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    479            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV     A,R2
   \   000010   240E         ADD     A,#0xe
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ?Subroutine11 & 0xFFFF
    480            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_15:
   \   00001C   EA           MOV     A,R2
   \   00001D   2410         ADD     A,#0x10
   \   00001F   F5..         MOV     ?V2,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V1
   \   000024   F5..         MOV     ?V3,A
   \   000026                ; Setup parameters for call to function osal_msg_allocate
   \   000026   85..82       MOV     DPL,?V2
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2427         ADD     A,#0x27
   \   00002E   FA           MOV     R2,A
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000034   8A..         MOV     ?V10,R2
   \   000036   8B..         MOV     ?V11,R3
   \   000038   AE..         MOV     R6,?V10
   \   00003A   AF..         MOV     R7,?V11
    481          
    482            if ( MSGpkt == NULL )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    483            {
    484              return;
    485            }
    486          
    487            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   741A         MOV     A,#0x1a
   \   000049   12....       LCALL   ?Subroutine28 & 0xFFFF
    488            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_48:
   \   00004C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004F   12....       LCALL   ?Subroutine23 & 0xFFFF
    489            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_40:
   \   000052   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    490            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_70:
   \   00005A                ; Setup parameters for call to function afCopyAddress
   \   00005A   7414         MOV     A,#0x14
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000062   EE           MOV     A,R6
   \   000063   2406         ADD     A,#0x6
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3F           ADDC    A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   ??afCopyAddress?relay; Banked call to: afCopyAddress
    491            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   C0E0         PUSH    A
   \   000078   EE           MOV     A,R6
   \   000079   240F         ADD     A,#0xf
   \   00007B   F582         MOV     DPL,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   F583         MOV     DPH,A
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
    492            MSGpkt->endPoint = epDesc->endPoint;
   \   000084   85..82       MOV     DPL,?V4
   \   000087   85..83       MOV     DPH,?V5
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   EE           MOV     A,R6
   \   00008E   2414         ADD     A,#0x14
   \   000090   F582         MOV     DPL,A
   \   000092   E4           CLR     A
   \   000093   3F           ADDC    A,R7
   \   000094   F583         MOV     DPH,A
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
    493            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000099   E5..         MOV     A,?V0
   \   00009B   240C         ADD     A,#0xc
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2415         ADD     A,#0x15
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   3F           ADDC    A,R7
   \   0000AE   F583         MOV     DPH,A
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   7418         MOV     A,#0x18
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ?Subroutine17 & 0xFFFF
    494            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_24:
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2416         ADD     A,#0x16
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E4           CLR     A
   \   0000C4   3F           ADDC    A,R7
   \   0000C5   F583         MOV     DPH,A
   \   0000C7   D0E0         POP     A
   \   0000C9   F0           MOVX    @DPTR,A
    495            MSGpkt->correlation = sig->correlation;
   \   0000CA   8882         MOV     DPL,R0
   \   0000CC   8983         MOV     DPH,R1
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C0E0         PUSH    A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2417         ADD     A,#0x17
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
    496            MSGpkt->rssi = sig->rssi;
   \   0000DE   8882         MOV     DPL,R0
   \   0000E0   8983         MOV     DPH,R1
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   C0E0         PUSH    A
   \   0000E7   EE           MOV     A,R6
   \   0000E8   2418         ADD     A,#0x18
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   E4           CLR     A
   \   0000ED   3F           ADDC    A,R7
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   D0E0         POP     A
   \   0000F2   F0           MOVX    @DPTR,A
    497            MSGpkt->SecurityUse = SecurityUse;
   \   0000F3   741A         MOV     A,#0x1a
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   C0E0         PUSH    A
   \   0000FB   EE           MOV     A,R6
   \   0000FC   2419         ADD     A,#0x19
   \   0000FE   F582         MOV     DPL,A
   \   000100   E4           CLR     A
   \   000101   3F           ADDC    A,R7
   \   000102   F583         MOV     DPH,A
   \   000104   D0E0         POP     A
   \   000106   F0           MOVX    @DPTR,A
    498            MSGpkt->timestamp = timestamp;
   \   000107   741B         MOV     A,#0x1b
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   12....       LCALL   ?XLOAD_R0123
   \   00010F   EE           MOV     A,R6
   \   000110   241A         ADD     A,#0x1a
   \   000112   F582         MOV     DPL,A
   \   000114   E4           CLR     A
   \   000115   3F           ADDC    A,R7
   \   000116   F583         MOV     DPH,A
   \   000118   12....       LCALL   ?XSTORE_R0123
    499            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00011B   EE           MOV     A,R6
   \   00011C   241E         ADD     A,#0x1e
   \   00011E   F582         MOV     DPL,A
   \   000120   E4           CLR     A
   \   000121   3F           ADDC    A,R7
   \   000122   F583         MOV     DPH,A
   \   000124   E5..         MOV     A,?V8
   \   000126   F0           MOVX    @DPTR,A
    500            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000127   E5..         MOV     A,?V0
   \   000129   2415         ADD     A,#0x15
   \   00012B   F582         MOV     DPL,A
   \   00012D   E4           CLR     A
   \   00012E   35..         ADDC    A,?V1
   \   000130   F583         MOV     DPH,A
   \   000132   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000135   2424         ADD     A,#0x24
   \   000137   F582         MOV     DPL,A
   \   000139   E4           CLR     A
   \   00013A   3F           ADDC    A,R7
   \   00013B   F583         MOV     DPH,A
   \   00013D   12....       LCALL   ?Subroutine23 & 0xFFFF
    501            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_41:
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00014B   2412         ADD     A,#0x12
   \   00014D   12....       LCALL   ?Subroutine24 & 0xFFFF
    502            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_77:
   \   000150   7416         MOV     A,#0x16
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000158   2410         ADD     A,#0x10
   \   00015A   12....       LCALL   ?Subroutine24 & 0xFFFF
    503            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_78:
   \   00015D   EE           MOV     A,R6
   \   00015E   241F         ADD     A,#0x1f
   \   000160   F582         MOV     DPL,A
   \   000162   E4           CLR     A
   \   000163   3F           ADDC    A,R7
   \   000164   F583         MOV     DPH,A
   \   000166   E4           CLR     A
   \   000167   F0           MOVX    @DPTR,A
    504            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000168   EE           MOV     A,R6
   \   000169   2420         ADD     A,#0x20
   \   00016B   F8           MOV     R0,A
   \   00016C   E4           CLR     A
   \   00016D   3F           ADDC    A,R7
   \   00016E   F9           MOV     R1,A
   \   00016F   E8           MOV     A,R0
   \   000170   FA           MOV     R2,A
   \   000171   E9           MOV     A,R1
   \   000172   FB           MOV     R3,A
   \   000173   85..82       MOV     DPL,?V2
   \   000176   85..83       MOV     DPH,?V3
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   8A82         MOV     DPL,R2
   \   00017C   8B83         MOV     DPH,R3
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E4           CLR     A
   \   000181   F0           MOVX    @DPTR,A
    505            MSGpkt->radius = radius;
   \   000182   741F         MOV     A,#0x1f
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E0           MOVX    A,@DPTR
   \   000188   C0E0         PUSH    A
   \   00018A   EE           MOV     A,R6
   \   00018B   2426         ADD     A,#0x26
   \   00018D   F582         MOV     DPL,A
   \   00018F   E4           CLR     A
   \   000190   3F           ADDC    A,R7
   \   000191   F583         MOV     DPH,A
   \   000193   D0E0         POP     A
   \   000195   F0           MOVX    @DPTR,A
    506          
    507            if ( MSGpkt->cmd.DataLength )
   \   000196   EE           MOV     A,R6
   \   000197   2422         ADD     A,#0x22
   \   000199   F8           MOV     R0,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F9           MOV     R1,A
   \   00019D   88..         MOV     ?V10,R0
   \   00019F   89..         MOV     ?V11,R1
   \   0001A1   8A82         MOV     DPL,R2
   \   0001A3   8B83         MOV     DPH,R3
   \   0001A5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A8   6038         JZ      ??afBuildMSGIncoming_1
    508            {
    509              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001AA   EE           MOV     A,R6
   \   0001AB   2427         ADD     A,#0x27
   \   0001AD   F8           MOV     R0,A
   \   0001AE   E4           CLR     A
   \   0001AF   3F           ADDC    A,R7
   \   0001B0   F9           MOV     R1,A
   \   0001B1   85..82       MOV     DPL,?V10
   \   0001B4   85..83       MOV     DPH,?V11
   \   0001B7   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    510              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_71:
   \   0001BA                ; Setup parameters for call to function osal_memcpy
   \   0001BA   85....       MOV     ?V0,?V6
   \   0001BD   85....       MOV     ?V1,?V7
   \   0001C0   75..00       MOV     ?V2,#0x0
   \   0001C3   78..         MOV     R0,#?V0
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001C8   8A82         MOV     DPL,R2
   \   0001CA   8B83         MOV     DPH,R3
   \   0001CC   12....       LCALL   ?Subroutine16 & 0xFFFF
    511            }
   \                     ??CrossCallReturnLabel_21:
   \   0001CF   85..82       MOV     DPL,?V10
   \   0001D2   85..83       MOV     DPH,?V11
   \   0001D5   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0001D8   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001DB   7403         MOV     A,#0x3
   \   0001DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E0   800A         SJMP    ??afBuildMSGIncoming_2
    512            else
    513            {
    514              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001E2   85..82       MOV     DPL,?V10
   \   0001E5   85..83       MOV     DPH,?V11
   \   0001E8   E4           CLR     A
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   F0           MOVX    @DPTR,A
    515            }
    516          
    517          #if defined ( MT_AF_CB_FUNC )
    518            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    519            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    520            {
    521              MT_AfIncomingMsg( (void *)MSGpkt );
    522              // Release the memory.
    523              osal_msg_deallocate( (void *)MSGpkt );
    524            }
    525            else
    526          #endif
    527            {
    528              // Send message through task message.
    529              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001EC                ; Setup parameters for call to function osal_msg_send
   \   0001EC   EE           MOV     A,R6
   \   0001ED   FA           MOV     R2,A
   \   0001EE   EF           MOV     A,R7
   \   0001EF   FB           MOV     R3,A
   \   0001F0   85..82       MOV     DPL,?V4
   \   0001F3   85..83       MOV     DPH,?V5
   \   0001F6   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    530            }
   \                     ??CrossCallReturnLabel_64:
   \   0001F9   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    531          }
   \                     ??afBuildMSGIncoming_0:
   \   0001FC   7F0C         MOV     R7,#0xc
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine38_0
   \   000006                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   22           RET
    532          
    533          /*********************************************************************
    534           * @fn      AF_DataRequest
    535           *
    536           * @brief   Common functionality for invoking APSDE_DataReq() for both
    537           *          SendMulti and MSG-Send.
    538           *
    539           * input parameters
    540           *
    541           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    542           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    543           * @param   cID - A valid cluster ID as specified by the Profile.
    544           * @param   len - Number of bytes of data pointed to by next param.
    545           * @param  *buf - A pointer to the data bytes to send.
    546           * @param  *transID - A pointer to a byte which can be modified and which will
    547           *                    be used as the transaction sequence number of the msg.
    548           * @param   options - Valid bit mask of Tx options.
    549           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    550           *
    551           * output parameters
    552           *
    553           * @param  *transID - Incremented by one if the return value is success.
    554           *
    555           * @return  afStatus_t - See previous definition of afStatus_... types.
    556           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    557          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    559                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    560                                     uint8 options, uint8 radius )
    561          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
    562            pDescCB pfnDescCB;
    563            ZStatus_t stat;
    564            APSDE_DataReq_t req;
    565            afDataReqMTU_t mtu;
    566            epList_t *pList;
    567          
    568            // Verify source end point
    569            if ( srcEP == NULL )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    570            {
    571              return afStatus_INVALID_PARAMETER;
    572            }
    573          
    574          #if !defined( REFLECTOR )
    575            if ( dstAddr->addrMode == afAddrNotPresent )
    576            {
    577              return afStatus_INVALID_PARAMETER;
    578            }
    579          #endif
    580          
    581            // Check if route is available before sending data
    582            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   EA           MOV     A,R2
   \   00001C   2408         ADD     A,#0x8
   \   00001E   F5..         MOV     ?V0,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   F5..         MOV     ?V1,A
   \   000025   E9           MOV     A,R1
   \   000026   A2E3         MOV     C,0xE0 /* A   */.3
   \   000028   5037         JNC     ??AF_DataRequest_1
    583            {
    584              if ( dstAddr->addrMode != afAddr16Bit )
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6402         XRL     A,#0x2
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    585              {
    586                return ( afStatus_INVALID_PARAMETER );
    587              }
    588          
    589              // First, make sure the destination is not its self, then check for an existing route.
    590              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    591                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000038                ; Setup parameters for call to function NLME_GetShortAddr
   \   000038   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00003B   8A..         MOV     ?V6,R2
   \   00003D   8B..         MOV     ?V7,R3
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
   \   000045   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000048   E5..         MOV     A,?V6
   \   00004A   6A           XRL     A,R2
   \   00004B   7003         JNZ     ??AF_DataRequest_2
   \   00004D   E5..         MOV     A,?V7
   \   00004F   6B           XRL     A,R3
   \                     ??AF_DataRequest_2:
   \   000050   600F         JZ      ??AF_DataRequest_1
   \   000052                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7901         MOV     R1,#0x1
   \   000056   12....       LCALL   ??RTG_CheckRtStatus?relay; Banked call to: RTG_CheckRtStatus
   \   000059   E9           MOV     A,R1
   \   00005A   6005         JZ      ??AF_DataRequest_1
    592              {
    593                // A valid route to a concentrator wasn't found
    594                return ( afStatus_NO_ROUTE );
   \   00005C   79CD         MOV     R1,#-0x33
   \   00005E   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    595              }
    596            }
    597          
    598            // Validate broadcasting
    599            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    600                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7402         MOV     A,#0x2
   \   00006B   68           XRL     A,R0
   \   00006C   6005         JZ      ??AF_DataRequest_4
   \   00006E   740F         MOV     A,#0xf
   \   000070   68           XRL     A,R0
   \   000071   703F         JNZ     ??AF_DataRequest_5
    601            {
    602              // Check for valid broadcast values
    603              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000073                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000073   85..82       MOV     DPL,?V4
   \   000076   85..83       MOV     DPH,?V5
   \   000079   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00007C   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   00007F   E9           MOV     A,R1
   \   000080   85..82       MOV     DPL,?V0
   \   000083   85..83       MOV     DPH,?V1
   \   000086   6023         JZ      ??AF_DataRequest_6
    604              {
    605                // Force mode to broadcast
    606                dstAddr->addrMode = afAddrBroadcast;
   \   000088   740F         MOV     A,#0xf
   \   00008A   F0           MOVX    @DPTR,A
    607              }
    608              else
    609              {
    610                // Address is not a valid broadcast type
    611                if ( dstAddr->addrMode == afAddrBroadcast )
    612                {
    613                  return afStatus_INVALID_PARAMETER;
    614                }
    615              }
    616            }
    617            else if ( dstAddr->addrMode != afAddr64Bit &&
    618                      dstAddr->addrMode != afAddrGroup &&
    619                      dstAddr->addrMode != afAddrNotPresent )
    620            {
    621              return afStatus_INVALID_PARAMETER;
    622            }
    623          
    624            // Set destination address
    625            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   740A         MOV     A,#0xa
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine28 & 0xFFFF
    626            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_50:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6403         XRL     A,#0x3
   \   00009B   7027         JNZ     ??AF_DataRequest_8
    627            {
    628              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   AC..         MOV     R4,?V4
   \   00009F   AD..         MOV     R5,?V5
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000A9   802A         SJMP    ??CrossCallReturnLabel_72
    629            }
   \                     ??AF_DataRequest_6:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   640F         XRL     A,#0xf
   \   0000AE   70DB         JNZ     ??AF_DataRequest_7
   \   0000B0   800D         SJMP    ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   68           XRL     A,R0
   \   0000B5   60D4         JZ      ??AF_DataRequest_7
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   68           XRL     A,R0
   \   0000BA   60CF         JZ      ??AF_DataRequest_7
   \   0000BC   E8           MOV     A,R0
   \   0000BD   60CC         JZ      ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000BF   7902         MOV     R1,#0x2
   \   0000C1   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    630            else
    631            {
    632              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000C4   85..82       MOV     DPL,?V4
   \   0000C7   85..83       MOV     DPH,?V5
   \   0000CA   12....       LCALL   ?Subroutine19 & 0xFFFF
    633            }
   \                     ??CrossCallReturnLabel_29:
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    634          
    635            // This option is to use Wildcard ProfileID in outgoing packets
    636            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_72:
   \   0000D5   E5..         MOV     A,?V2
   \   0000D7   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000D9   7411         MOV     A,#0x11
   \   0000DB   5009         JNC     ??AF_DataRequest_9
    637            {
    638              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   74FF         MOV     A,#-0x1
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   805F         SJMP    ??AF_DataRequest_10
    639            }
    640            else
    641            {
    642              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E4           CLR     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   F0           MOVX    @DPTR,A
    643          
    644              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000ED   90....       MOV     DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000F0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000F3   603A         JZ      ??AF_DataRequest_12
   \   0000F5   8882         MOV     DPL,R0
   \   0000F7   8983         MOV     DPH,R1
   \   0000F9   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   6A           XRL     A,R2
   \   0000FE   7002         JNZ     ??AF_DataRequest_13
   \   000100   EF           MOV     A,R7
   \   000101   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   70E8         JNZ     ??AF_DataRequest_11
   \   000108   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00010B   6022         JZ      ??AF_DataRequest_12
    645              {
    646                uint16 *pID = (uint16 *)(pfnDescCB(
    647                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00010D                ; Setup parameters for indirect call
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000114   12....       LCALL   ?CALL_IND
    648                if ( pID )
   \   000117   EA           MOV     A,R2
   \   000118   4B           ORL     A,R3
   \   000119   602B         JZ      ??AF_DataRequest_14
    649                {
    650                  req.profileID = *pID;
   \   00011B   8A82         MOV     DPL,R2
   \   00011D   8B83         MOV     DPH,R3
   \   00011F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000122   7411         MOV     A,#0x11
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    651                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_73:
   \   00012A                ; Setup parameters for call to function osal_mem_free
   \   00012A   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00012D   8017         SJMP    ??AF_DataRequest_14
    652                }
    653              }
    654              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000136   600E         JZ      ??AF_DataRequest_14
    655              {
    656                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000138   A3           INC     DPTR
   \   000139   12....       LCALL   ?Subroutine19 & 0xFFFF
    657              }
    658            }
   \                     ??CrossCallReturnLabel_31:
   \   00013C   7411         MOV     A,#0x11
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   E8           MOV     A,R0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E9           MOV     A,R1
   \                     ??AF_DataRequest_10:
   \   000145   F0           MOVX    @DPTR,A
    659          
    660            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   000146   7417         MOV     A,#0x17
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E4           CLR     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   A3           INC     DPTR
   \   00014E   F0           MOVX    @DPTR,A
    661          
    662            if ( ( options & AF_ACK_REQUEST              ) &&
    663                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    664                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00014F   E5..         MOV     A,?V2
   \   000151   A2E4         MOV     C,0xE0 /* A   */.4
   \   000153   501C         JNC     ??AF_DataRequest_15
   \   000155   740A         MOV     A,#0xa
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   740F         MOV     A,#0xf
   \   00015E   68           XRL     A,R0
   \   00015F   6010         JZ      ??AF_DataRequest_15
   \   000161   7401         MOV     A,#0x1
   \   000163   68           XRL     A,R0
   \   000164   600B         JZ      ??AF_DataRequest_15
    665            {
    666              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000166   7417         MOV     A,#0x17
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   7404         MOV     A,#0x4
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   A3           INC     DPTR
   \   00016F   E4           CLR     A
   \   000170   F0           MOVX    @DPTR,A
    667            }
    668          
    669            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000171   E5..         MOV     A,?V2
   \   000173   A2E7         MOV     C,0xE0 /* A   */.7
   \   000175   5009         JNC     ??AF_DataRequest_16
    670            {
    671              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000177   7417         MOV     A,#0x17
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   4410         ORL     A,#0x10
   \   00017F   F0           MOVX    @DPTR,A
    672            }
    673          
    674            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   000180   E5..         MOV     A,?V2
   \   000182   A2E6         MOV     C,0xE0 /* A   */.6
   \   000184   5012         JNC     ??AF_DataRequest_17
    675            {
    676              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000186   7417         MOV     A,#0x17
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   4401         ORL     A,#0x1
   \   00018E   F0           MOVX    @DPTR,A
    677              mtu.aps.secure = TRUE;
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   7401         MOV     A,#0x1
   \   000196   8006         SJMP    ??AF_DataRequest_18
    678            }
    679            else
    680            {
    681              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   E4           CLR     A
   \                     ??AF_DataRequest_18:
   \   00019E   F0           MOVX    @DPTR,A
    682            }
    683          
    684            if ( options & AF_PREPROCESS )
   \   00019F   E5..         MOV     A,?V2
   \   0001A1   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001A3   5009         JNC     ??AF_DataRequest_19
    685            {
    686              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001A5   7417         MOV     A,#0x17
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   4440         ORL     A,#0x40
   \   0001AD   F0           MOVX    @DPTR,A
    687            }
    688          
    689            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   E4           CLR     A
   \   0001B5   F0           MOVX    @DPTR,A
    690          
    691            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001B6   E5..         MOV     A,?V2
   \   0001B8   A2E5         MOV     C,0xE0 /* A   */.5
   \   0001BA   5009         JNC     ??AF_DataRequest_20
    692            {
    693              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001BC   741A         MOV     A,#0x1a
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   7404         MOV     A,#0x4
   \   0001C3   800D         SJMP    ??AF_DataRequest_21
    694            }
    695            else
    696            {
    697              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001C5   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   C0E0         PUSH    A
   \   0001CB   741A         MOV     A,#0x1a
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   D0E0         POP     A
   \                     ??AF_DataRequest_21:
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   7434         MOV     A,#0x34
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F5..         MOV     ?V0,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F5..         MOV     ?V1,A
    698            }
    699          
    700            req.transID       = *transID;
   \   0001DF   85..82       MOV     DPL,?V0
   \   0001E2   F583         MOV     DPH,A
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   C0E0         PUSH    A
   \   0001E7   7419         MOV     A,#0x19
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   D0E0         POP     A
   \   0001EE   F0           MOVX    @DPTR,A
    701            req.srcEP         = srcEP->endPoint;
   \   0001EF   8E82         MOV     DPL,R6
   \   0001F1   8F83         MOV     DPH,R7
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   C0E0         PUSH    A
   \   0001F6   740B         MOV     A,#0xb
   \   0001F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FB   D0E0         POP     A
   \   0001FD   F0           MOVX    @DPTR,A
    702            req.dstEP         = dstAddr->endPoint;
   \   0001FE   85..82       MOV     DPL,?V4
   \   000201   85..83       MOV     DPH,?V5
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   C0E0         PUSH    A
   \   000210   740C         MOV     A,#0xc
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   D0E0         POP     A
   \   000217   F0           MOVX    @DPTR,A
    703            req.clusterID     = cID;
   \   000218   742E         MOV     A,#0x2e
   \   00021A   12....       LCALL   ?XSTACK_DISP0_8
   \   00021D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000220   740F         MOV     A,#0xf
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000228   7430         MOV     A,#0x30
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F5..         MOV     ?V4,A
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   F5..         MOV     ?V5,A
    704            req.asduLen       = len;
   \   000234   7413         MOV     A,#0x13
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E5..         MOV     A,?V4
   \   00023B   F0           MOVX    @DPTR,A
   \   00023C   A3           INC     DPTR
   \   00023D   E5..         MOV     A,?V5
   \   00023F   F0           MOVX    @DPTR,A
    705            req.asdu          = buf;
   \   000240   7432         MOV     A,#0x32
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000248   7415         MOV     A,#0x15
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    706            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_75:
   \   000250   7436         MOV     A,#0x36
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   E0           MOVX    A,@DPTR
   \   000256   C0E0         PUSH    A
   \   000258   741B         MOV     A,#0x1b
   \   00025A   12....       LCALL   ?XSTACK_DISP0_8
   \   00025D   D0E0         POP     A
   \   00025F   F0           MOVX    @DPTR,A
    707          #if defined ( INTER_PAN )
    708            req.dstPanId      = dstAddr->panId;
    709          #endif // INTER_PAN
    710          
    711            // Look if there is a Callback function registered for this endpoint
    712            // The callback is used to control the AF Transaction ID used when sending messages
    713            pList = afFindEndPointDescList( srcEP->endPoint );
   \   000260                ; Setup parameters for call to function afFindEndPointDescList
   \   000260   8E82         MOV     DPL,R6
   \   000262   8F83         MOV     DPH,R7
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F9           MOV     R1,A
   \   000266   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000269   8A82         MOV     DPL,R2
   \   00026B   8B83         MOV     DPH,R3
    714          
    715            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   00026D   E582         MOV     A,DPL
   \   00026F   4583         ORL     A,DPH
   \   000271   6013         JZ      ??AF_DataRequest_22
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00027C   6008         JZ      ??AF_DataRequest_22
    716            {
    717              pList->pfnApplCB( &req );
   \   00027E                ; Setup parameters for indirect call
   \   00027E   7402         MOV     A,#0x2
   \   000280   12....       LCALL   ?XSTACK_DISP101_8
   \   000283   12....       LCALL   ?CALL_IND
    718            }
    719          
    720          #if defined ( INTER_PAN )
    721            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    722            {
    723              if ( len > INTERP_DataReqMTU() )
    724              {
    725                stat = afStatus_INVALID_PARAMETER;
    726              }
    727              else
    728              {
    729                stat = INTERP_DataReq( &req );
    730              }
    731            }
    732            else
    733          #endif // INTER_PAN
    734            {
    735              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   000286                ; Setup parameters for call to function afDataReqMTU
   \   000286   AA..         MOV     R2,?XSP + 0
   \   000288   AB..         MOV     R3,?XSP + 1
   \   00028A   12....       LCALL   ??afDataReqMTU?relay ; Banked call to: afDataReqMTU
   \   00028D   E9           MOV     A,R1
   \   00028E   C3           CLR     C
   \   00028F   95..         SUBB    A,?V4
   \   000291   E4           CLR     A
   \   000292   95..         SUBB    A,?V5
   \   000294   501A         JNC     ??AF_DataRequest_23
    736              {
    737                if (apsfSendFragmented)
   \   000296   90....       MOV     DPTR,#apsfSendFragmented
   \   000299   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00029C   600D         JZ      ??AF_DataRequest_24
    738                {
    739                  stat = (*apsfSendFragmented)( &req );
   \   00029E                ; Setup parameters for indirect call
   \   00029E   7402         MOV     A,#0x2
   \   0002A0   12....       LCALL   ?XSTACK_DISP101_8
   \   0002A3   12....       LCALL   ??Subroutine44_0 & 0xFFFF
    740                }
   \                     ??CrossCallReturnLabel_96:
   \   0002A6   12....       LCALL   ?CALL_IND
   \   0002A9   800D         SJMP    ??AF_DataRequest_25
    741                else
    742                {
    743                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   0002AB   75..02       MOV     ?V3,#0x2
   \   0002AE   800B         SJMP    ??AF_DataRequest_26
    744                }
    745              }
    746              else
    747              {
    748                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   0002B0                ; Setup parameters for call to function APSDE_DataReq
   \   0002B0   7402         MOV     A,#0x2
   \   0002B2   12....       LCALL   ?XSTACK_DISP101_8
   \   0002B5   12....       LCALL   ??APSDE_DataReq?relay; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   0002B8   E9           MOV     A,R1
   \   0002B9   F5..         MOV     ?V3,A
    749              }
    750            }
    751          
    752            /*
    753             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    754             * get added to the NWK databufs. So it will not go OTA and it will not get
    755             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    756             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    757             * message with the first in line TransSeqNumber, even on a multi message.
    758             * Also note that a reflected msg will not have its confirmation generated
    759             * here.
    760             */
    761            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    762                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   0002BB   740A         MOV     A,#0xa
   \   0002BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   6402         XRL     A,#0x2
   \   0002C3   702C         JNZ     ??AF_DataRequest_27
   \   0002C5                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002C5   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   0002C8   8A..         MOV     ?V4,R2
   \   0002CA   8B..         MOV     ?V5,R3
   \   0002CC   A8..         MOV     R0,?V4
   \   0002CE   A9..         MOV     R1,?V5
   \   0002D0   7402         MOV     A,#0x2
   \   0002D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   68           XRL     A,R0
   \   0002D7   7003         JNZ     ??AF_DataRequest_28
   \   0002D9   A3           INC     DPTR
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   69           XRL     A,R1
   \                     ??AF_DataRequest_28:
   \   0002DC   7013         JNZ     ??AF_DataRequest_27
    763            {
    764              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002DE                ; Setup parameters for call to function afDataConfirm
   \   0002DE   AB..         MOV     R3,?V3
   \   0002E0   85..82       MOV     DPL,?V0
   \   0002E3   85..83       MOV     DPH,?V1
   \   0002E6   E0           MOVX    A,@DPTR
   \   0002E7   FA           MOV     R2,A
   \   0002E8   8E82         MOV     DPL,R6
   \   0002EA   8F83         MOV     DPH,R7
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   F9           MOV     R1,A
   \   0002EE   12....       LCALL   ??afDataConfirm?relay; Banked call to: afDataConfirm
    765            }
    766          
    767            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0002F1   E5..         MOV     A,?V3
   \   0002F3   7009         JNZ     ??AF_DataRequest_29
    768            {
    769              (*transID)++;
   \   0002F5   85..82       MOV     DPL,?V0
   \   0002F8   85..83       MOV     DPH,?V1
   \   0002FB   E0           MOVX    A,@DPTR
   \   0002FC   04           INC     A
   \   0002FD   F0           MOVX    @DPTR,A
    770            }
    771          
    772            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0002FE   A9..         MOV     R1,?V3
   \                     ??AF_DataRequest_3:
   \   000300   741E         MOV     A,#0x1e
   \   000302   12....       LCALL   ?DEALLOC_XSTACK8
   \   000305   02....       LJMP    ?Subroutine3 & 0xFFFF
    773          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   22           RET
    774          
    775          #if defined ( ZIGBEE_SOURCE_ROUTING )
    776          /*********************************************************************
    777           * @fn      AF_DataRequestSrcRtg
    778           *
    779           * @brief   Common functionality for invoking APSDE_DataReq() for both
    780           *          SendMulti and MSG-Send.
    781           *
    782           * input parameters
    783           *
    784           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    785           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    786           * @param   cID - A valid cluster ID as specified by the Profile.
    787           * @param   len - Number of bytes of data pointed to by next param.
    788           * @param  *buf - A pointer to the data bytes to send.
    789           * @param  *transID - A pointer to a byte which can be modified and which will
    790           *                    be used as the transaction sequence number of the msg.
    791           * @param   options - Valid bit mask of Tx options.
    792           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    793           * @param   relayCnt - Number of devices in the relay list
    794           * @param   pRelayList - Pointer to the relay list
    795           *
    796           * output parameters
    797           *
    798           * @param  *transID - Incremented by one if the return value is success.
    799           *
    800           * @return  afStatus_t - See previous definition of afStatus_... types.
    801           */
    802          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    803          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    804                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    805                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    807            uint8 status;
    808          
    809            /* Add the source route to the source routing table */
    810            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    811                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00001F   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000022   12....       LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV     A,R1
    812          
    813            if( status == RTG_SUCCESS)
   \   000026   7041         JNZ     ??AF_DataRequestSrcRtg_0
    814            {
    815              /* Call AF_DataRequest to send the data */
    816              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000028                ; Setup parameters for call to function AF_DataRequest
   \   000028   7414         MOV     A,#0x14
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
   \   000030   78..         MOV     R0,#?V3
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   7413         MOV     A,#0x13
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000045   7413         MOV     A,#0x13
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00004D   7413         MOV     A,#0x13
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000055   A9..         MOV     R1,?V2
   \   000057   AC..         MOV     R4,?V0
   \   000059   AD..         MOV     R5,?V1
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   800B         SJMP    ??AF_DataRequestSrcRtg_1
    817            }
    818            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   000069   7405         MOV     A,#0x5
   \   00006B   69           XRL     A,R1
   \   00006C   7004         JNZ     ??AF_DataRequestSrcRtg_2
    819            {
    820              /* The source route relay count is exceeding the network limit */
    821              status = afStatus_INVALID_PARAMETER;
   \   00006E   7902         MOV     R1,#0x2
   \   000070   8002         SJMP    ??AF_DataRequestSrcRtg_1
    822            }
    823            else
    824            {
    825              /* The guaranteed adding entry fails due to memory failure */
    826              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000072   7910         MOV     R1,#0x10
    827            }
    828            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000074   02....       LJMP    ?Subroutine0 & 0xFFFF
    829          }
    830          
    831          #endif
    832          
    833          /*********************************************************************
    834           * @fn      afFindEndPointDescList
    835           *
    836           * @brief   Find the endpoint description entry from the endpoint
    837           *          number.
    838           *
    839           * @param   EndPoint - Application Endpoint to look for
    840           *
    841           * @return  the address to the endpoint/interface description entry
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    844          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    845            epList_t *epSearch;
    846          
    847            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8004         SJMP    ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   600A         JZ      ??afFindEndPointDescList_2
    848            {
    849              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   12....       LCALL   ?Subroutine20 & 0xFFFF
    850              {
    851                break;
    852              }
    853            }
   \                     ??CrossCallReturnLabel_34:
   \   00001B   69           XRL     A,R1
   \   00001C   70EB         JNZ     ??afFindEndPointDescList_1
    854          
    855            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00001E                REQUIRE ?Subroutine4
   \   00001E                ; // Fall through to label ?Subroutine4
    856          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine43_0
   \   000001                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    857          
    858          /*********************************************************************
    859           * @fn      afFindEndPointDesc
    860           *
    861           * @brief   Find the endpoint description entry from the endpoint
    862           *          number.
    863           *
    864           * @param   EndPoint - Application Endpoint to look for
    865           *
    866           * @return  the address to the endpoint/interface description entry
    867           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    868          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    869          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    870            epList_t *epSearch;
    871          
    872            // Look for the endpoint
    873            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    874          
    875            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6005         JZ      ??afFindEndPointDesc_0
    876              return ( epSearch->epDesc );
   \   000012   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000015   8004         SJMP    ??afFindEndPointDesc_1
    877            else
    878              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001B   02....       LJMP    ?Subroutine1 & 0xFFFF
    879          }
    880          
    881          /*********************************************************************
    882           * @fn      afFindSimpleDesc
    883           *
    884           * @brief   Find the Simple Descriptor from the endpoint number.
    885           *
    886           * @param   EP - Application Endpoint to look for.
    887           *
    888           * @return  Non-zero to indicate that the descriptor memory must be freed.
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    891          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    892            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AC..         MOV     R4,?V2
   \   000014   AD..         MOV     R5,?V3
    893            uint8 rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    894          
    895            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   4D           ORL     A,R5
   \   00001A   6038         JZ      ??afFindSimpleDesc_0
    896            {
    897              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000027   E582         MOV     A,DPL
   \   000029   4583         ORL     A,DPH
   \   00002B   6013         JZ      ??afFindSimpleDesc_1
    898              {
    899                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   09           INC     R1
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   EB           MOV     A,R3
   \   00003B   F0           MOVX    @DPTR,A
    900                rtrn = TRUE;
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   801C         SJMP    ??afFindSimpleDesc_2
    901              }
    902              else
    903              {
    904                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   12....       LCALL   ?Subroutine33 & 0xFFFF
    905              }
    906            }
   \                     ??CrossCallReturnLabel_97:
   \   000047   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   EA           MOV     A,R2
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   EB           MOV     A,R3
   \   000052   8007         SJMP    ??afFindSimpleDesc_3
    907            else
    908            {
    909              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \                     ??afFindSimpleDesc_3:
   \   00005B   F0           MOVX    @DPTR,A
    910            }
    911          
    912            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00005C   02....       LJMP    ?Subroutine0 & 0xFFFF
    913          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET
    914          
    915          /*********************************************************************
    916           * @fn      afGetDescCB
    917           *
    918           * @brief   Get the Descriptor callback function.
    919           *
    920           * @param   epDesc - pointer to the endpoint descriptor
    921           *
    922           * @return  function pointer or NULL
    923           */
    924          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    925          {
    926            epList_t *epSearch;
    927          
    928            // Start at the beginning
    929            epSearch = epList;
    930          
    931            // Look through the list until the end
    932            while ( epSearch )
    933            {
    934              // Is there a match?
    935              if ( epSearch->epDesc == epDesc )
    936              {
    937                return ( epSearch->pfnDescCB );
    938              }
    939              else
    940                epSearch = epSearch->nextDesc;  // Next entry
    941            }
    942          
    943            return ( (pDescCB)NULL );
    944          }
    945          
    946          /*********************************************************************
    947           * @fn      afDataReqMTU
    948           *
    949           * @brief   Get the Data Request MTU(Max Transport Unit).
    950           *
    951           * @param   fields - afDataReqMTU_t
    952           *
    953           * @return  uint8(MTU)
    954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    955          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    956          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    957            uint8 len;
    958            uint8 hdr;
    959          
    960            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    961            {
    962              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    963            }
    964            else
    965            {
    966              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    967            }
    968          
    969            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    970          
    971            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   02....       LJMP    ?Subroutine2 & 0xFFFF
    972          }
    973          
    974          /*********************************************************************
    975           * @fn      afGetMatch
    976           *
    977           * @brief   Set the allow response flag.
    978           *
    979           * @param   ep - Application Endpoint to look for
    980           * @param   action - true - allow response, false - no response
    981           *
    982           * @return  TRUE allow responses, FALSE no response
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    986            epList_t *epSearch;
    987          
    988            // Look for the endpoint
    989            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    990          
    991            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6011         JZ      ??afGetMatch_0
    992            {
    993              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   5004         JNC     ??afGetMatch_0
    994                return ( TRUE );
   \   00001F   7901         MOV     R1,#0x1
   \   000021   8002         SJMP    ??afGetMatch_1
    995              else
    996                return ( FALSE );
    997            }
    998            else
    999              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV     R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1000          }
   1001          
   1002          /*********************************************************************
   1003           * @fn      afSetMatch
   1004           *
   1005           * @brief   Set the allow response flag.
   1006           *
   1007           * @param   ep - Application Endpoint to look for
   1008           * @param   action - true - allow response, false - no response
   1009           *
   1010           * @return  TRUE if success, FALSE if endpoint not found
   1011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1012          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
   1014            epList_t *epSearch;
   1015          
   1016            // Look for the endpoint
   1017            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   A8..         MOV     R0,?V0
   \   000010   A9..         MOV     R1,?V1
   1018          
   1019            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   6019         JZ      ??afSetMatch_0
   1020            {
   1021              if ( action )
   \   000016   E8           MOV     A,R0
   \   000017   2408         ADD     A,#0x8
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   39           ADDC    A,R1
   \   00001D   F583         MOV     DPH,A
   \   00001F   EF           MOV     A,R7
   \   000020   6005         JZ      ??afSetMatch_1
   1022              {
   1023                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   D2E0         SETB    0xE0 /* A   */.0
   \   000025   8003         SJMP    ??afSetMatch_2
   1024              }
   1025              else
   1026              {
   1027                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX    @DPTR,A
   1028              }
   1029              return ( TRUE );
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8002         SJMP    ??afSetMatch_3
   1030            }
   1031            else
   1032              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP    ?Subroutine1
   1033          }
   1034          
   1035          /*********************************************************************
   1036           * @fn      afNumEndPoints
   1037           *
   1038           * @brief   Returns the number of endpoints defined (including 0)
   1039           *
   1040           * @param   none
   1041           *
   1042           * @return  number of endpoints
   1043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1044          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1045          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1046            epList_t *epSearch;
   1047            uint8 endpoints;
   1048          
   1049            // Start at the beginning
   1050            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ?Subroutine17 & 0xFFFF
   1051            endpoints = 0;
   \                     ??CrossCallReturnLabel_25:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   8004         SJMP    ??CrossCallReturnLabel_19
   1052          
   1053            while ( epSearch )
   1054            {
   1055              endpoints++;
   \                     ??afNumEndPoints_0:
   \   00000E   09           INC     R1
   1056              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL   ?Subroutine13 & 0xFFFF
   1057            }
   \                     ??CrossCallReturnLabel_19:
   \   000012   E582         MOV     A,DPL
   \   000014   4583         ORL     A,DPH
   \   000016   70F6         JNZ     ??afNumEndPoints_0
   1058          
   1059            return ( endpoints );
   \   000018   02....       LJMP    ?Subroutine4 & 0xFFFF
   1060          }
   1061          
   1062          /*********************************************************************
   1063           * @fn      afEndPoints
   1064           *
   1065           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1066           *          Use afNumEndPoints to find out how big a buffer to supply.
   1067           *
   1068           * @param   epBuf - pointer to mem used
   1069           *
   1070           * @return  void
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1073          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1074            epList_t *epSearch;
   1075            uint8 endPoint;
   1076          
   1077            // Start at the beginning
   1078            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   801D         SJMP    ??afEndPoints_0
   1079          
   1080            while ( epSearch )
   1081            {
   1082              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000010   F8           MOV     R0,A
   1083          
   1084              if ( !skipZDO || endPoint != 0 )
   \   000011   E9           MOV     A,R1
   \   000012   6003         JZ      ??afEndPoints_2
   \   000014   E8           MOV     A,R0
   \   000015   600B         JZ      ??afEndPoints_3
   1085                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000017   E8           MOV     A,R0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   1086          
   1087              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   1088            }
   \                     ??afEndPoints_0:
   \   000026   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   70DC         JNZ     ??afEndPoints_1
   1089          }
   \   00002D   02....       LJMP    ?Subroutine4 & 0xFFFF
   1090          
   1091          /*********************************************************************
   1092           * @fn      afCopyAddress
   1093           *
   1094           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1095           *          from the zAddrType_t parameter.
   1096           *
   1097           * @param   epBuf - pointer to mem used
   1098           *
   1099           * @return  void
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1102          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1103            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV     A,R4
   \   00000A   2408         ADD     A,#0x8
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   3D           ADDC    A,R5
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
   1104            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6403         XRL     A,#0x3
   \   000029   7005         JNZ     ??afCopyAddress_0
   1105            {
   1106              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00002E   800A         SJMP    ??CrossCallReturnLabel_76
   1107            }
   1108            else
   1109            {
   1110              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   12....       LCALL   ?Subroutine15 & 0xFFFF
   1111            }
   \                     ??CrossCallReturnLabel_67:
   \   000037   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   1112          
   1113            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1114            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_76:
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
   1115          }
   \   00004C   02....       LJMP    ?Subroutine2 & 0xFFFF
   1116          
   1117          /**************************************************************************************************
   1118           * @fn          afAPSF_ConfigGet
   1119           *
   1120           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1121           *              the specified EndPoint.
   1122           *
   1123           * input parameters
   1124           *
   1125           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1126           *
   1127           * output parameters
   1128           *
   1129           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1130           *
   1131           * @return      None.
   1132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1133          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1134          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1135            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   A8..         MOV     R0,?V0
   \   000012   A9..         MOV     R1,?V1
   1136          
   1137            if (pList == NULL)
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   700D         JNZ     ??afAPSF_ConfigGet_0
   1138            {
   1139              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   7432         MOV     A,#0x32
   \   00001E   F0           MOVX    @DPTR,A
   1140              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC     DPTR
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8021         SJMP    ??afAPSF_ConfigGet_1
   1141            }
   1142            else
   1143            {
   1144              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV     A,R0
   \   000026   2406         ADD     A,#0x6
   \   000028   F5..         MOV     ?V0,A
   \   00002A   E4           CLR     A
   \   00002B   39           ADDC    A,R1
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   75..00       MOV     ?V2,#0x0
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV     R4,#0x2
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1145            }
   1146          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine0
   \   000046                ; // Fall through to label ?Subroutine0
   1147          
   1148          /**************************************************************************************************
   1149           * @fn          afAPSF_ConfigSet
   1150           *
   1151           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1152           *              the specified EndPoint.
   1153           *
   1154           * input parameters
   1155           *
   1156           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1157           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1158           *
   1159           * output parameters
   1160           *
   1161           * None.
   1162           *
   1163           * @return      afStatus_SUCCESS for success.
   1164           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1165           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1166          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1167          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1168            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   1169          
   1170            if (pList == NULL)
   \   00000C   EA           MOV     A,R2
   \   00000D   4B           ORL     A,R3
   \   00000E   7004         JNZ     ??afAPSF_ConfigSet_0
   1171            {
   1172              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV     R1,#0x2
   \   000012   8021         SJMP    ??afAPSF_ConfigSet_1
   1173            }
   1174          
   1175            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV     ?V0,R6
   \   000016   8F..         MOV     ?V1,R7
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV     R4,#0x2
   \   000022   7D00         MOV     R5,#0x0
   \   000024   EA           MOV     A,R2
   \   000025   2406         ADD     A,#0x6
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??afAPSF_ConfigSet_2
   \   00002A   0B           INC     R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   1176            return afStatus_SUCCESS;
   \   000033   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   80..         SJMP    ?Subroutine0
   1177          }
   1178          
   1179          /**************************************************************************************************
   1180           * @fn          afSetApplCB
   1181           *
   1182           * @brief       Sets the pointer to the Application Callback function for a
   1183           *              specific EndPoint.
   1184           *
   1185           * input parameters
   1186           *
   1187           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1188           * @param       pApplFn - A pointer to the Application Callback function.
   1189           *
   1190           * output parameters
   1191           *
   1192           * None.
   1193           *
   1194           * @return      TRUE if success, FALSE if endpoint not found
   1195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1196          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1197          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1198            if ( pApplFn != NULL )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   601F         JZ      ??afSetApplCB_0
   1199            {
   1200              epList_t *epSearch;
   1201          
   1202              // Look for the endpoint
   1203              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL   ??afFindEndPointDescList?relay; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   1204          
   1205              if ( epSearch )
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6012         JZ      ??afSetApplCB_0
   1206              {
   1207                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   1208          
   1209                return ( TRUE );
   \   000028   7901         MOV     R1,#0x1
   \   00002A   8002         SJMP    ??afSetApplCB_1
   1210              }
   1211            }
   1212          
   1213            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP    ?Subroutine0
   1214          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDelete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afReflectError?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afAPSF_ConfigGet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afAPSF_ConfigSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetApplCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1215          
   1216          /**************************************************************************************************
   1217          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     67   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> afDataReqMTU
        0     46   -> afFindEndPointDescList
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     55   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     46   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     49   afIncomingData
        0     39   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      1     17   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     24   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       6  ??AF_DataRequest?relay
       6  ??AF_DataRequestSrcRtg?relay
       6  ??Subroutine36_0
       7  ??Subroutine37_0
       6  ??Subroutine38_0
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       2  ??Subroutine41_0
       6  ??Subroutine42_0
       4  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??afAPSF_ConfigGet?relay
       6  ??afAPSF_ConfigSet?relay
       6  ??afBuildMSGIncoming?relay
       6  ??afCopyAddress?relay
       6  ??afDataConfirm?relay
       6  ??afDataReqMTU?relay
       6  ??afDelete?relay
       6  ??afEndPoints?relay
       6  ??afFindEndPointDesc?relay
       6  ??afFindEndPointDescList?relay
       6  ??afFindSimpleDesc?relay
       6  ??afGetMatch?relay
       6  ??afIncomingData?relay
       6  ??afNumEndPoints?relay
       6  ??afReflectError?relay
       6  ??afRegister?relay
       6  ??afRegisterExtended?relay
       6  ??afSetApplCB?relay
       6  ??afSetMatch?relay
       5  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine10
       8  ?Subroutine11
       8  ?Subroutine12
      10  ?Subroutine13
       1  ?Subroutine14
       3  ?Subroutine15
       6  ?Subroutine16
       4  ?Subroutine17
       5  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
       5  ?Subroutine20
       9  ?Subroutine21
       9  ?Subroutine22
      10  ?Subroutine23
       6  ?Subroutine24
       6  ?Subroutine25
       7  ?Subroutine26
       4  ?Subroutine27
       8  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
      10  ?Subroutine31
       4  ?Subroutine32
       1  ?Subroutine33
       5  ?Subroutine34
       8  ?Subroutine35
       7  ?Subroutine4
      11  ?Subroutine5
      26  ?Subroutine6
       5  ?Subroutine7
       6  ?Subroutine8
      10  ?Subroutine9
     776  AF_DataRequest
       1  AF_DataRequestDiscoverRoute
     119  AF_DataRequestSrcRtg
      70  afAPSF_ConfigGet
      55  afAPSF_ConfigSet
     513  afBuildMSGIncoming
      79  afCopyAddress
      63  afDataConfirm
      35  afDataReqMTU
      71  afDelete
      48  afEndPoints
      30  afFindEndPointDesc
      30  afFindEndPointDescList
      95  afFindSimpleDesc
      37  afGetMatch
     513  afIncomingData
      27  afNumEndPoints
      84  afReflectError
      71  afRegister
      93  afRegisterExtended
      48  afSetApplCB
      51  afSetMatch
       2  epList

 
 3 198 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 3 325 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none

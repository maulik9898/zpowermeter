###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             29/Oct/2015  08:23:49 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\AttributeUtils.cpp         #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\AttributeUtils.cpp -D      #
#                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D      #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz --eec++   #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\AttributeUtils.lst       #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\AttributeUtils.r51        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zcl\AttributeUtils.cpp
      1          #include "AttributeUtils.h"
      2          #include "hal_defs.h"
      3          #include "ssp.h"
      4          #include "OSAL.h"
      5          
      6          /*********************************************************************
      7           * @fn      zclGetAttrDataLength
      8           *
      9           * @brief   Return the length of the attribute.
     10           *
     11           * @param   dataType - data type
     12           * @param   pData - pointer to data
     13           *
     14           * @return  returns atrribute length
     15           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData ){
   \                     zclGetAttrDataLength:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     17          	uint16 dataLen = 0;
     18          
     19          	if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR ){
   \   000007   7444         MOV     A,#0x44
   \   000009   6E           XRL     A,R6
   \   00000A   6005         JZ      ??zclGetAttrDataLength_0
   \   00000C   7443         MOV     A,#0x43
   \   00000E   6E           XRL     A,R6
   \   00000F   700C         JNZ     ??zclGetAttrDataLength_1
     20          		dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   12....       LCALL   ?Subroutine1 & 0xFFFF
     21          	} else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR ) {
   \                     ??CrossCallReturnLabel_2:
   \   000018   FA           MOV     R2,A
   \   000019   E4           CLR     A
   \   00001A   39           ADDC    A,R1
   \   00001B   8015         SJMP    ??zclGetAttrDataLength_2
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV     A,#0x42
   \   00001F   6E           XRL     A,R6
   \   000020   6005         JZ      ??zclGetAttrDataLength_3
   \   000022   7441         MOV     A,#0x41
   \   000024   6E           XRL     A,R6
   \   000025   700E         JNZ     ??zclGetAttrDataLength_4
     22          		dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2401         ADD     A,#0x1
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   3400         ADDC    A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV     R3,A
   \   000033   8007         SJMP    ??zclGetAttrDataLength_5
     23          	} else {
     24          		dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL   ??zclGetDataTypeLength?relay; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV     A,R1
   \   000039   FA           MOV     R2,A
   \   00003A   7B00         MOV     R3,#0x0
     25          	}
     26          
     27          	return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   7F01         MOV     R7,#0x1
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
     28          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   2402         ADD     A,#0x2
   \   000008   22           RET
     29          
     30          /*********************************************************************
     31           * @fn      zclGetDataTypeLength
     32           *
     33           * @brief   Return the length of the datatype in octet.
     34           *
     35           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
     36           *                ZCL_DATATYPE_CHAR_STR data types.
     37           *
     38           * @param   dataType - data type
     39           *
     40           * @return  length of data
     41           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          uint8 zclGetDataTypeLength( uint8 dataType ){
   \                     zclGetDataTypeLength:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
     43          	uint8 len;
     44          
     45          	switch ( dataType ) {
   \   000001   24F8         ADD     A,#-0x8
   \   000003   6078         JZ      ??zclGetDataTypeLength_0
   \   000005   14           DEC     A
   \   000006   6079         JZ      ??zclGetDataTypeLength_1
   \   000008   14           DEC     A
   \   000009   607A         JZ      ??zclGetDataTypeLength_2
   \   00000B   14           DEC     A
   \   00000C   607B         JZ      ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD     A,#-0x5
   \   000010   606B         JZ      ??zclGetDataTypeLength_0
   \   000012   24F8         ADD     A,#-0x8
   \   000014   6067         JZ      ??zclGetDataTypeLength_0
   \   000016   14           DEC     A
   \   000017   6068         JZ      ??zclGetDataTypeLength_1
   \   000019   14           DEC     A
   \   00001A   6069         JZ      ??zclGetDataTypeLength_2
   \   00001C   14           DEC     A
   \   00001D   606A         JZ      ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD     A,#-0x5
   \   000021   605A         JZ      ??zclGetDataTypeLength_0
   \   000023   14           DEC     A
   \   000024   605B         JZ      ??zclGetDataTypeLength_1
   \   000026   14           DEC     A
   \   000027   605C         JZ      ??zclGetDataTypeLength_2
   \   000029   14           DEC     A
   \   00002A   605D         JZ      ??zclGetDataTypeLength_3
   \   00002C   14           DEC     A
   \   00002D   605E         JZ      ??zclGetDataTypeLength_4
   \   00002F   14           DEC     A
   \   000030   605F         JZ      ??zclGetDataTypeLength_5
   \   000032   14           DEC     A
   \   000033   6060         JZ      ??zclGetDataTypeLength_6
   \   000035   14           DEC     A
   \   000036   6061         JZ      ??zclGetDataTypeLength_7
   \   000038   14           DEC     A
   \   000039   6042         JZ      ??zclGetDataTypeLength_0
   \   00003B   14           DEC     A
   \   00003C   6043         JZ      ??zclGetDataTypeLength_1
   \   00003E   14           DEC     A
   \   00003F   6044         JZ      ??zclGetDataTypeLength_2
   \   000041   14           DEC     A
   \   000042   6045         JZ      ??zclGetDataTypeLength_3
   \   000044   14           DEC     A
   \   000045   6046         JZ      ??zclGetDataTypeLength_4
   \   000047   14           DEC     A
   \   000048   6047         JZ      ??zclGetDataTypeLength_5
   \   00004A   14           DEC     A
   \   00004B   6048         JZ      ??zclGetDataTypeLength_6
   \   00004D   14           DEC     A
   \   00004E   6049         JZ      ??zclGetDataTypeLength_7
   \   000050   14           DEC     A
   \   000051   602A         JZ      ??zclGetDataTypeLength_0
   \   000053   14           DEC     A
   \   000054   602B         JZ      ??zclGetDataTypeLength_1
   \   000056   24F9         ADD     A,#-0x7
   \   000058   6027         JZ      ??zclGetDataTypeLength_1
   \   00005A   14           DEC     A
   \   00005B   602C         JZ      ??zclGetDataTypeLength_3
   \   00005D   14           DEC     A
   \   00005E   6039         JZ      ??zclGetDataTypeLength_7
   \   000060   245A         ADD     A,#0x5a
   \   000062   6025         JZ      ??zclGetDataTypeLength_3
   \   000064   14           DEC     A
   \   000065   6022         JZ      ??zclGetDataTypeLength_3
   \   000067   14           DEC     A
   \   000068   601F         JZ      ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD     A,#-0x6
   \   00006C   6013         JZ      ??zclGetDataTypeLength_1
   \   00006E   14           DEC     A
   \   00006F   6010         JZ      ??zclGetDataTypeLength_1
   \   000071   14           DEC     A
   \   000072   6015         JZ      ??zclGetDataTypeLength_3
   \   000074   24FA         ADD     A,#-0x6
   \   000076   6021         JZ      ??zclGetDataTypeLength_7
   \   000078   14           DEC     A
   \   000079   6022         JZ      ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP    ??zclGetDataTypeLength_9
     46              case ZCL_DATATYPE_DATA8:
     47              case ZCL_DATATYPE_BOOLEAN:
     48              case ZCL_DATATYPE_BITMAP8:
     49              case ZCL_DATATYPE_INT8:
     50              case ZCL_DATATYPE_UINT8:
     51              case ZCL_DATATYPE_ENUM8:
     52                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV     R1,#0x1
     53                break;
   \   00007F   8022         SJMP    ??zclGetDataTypeLength_10
     54          
     55              case ZCL_DATATYPE_DATA16:
     56              case ZCL_DATATYPE_BITMAP16:
     57              case ZCL_DATATYPE_UINT16:
     58              case ZCL_DATATYPE_INT16:
     59              case ZCL_DATATYPE_ENUM16:
     60              case ZCL_DATATYPE_SEMI_PREC:
     61              case ZCL_DATATYPE_CLUSTER_ID:
     62              case ZCL_DATATYPE_ATTR_ID:
     63                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV     R1,#0x2
     64                break;
   \   000083   801E         SJMP    ??zclGetDataTypeLength_10
     65          
     66              case ZCL_DATATYPE_DATA24:
     67              case ZCL_DATATYPE_BITMAP24:
     68              case ZCL_DATATYPE_UINT24:
     69              case ZCL_DATATYPE_INT24:
     70                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV     R1,#0x3
     71                break;
   \   000087   801A         SJMP    ??zclGetDataTypeLength_10
     72          
     73              case ZCL_DATATYPE_DATA32:
     74              case ZCL_DATATYPE_BITMAP32:
     75              case ZCL_DATATYPE_UINT32:
     76              case ZCL_DATATYPE_INT32:
     77              case ZCL_DATATYPE_SINGLE_PREC:
     78              case ZCL_DATATYPE_TOD:
     79              case ZCL_DATATYPE_DATE:
     80              case ZCL_DATATYPE_UTC:
     81              case ZCL_DATATYPE_BAC_OID:
     82                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV     R1,#0x4
     83                break;
   \   00008B   8016         SJMP    ??zclGetDataTypeLength_10
     84          
     85             case ZCL_DATATYPE_UINT40:
     86             case ZCL_DATATYPE_INT40:
     87                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV     R1,#0x5
     88                 break;
   \   00008F   8012         SJMP    ??zclGetDataTypeLength_10
     89          
     90             case ZCL_DATATYPE_UINT48:
     91             case ZCL_DATATYPE_INT48:
     92                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV     R1,#0x6
     93                 break;
   \   000093   800E         SJMP    ??zclGetDataTypeLength_10
     94          
     95             case ZCL_DATATYPE_UINT56:
     96             case ZCL_DATATYPE_INT56:
     97                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV     R1,#0x7
     98                 break;
   \   000097   800A         SJMP    ??zclGetDataTypeLength_10
     99          
    100             case ZCL_DATATYPE_DOUBLE_PREC:
    101             case ZCL_DATATYPE_IEEE_ADDR:
    102             case ZCL_DATATYPE_UINT64:
    103             case ZCL_DATATYPE_INT64:
    104               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV     R1,#0x8
    105               break;
   \   00009B   8006         SJMP    ??zclGetDataTypeLength_10
    106          
    107              case ZCL_DATATYPE_128_BIT_SEC_KEY:
    108               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV     R1,#0x10
    109               break;
   \   00009F   8002         SJMP    ??zclGetDataTypeLength_10
    110          
    111              case ZCL_DATATYPE_NO_DATA:
    112              case ZCL_DATATYPE_UNKNOWN:
    113                // Fall through
    114          
    115              default:
    116                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV     R1,#0x0
    117                break;
    118            	}
    119          
    120          	return len ;
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP    ?BRET
    121          }
    122          
    123          /*********************************************************************
    124           * @fn      zclSerializeData
    125           *
    126           * @brief   Builds a buffer from the attribute data to sent out over
    127           *          the air.
    128           *          NOTE - Not compatible with application's attributes callbacks.
    129           *
    130           * @param   dataType - data types defined in zcl.h
    131           * @param   attrData - pointer to the attribute data
    132           * @param   buf - where to put the serialized data
    133           *
    134           * @return  pointer to end of destination buffer
    135           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf ){
   \                     zclSerializeData:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FA           MOV     R2,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FB           MOV     R3,A
    137            uint8 *pStr;
    138            uint16 len;
    139          
    140            if ( attrData == NULL )
   \   00000F   E5..         MOV     A,?V4
   \   000011   45..         ORL     A,?V5
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??zclSerializeData_0 & 0xFFFF
    141            {
    142              return ( buf );
    143            }
    144          
    145            switch ( dataType )
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   AC82         MOV     R4,DPL
   \   00001F   AD83         MOV     R5,DPH
   \   000021   85....       MOV     ?V0,?V4
   \   000024   85....       MOV     ?V1,?V5
   \   000027   75..00       MOV     ?V2,#0x0
   \   00002A   EE           MOV     A,R6
   \   00002B   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   00002E   04           DB        4
   \   00002F   41           DB        65
   \   000030   42           DB        66
   \   000031   ....         DW        ??zclSerializeData_1
   \   000033   43           DB        67
   \   000034   44           DB        68
   \   000035   ....         DW        ??zclSerializeData_2
   \   000037   E0           DB        224
   \   000038   E2           DB        226
   \   000039   ....         DW        ??zclSerializeData_3
   \   00003B   E8           DB        232
   \   00003C   E9           DB        233
   \   00003D   ....         DW        ??zclSerializeData_4
   \   00003F   1A           DB        26
   \   000040   08           DB        8
   \   000041   ....         DW        ??zclSerializeData_5
   \   000043   09           DB        9
   \   000044   ....         DW        ??zclSerializeData_4
   \   000046   0A           DB        10
   \   000047   ....         DW        ??zclSerializeData_6
   \   000049   0B           DB        11
   \   00004A   ....         DW        ??zclSerializeData_3
   \   00004C   10           DB        16
   \   00004D   ....         DW        ??zclSerializeData_5
   \   00004F   18           DB        24
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   19           DB        25
   \   000053   ....         DW        ??zclSerializeData_4
   \   000055   1A           DB        26
   \   000056   ....         DW        ??zclSerializeData_6
   \   000058   1B           DB        27
   \   000059   ....         DW        ??zclSerializeData_3
   \   00005B   20           DB        32
   \   00005C   ....         DW        ??zclSerializeData_5
   \   00005E   21           DB        33
   \   00005F   ....         DW        ??zclSerializeData_4
   \   000061   22           DB        34
   \   000062   ....         DW        ??zclSerializeData_6
   \   000064   23           DB        35
   \   000065   ....         DW        ??zclSerializeData_3
   \   000067   24           DB        36
   \   000068   ....         DW        ??zclSerializeData_7
   \   00006A   25           DB        37
   \   00006B   ....         DW        ??zclSerializeData_8
   \   00006D   28           DB        40
   \   00006E   ....         DW        ??zclSerializeData_5
   \   000070   29           DB        41
   \   000071   ....         DW        ??zclSerializeData_4
   \   000073   2A           DB        42
   \   000074   ....         DW        ??zclSerializeData_6
   \   000076   2B           DB        43
   \   000077   ....         DW        ??zclSerializeData_3
   \   000079   30           DB        48
   \   00007A   ....         DW        ??zclSerializeData_5
   \   00007C   31           DB        49
   \   00007D   ....         DW        ??zclSerializeData_4
   \   00007F   38           DB        56
   \   000080   ....         DW        ??zclSerializeData_4
   \   000082   39           DB        57
   \   000083   ....         DW        ??zclSerializeData_3
   \   000085   EA           DB        234
   \   000086   ....         DW        ??zclSerializeData_3
   \   000088   F0           DB        240
   \   000089   ....         DW        ??zclSerializeData_9
   \   00008B   F1           DB        241
   \   00008C   ....         DW        ??zclSerializeData_10
   \   00008E   ....         DW        ??zclSerializeData_0
    146            {
    147              case ZCL_DATATYPE_DATA8:
    148              case ZCL_DATATYPE_BOOLEAN:
    149              case ZCL_DATATYPE_BITMAP8:
    150              case ZCL_DATATYPE_INT8:
    151              case ZCL_DATATYPE_UINT8:
    152              case ZCL_DATATYPE_ENUM8:
    153                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   000090   85..82       MOV     DPL,?V4
   \   000093   85..83       MOV     DPH,?V5
   \   000096   E0           MOVX    A,@DPTR
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   EC           MOV     A,R4
   \   00009D   FA           MOV     R2,A
   \   00009E   ED           MOV     A,R5
   \   00009F   FB           MOV     R3,A
    154                 break;
   \   0000A0   02....       LJMP    ??zclSerializeData_0 & 0xFFFF
    155          
    156              case ZCL_DATATYPE_DATA16:
    157              case ZCL_DATATYPE_BITMAP16:
    158              case ZCL_DATATYPE_UINT16:
    159              case ZCL_DATATYPE_INT16:
    160              case ZCL_DATATYPE_ENUM16:
    161              case ZCL_DATATYPE_SEMI_PREC:
    162              case ZCL_DATATYPE_CLUSTER_ID:
    163              case ZCL_DATATYPE_ATTR_ID:
    164                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000A3   85..82       MOV     DPL,?V4
   \   0000A6   85..83       MOV     DPH,?V5
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   12....       LCALL   ?Subroutine0 & 0xFFFF
    165                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_0:
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   8A82         MOV     DPL,R2
   \   0000B5   8B83         MOV     DPH,R3
   \   0000B7   803C         SJMP    ??zclSerializeData_11
    166                break;
    167          
    168              case ZCL_DATATYPE_DATA24:
    169              case ZCL_DATATYPE_BITMAP24:
    170              case ZCL_DATATYPE_UINT24:
    171              case ZCL_DATATYPE_INT24:
    172                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000B9   85..82       MOV     DPL,?V4
   \   0000BC   85..83       MOV     DPH,?V5
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?L_MOV_X
   \   0000C4   8A82         MOV     DPL,R2
   \   0000C6   8B83         MOV     DPH,R3
   \   0000C8   E5..         MOV     A,?V0
   \   0000CA   12....       LCALL   ?Subroutine0 & 0xFFFF
    173                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_1:
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   12....       LCALL   ?L_MOV_X
   \   0000D2   E5..         MOV     A,?V1
   \   0000D4   8A82         MOV     DPL,R2
   \   0000D6   8B83         MOV     DPH,R3
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   0A           INC     R2
   \   0000DB   AB83         MOV     R3,DPH
    174                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000DD   85..82       MOV     DPL,?V4
   \   0000E0   85..83       MOV     DPH,?V5
   \   0000E3   78..         MOV     R0,#?V0
   \   0000E5   12....       LCALL   ?L_MOV_X
   \   0000E8   7410         MOV     A,#0x10
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   12....       LCALL   ?UL_SHR
   \   0000EF   8A82         MOV     DPL,R2
   \   0000F1   8B83         MOV     DPH,R3
   \   0000F3   E5..         MOV     A,?V0
   \                     ??zclSerializeData_11:
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   0A           INC     R2
   \   0000F8   AB83         MOV     R3,DPH
    175                break;
   \   0000FA   8067         SJMP    ??zclSerializeData_0
    176          
    177              case ZCL_DATATYPE_DATA32:
    178              case ZCL_DATATYPE_BITMAP32:
    179              case ZCL_DATATYPE_UINT32:
    180              case ZCL_DATATYPE_INT32:
    181              case ZCL_DATATYPE_SINGLE_PREC:
    182              case ZCL_DATATYPE_TOD:
    183              case ZCL_DATATYPE_DATE:
    184              case ZCL_DATATYPE_UTC:
    185              case ZCL_DATATYPE_BAC_OID:
    186                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   0000FC                ; Setup parameters for call to function osal_buffer_uint32
   \   0000FC   85..82       MOV     DPL,?V4
   \   0000FF   85..83       MOV     DPH,?V5
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000105   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000108   7404         MOV     A,#0x4
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
    187                break;
   \   00010D   8054         SJMP    ??zclSerializeData_0
    188          
    189              case ZCL_DATATYPE_UINT40:
    190                pStr = (uint8*)attrData;
    191                buf = (unsigned char *)osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   00010F                ; Setup parameters for call to function osal_memcpy
   \   00010F   78..         MOV     R0,#?V0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   7C05         MOV     R4,#0x5
   \   000116   8041         SJMP    ??zclSerializeData_12
    192                break;
    193          
    194              case ZCL_DATATYPE_UINT48:
    195                pStr = (uint8*)attrData;
    196                buf = (unsigned char *)osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   000118                ; Setup parameters for call to function osal_memcpy
   \   000118   78..         MOV     R0,#?V0
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00011D   7C06         MOV     R4,#0x6
   \   00011F   8038         SJMP    ??zclSerializeData_12
    197                break;
    198          
    199              case ZCL_DATATYPE_IEEE_ADDR:
    200                pStr = (uint8*)attrData;
    201                buf = (unsigned char *)osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_9:
   \   000121                ; Setup parameters for call to function osal_memcpy
   \   000121   78..         MOV     R0,#?V0
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000126   7C08         MOV     R4,#0x8
   \   000128   802F         SJMP    ??zclSerializeData_12
    202                break;
    203          
    204              case ZCL_DATATYPE_CHAR_STR:
    205              case ZCL_DATATYPE_OCTET_STR:
    206                pStr = (uint8*)attrData;
    207                len = *pStr;
    208                buf = (unsigned char *)osal_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   00012A                ; Setup parameters for call to function osal_memcpy
   \   00012A   78..         MOV     R0,#?V0
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012F   85..82       MOV     DPL,?V4
   \   000132   85..83       MOV     DPH,?V5
   \   000135   E0           MOVX    A,@DPTR
   \   000136   2401         ADD     A,#0x1
   \   000138   FC           MOV     R4,A
   \   000139   E4           CLR     A
   \   00013A   3400         ADDC    A,#0x0
   \   00013C   8011         SJMP    ??zclSerializeData_13
    209                break;
    210          
    211              case ZCL_DATATYPE_LONG_CHAR_STR:
    212              case ZCL_DATATYPE_LONG_OCTET_STR:
    213                pStr = (uint8*)attrData;
    214                len = BUILD_UINT16( pStr[0], pStr[1] );
    215                buf = (unsigned char *)osal_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   00013E                ; Setup parameters for call to function osal_memcpy
   \   00013E   78..         MOV     R0,#?V0
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000143   85..82       MOV     DPL,?V4
   \   000146   85..83       MOV     DPH,?V5
   \   000149   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00014C   FC           MOV     R4,A
   \   00014D   E4           CLR     A
   \   00014E   39           ADDC    A,R1
   \                     ??zclSerializeData_13:
   \   00014F   FD           MOV     R5,A
   \   000150   8009         SJMP    ??zclSerializeData_14
    216                break;
    217          
    218              case ZCL_DATATYPE_128_BIT_SEC_KEY:
    219                pStr = (uint8*)attrData;
    220                buf = (unsigned char *)osal_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_10:
   \   000152                ; Setup parameters for call to function osal_memcpy
   \   000152   78..         MOV     R0,#?V0
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000157   7C10         MOV     R4,#0x10
   \                     ??zclSerializeData_12:
   \   000159   7D00         MOV     R5,#0x0
   \                     ??zclSerializeData_14:
   \   00015B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00015E   7403         MOV     A,#0x3
   \   000160   12....       LCALL   ?DEALLOC_XSTACK8
    221                break;
    222          
    223              case ZCL_DATATYPE_NO_DATA:
    224              case ZCL_DATATYPE_UNKNOWN:
    225                // Fall through
    226          
    227              default:
    228                break;
    229            }
    230          
    231            return ( buf );
   \                     ??zclSerializeData_0:
   \   000163   7F06         MOV     R7,#0x6
   \   000165   02....       LJMP    ?BANKED_LEAVE_XDATA
    232          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005   85..82       MOV     DPL,?V4
   \   000008   85..83       MOV     DPH,?V5
   \   00000B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData
    233          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0      9   zclGetDataTypeLength
      1     18   zclSerializeData
        0     18   -> osal_buffer_uint32
        0     17   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??zclGetAttrDataLength?relay
       6  ??zclGetDataTypeLength?relay
       6  ??zclSerializeData?relay
      12  ?Subroutine0
       9  ?Subroutine1
      65  zclGetAttrDataLength
     166  zclGetDataTypeLength
     360  zclSerializeData

 
 612 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
 
 630 bytes of CODE memory

Errors: none
Warnings: none

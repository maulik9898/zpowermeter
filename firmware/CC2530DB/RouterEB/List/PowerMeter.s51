///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            15/Oct/2015  21:18:25 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\PowerMeter.c                           /
//    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Tools\f8wRouter.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Tools\f8wZCL.cfg                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\Source\PowerMeter.c -D SECURE=0 -D            /
//                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE   /
//                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN    /
//                          -D NV_INIT -D xNV_RESTORE -D                      /
//                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE  /
//                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ -lA                   /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zp /
//                          owermeter\firmware\CC2530DB\RouterEB\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\ -I C:\Users\paolo\Documents\GitH /
//                          ub\zpowermeter\firmware\CC2530DB\..\Source\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\ha\ -I                     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Source\zmain\ -I                  /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\include\ -I        /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\hal\target\CC2530EB\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\include\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\high_level\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\mac\low_level\srf04\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I C:\Users\paolo\Documents\GitHub\ /
//                          zpowermeter\firmware\CC2530DB\..\Components\mt\   /
//                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fi /
//                          rmware\CC2530DB\..\Components\osal\include\ -I    /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\saddr\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\services\sdata\ -I     /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\af\ -I           /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\nwk\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sapi\ -I         /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sec\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\sys\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zcl\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\stack\zdo\ -I          /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\ -I               /
//                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\..\Components\zmac\f8w\ -Ohz         /
//                          --require_prototypes                              /
//    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmw /
//                          are\CC2530DB\RouterEB\List\PowerMeter.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME PowerMeter

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN __INIT_XDATA_Z

        FUNCTION ??handleClusterCommands?relay,0203H
        PUBLIC ??powerMeterEventLoop?relay
        FUNCTION ??powerMeterEventLoop?relay,0203H
        PUBLIC ??powerMeter_Init?relay
        FUNCTION ??powerMeter_Init?relay,0203H
        PUBWEAK _A_IEN0
        FUNCTION handleClusterCommands,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC powerMeterEventLoop
        FUNCTION powerMeterEventLoop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC powerMeter_Init
        FUNCTION powerMeter_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
identifyInit        SYMBOL "identifyInit"
??identifyInit?relay SYMBOL "?relay", identifyInit
identifyLoop        SYMBOL "identifyLoop"
??identifyLoop?relay SYMBOL "?relay", identifyLoop
onOffInit           SYMBOL "onOffInit"
??onOffInit?relay   SYMBOL "?relay", onOffInit
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
processBasicClusterCommands SYMBOL "processBasicClusterCommands"
??processBasicClusterCommands?relay SYMBOL "?relay", processBasicClusterCommands
processIdentifyClusterClientCommands SYMBOL "processIdentifyClusterClientCommands"
??processIdentifyClusterClientCommands?relay SYMBOL "?relay", processIdentifyClusterClientCommands
processIdentifyClusterServerCommands SYMBOL "processIdentifyClusterServerCommands"
??processIdentifyClusterServerCommands?relay SYMBOL "?relay", processIdentifyClusterServerCommands
zclHA_Init          SYMBOL "zclHA_Init"
??zclHA_Init?relay  SYMBOL "?relay", zclHA_Init
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
??zcl_registerPlugin?relay SYMBOL "?relay", zcl_registerPlugin
powerMeterEventLoop SYMBOL "powerMeterEventLoop"
??powerMeterEventLoop?relay SYMBOL "?relay", powerMeterEventLoop
powerMeter_Init     SYMBOL "powerMeter_Init"
??powerMeter_Init?relay SYMBOL "?relay", powerMeter_Init

        EXTERN ??identifyInit?relay
        FUNCTION ??identifyInit?relay,00H
        EXTERN ??identifyLoop?relay
        FUNCTION ??identifyLoop?relay,00H
        EXTERN ??onOffInit?relay
        FUNCTION ??onOffInit?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??processBasicClusterCommands?relay
        FUNCTION ??processBasicClusterCommands?relay,00H
        EXTERN ??processIdentifyClusterClientCommands?relay
        FUNCTION ??processIdentifyClusterClientCommands?relay,00H
        EXTERN ??processIdentifyClusterServerCommands?relay
        FUNCTION ??processIdentifyClusterServerCommands?relay,00H
        EXTERN ??zclHA_Init?relay
        FUNCTION ??zclHA_Init?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,00H
        EXTERN ??zcl_registerPlugin?relay
        FUNCTION ??zcl_registerPlugin?relay,00H
        EXTERN OnOff_SimpleDesc
        EXTERN identifyInit
        FUNCTION identifyInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN identifyLoop
        FUNCTION identifyLoop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN onOffInit
        FUNCTION onOffInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN powerMeterAttrs
        EXTERN processBasicClusterCommands
        FUNCTION processBasicClusterCommands,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN processIdentifyClusterClientCommands
        FUNCTION processIdentifyClusterClientCommands,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN processIdentifyClusterServerCommands
        FUNCTION processIdentifyClusterServerCommands,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Source\PowerMeter.c
//    1 /**************************************************************************************************
//    2 
//    3  DESCRIPTION:
//    4   --
//    5 
//    6  CREATED: 14/10/2015, by Paolo Achdjian
//    7 
//    8  FILE: PowerMeter.c
//    9 
//   10 ***************************************************************************************************/
//   11 
//   12 #include "ZComDef.h"
//   13 #include "OSAL.h"
//   14 #include "AF.h"
//   15 #include "ZDApp.h"
//   16 
//   17 #include "zcl.h"
//   18 #include "zcl_general.h"
//   19 #include "zcl_ha.h"
//   20 #include "PowerMeter.h"
//   21 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   22 /* HAL */
//   23 #include "hal_lcd.h"
//   24 #include "hal_led.h"
//   25 #include "hal_key.h"
//   26 #include "clusters/ClusterIdentify.h"
//   27 #include "clusters/ClusterBasic.h"
//   28 #include "clusters/ClusterOnOff.h"
//   29 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 static byte zPowerMeterTaskID;
zPowerMeterTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   31 
//   32 
//   33 static void zPowerMeter_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//   34 static uint8 zPowerMeter_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//   35 static uint8 zPowerMeter_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//   36 static uint8 zPowerMeter_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//   37 #ifdef ZCL_DISCOVER
//   38 static uint8 zPowerMeter_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
//   39 #endif
//   40 static ZStatus_t handleClusterCommands( zclIncoming_t *pInMsg );
//   41 /*********************************************************************
//   42  * ZCL General Profile Callback table
//   43  */
//   44 /*********************************************************************
//   45  * @fn          temperatureHumiditySensor_Init
//   46  *
//   47  * @brief       Initialization function for the zclGeneral layer.
//   48  *
//   49  * @param       none
//   50  *
//   51  * @return      none
//   52  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 void powerMeter_Init( byte task_id ){
powerMeter_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function powerMeter_Init
        CODE
        FUNCALL powerMeter_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeter_Init, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeter_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeter_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeter_Init, identifyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeter_Init, onOffInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//   54 	zPowerMeterTaskID = task_id;
        MOV     DPTR,#zPowerMeterTaskID
        MOVX    @DPTR,A
//   55 	zclHA_Init( &OnOff_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#OnOff_SimpleDesc & 0xff
        MOV     R3,#(OnOff_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
//   56 	zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,    handleClusterCommands );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV     ?V0,#??handleClusterCommands?relay & 0xff
        MOV     ?V1,#(??handleClusterCommands?relay >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zcl_registerPlugin?relay; Banked call to: zcl_registerPlugin
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//   57  	zcl_registerAttrList(ENDPOINT_ONOFF, powerMeterAttrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R2,#powerMeterAttrs & 0xff
        MOV     R3,#(powerMeterAttrs >> 8) & 0xff
        MOV     R1,#0xd
        LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
//   58   	zcl_registerForMsg( zPowerMeterTaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zPowerMeterTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zcl_registerForMsg?relay; Banked call to: zcl_registerForMsg
//   59   
//   60   	EA=1;
        SETB    0xa8.7
//   61  	identifyInit(zPowerMeterTaskID);
        ; Setup parameters for call to function identifyInit
        MOV     DPTR,#zPowerMeterTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??identifyInit?relay ; Banked call to: identifyInit
//   62 	onOffInit();
        ; Setup parameters for call to function onOffInit
        LCALL   ??onOffInit?relay    ; Banked call to: onOffInit
          CFI EndBlock cfiBlock0
//   63 }
        REQUIRE ?Subroutine0
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   64 
//   65 /*********************************************************************
//   66  * @fn          zclSample_event_loop
//   67  *
//   68  * @brief       Event Loop Processor for zclGeneral.
//   69  *
//   70  * @param       none
//   71  *
//   72  * @return      none
//   73  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 uint16 powerMeterEventLoop( uint8 task_id, uint16 events ){
powerMeterEventLoop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function powerMeterEventLoop
        CODE
        FUNCALL powerMeterEventLoop, identifyLoop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeterEventLoop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeterEventLoop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powerMeterEventLoop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//   75 	afIncomingMSGPacket_t *MSGpkt;
//   76   
//   77 	  (void)task_id;  // Intentionally unreferenced parameter
//   78 	 if ( events & SYS_EVENT_MSG ){
        MOV     A,R3
        ANL     A,#0x80
        JNZ     ??powerMeterEventLoop_0
//   79 		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zPowerMeterTaskID )) )  {
//   80 			switch ( MSGpkt->hdr.event ) {
//   81 				case ZCL_INCOMING_MSG:
//   82           			// Incoming ZCL Foundation command/response messages
//   83           			zPowerMeter_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//   84           			break;
//   85 		       default:
//   86         		  break;
//   87       		}
//   88 
//   89         osal_msg_deallocate( (uint8 *)MSGpkt );
//   90     	}
//   91 
//   92     	return (events ^ SYS_EVENT_MSG);
//   93 	}
//   94 	
//   95 	if ( events & IDENTIFY_TIMEOUT_EVT ) {
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??powerMeterEventLoop_1
//   96 		return identifyLoop(events);
        ; Setup parameters for call to function identifyLoop
        LCALL   ??identifyLoop?relay ; Banked call to: identifyLoop
        SJMP    ??powerMeterEventLoop_2
//   97 	}
??powerMeterEventLoop_3:
        INC     R1
??powerMeterEventLoop_4:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JC      ??powerMeterEventLoop_3
??powerMeterEventLoop_5:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??powerMeterEventLoop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
??powerMeterEventLoop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
??powerMeterEventLoop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zPowerMeterTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        MOV     A,R6
        ORL     A,R7
        JZ      ??powerMeterEventLoop_7
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??powerMeterEventLoop_6
        MOV     A,R6
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??powerMeterEventLoop_8
        ADD     A,#-0x3
        JNZ     ??powerMeterEventLoop_5
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JNC     ??powerMeterEventLoop_5
        INC     R1
        SJMP    ??CrossCallReturnLabel_0
??powerMeterEventLoop_8:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??powerMeterEventLoop_4
??powerMeterEventLoop_7:
        MOV     R2,?V0
        MOV     A,?V1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??powerMeterEventLoop_2
//   98 	
//   99  	return 0;
??powerMeterEventLoop_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??powerMeterEventLoop_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  100 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function powerMeterEventLoop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function powerMeterEventLoop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  101 
//  102 /****************************************************************************** 
//  103  * 
//  104  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  105  *
//  106  *****************************************************************************/
//  107 
//  108 /*********************************************************************
//  109  * @fn      zPowerMeter_ProcessIncomingMsg
//  110  *
//  111  * @brief   Process ZCL Foundation incoming message
//  112  *
//  113  * @param   pInMsg - pointer to the received message
//  114  *
//  115  * @return  none
//  116  */
//  117 static void zPowerMeter_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg){
//  118 	switch ( pInMsg->zclHdr.commandID ){
//  119 		case ZCL_CMD_READ_RSP:
//  120 			zPowerMeter_ProcessInReadRspCmd( pInMsg );
//  121 			break;
//  122 		case ZCL_CMD_WRITE_RSP:
//  123 			zPowerMeter_ProcessInWriteRspCmd( pInMsg );
//  124 			break;
//  125 #ifdef ZCL_REPORT
//  126     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  127 		case ZCL_CMD_CONFIG_REPORT:
//  128       	//zclSampleLight_ProcessInConfigReportCmd( pInMsg );
//  129 			break;
//  130     
//  131 		case ZCL_CMD_CONFIG_REPORT_RSP:
//  132       //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
//  133 			break;
//  134     
//  135 		case ZCL_CMD_READ_REPORT_CFG:
//  136       //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
//  137 			break;
//  138     
//  139 		case ZCL_CMD_READ_REPORT_CFG_RSP:
//  140       //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
//  141 			break;
//  142     
//  143 		case ZCL_CMD_REPORT:
//  144       	//zclSampleLight_ProcessInReportCmd( pInMsg );
//  145 			break;
//  146 #endif   
//  147 		case ZCL_CMD_DEFAULT_RSP:
//  148 			zPowerMeter_ProcessInDefaultRspCmd( pInMsg );
//  149 			break;
//  150 #ifdef ZCL_DISCOVER     
//  151 		case ZCL_CMD_DISCOVER_RSP:
//  152 			zPowerMeter_ProcessInDiscRspCmd( pInMsg );
//  153 			break;
//  154 #endif  
//  155 		default:
//  156 			break;
//  157 	}
//  158   
//  159 	if ( pInMsg->attrCmd )
//  160     	osal_mem_free( pInMsg->attrCmd );
//  161 }
//  162 
//  163 /*********************************************************************
//  164  * @fn      zPowerMeter_ProcessInReadRspCmd
//  165  *
//  166  * @brief   Process the "Profile" Read Response Command
//  167  *
//  168  * @param   pInMsg - incoming message to process
//  169  *
//  170  * @return  none
//  171  */
//  172 static uint8 zPowerMeter_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg ){
//  173 	zclReadRspCmd_t *readRspCmd;
//  174 	uint8 i;
//  175 
//  176 	readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  177 	for (i = 0; i < readRspCmd->numAttr; i++){
//  178 		// Notify the originator of the results of the original read attributes attempt and, for each successfull request, the value of the requested attribute
//  179 	}
//  180 
//  181 	return TRUE; 
//  182 }
//  183 
//  184 /*********************************************************************
//  185  * @fn      zPowerMeter_ProcessInWriteRspCmd
//  186  *
//  187  * @brief   Process the "Profile" Write Response Command
//  188  *
//  189  * @param   pInMsg - incoming message to process
//  190  *
//  191  * @return  none
//  192  */
//  193 static uint8 zPowerMeter_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg ){
//  194  	zclWriteRspCmd_t *writeRspCmd;
//  195  	uint8 i;
//  196 
//  197  	writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  198  	for (i = 0; i < writeRspCmd->numAttr; i++) {
//  199 		// Notify the device of the results of the its original write attributes command.
//  200  	}
//  201 
//  202  	return TRUE; 
//  203 }
//  204 
//  205 /*********************************************************************
//  206  * @fn      zPowerMeter_ProcessInDefaultRspCmd
//  207  *
//  208  * @brief   Process the "Profile" Default Response Command
//  209  *
//  210  * @param   pInMsg - incoming message to process
//  211  *
//  212  * @return  none
//  213  */
//  214 static uint8 zPowerMeter_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg ){
//  215 	// zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  216    
//  217 	// Device is notified of the Default Response command.
//  218   	(void)pInMsg;
//  219   
//  220   	return TRUE; 
//  221 }
//  222 
//  223 #ifdef ZCL_DISCOVER
//  224 /*********************************************************************
//  225  * @fn      zPowerMeter_ProcessInDiscRspCmd
//  226  *
//  227  * @brief   Process the "Profile" Discover Response Command
//  228  *
//  229  * @param   pInMsg - incoming message to process
//  230  *
//  231  * @return  none
//  232  */
//  233 static uint8 zPowerMeter_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg ){
//  234 	zclDiscoverRspCmd_t *discoverRspCmd;
//  235  	uint8 i;
//  236   
//  237  	discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
//  238   	for ( i = 0; i < discoverRspCmd->numAttr; i++ ) {
//  239 		// Device is notified of the result of its attribute discovery command.
//  240   	}
//  241   
//  242  	return TRUE;
//  243 }
//  244 #endif // ZCL_DISCOVER
//  245 
//  246 /*********************************************************************
//  247  * @brief      dispatch the cluster command to the right callback function
//  248  *
//  249  * @param   pInMsg - incoming message to process
//  250  *
//  251  * @return  none
//  252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 static ZStatus_t handleClusterCommands( zclIncoming_t *pInMsg ){
handleClusterCommands:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function handleClusterCommands
        CODE
        FUNCALL handleClusterCommands, processBasicClusterCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL handleClusterCommands, processIdentifyClusterServerCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL handleClusterCommands, processIdentifyClusterClientCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x8
        JNZ     ??handleClusterCommands_0
//  254 	ZStatus_t stat = ZFailure;
//  255 
//  256 	if (zcl_ServerCmd( pInMsg->hdr.fc.direction ) ) {
//  257 		switch ( pInMsg->msg->clusterId ){
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for handleClusterCommands>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??handleClusterCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??handleClusterCommands_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??handleClusterCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??handleClusterCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??handleClusterCommands_3
        CODE
//  258 		    case ZCL_CLUSTER_ID_GEN_BASIC:
//  259     		return processBasicClusterCommands(pInMsg);
??handleClusterCommands_2:
        ; Setup parameters for call to function processBasicClusterCommands
        LCALL   ??processBasicClusterCommands?relay; Banked call to: processBasicClusterCommands
        SJMP    ??handleClusterCommands_4
//  260 	    case ZCL_CLUSTER_ID_GEN_IDENTIFY:
//  261 			return processIdentifyClusterServerCommands( pInMsg );
??handleClusterCommands_3:
        ; Setup parameters for call to function processIdentifyClusterServerCommands
        LCALL   ??processIdentifyClusterServerCommands?relay; Banked call to: processIdentifyClusterServerCommands
        SJMP    ??handleClusterCommands_4
//  262 	    case ZCL_CLUSTER_ID_GEN_GROUPS:
//  263     	case ZCL_CLUSTER_ID_GEN_SCENES:
//  264 	    case ZCL_CLUSTER_ID_GEN_ON_OFF:
//  265     	case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
//  266 	    case ZCL_CLUSTER_ID_GEN_ALARMS:
//  267     	case ZCL_CLUSTER_ID_GEN_LOCATION:
//  268 	    case ZCL_CLUSTER_ID_GEN_POWER_CFG:
//  269     	case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
//  270 	    case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
//  271     	case ZCL_CLUSTER_ID_GEN_TIME:
//  272 	    default:
//  273     	  stat = ZFailure;
//  274 	      break;
//  275   		}
//  276 	} else {
//  277 		switch ( pInMsg->msg->clusterId ){
??handleClusterCommands_0:
        MOV     A,#0x3
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??handleClusterCommands_1
//  278 	
//  279   	    case ZCL_CLUSTER_ID_GEN_IDENTIFY:
//  280 			return processIdentifyClusterClientCommands( pInMsg );
        ; Setup parameters for call to function processIdentifyClusterClientCommands
        LCALL   ??processIdentifyClusterClientCommands?relay; Banked call to: processIdentifyClusterClientCommands
        SJMP    ??handleClusterCommands_4
//  281 	    default:
//  282     	  stat = ZFailure;
//  283 	      break;
//  284   		}
//  285 	}
//  286 
//  287   return ( stat );
??handleClusterCommands_1:
        MOV     R1,#0x1
??handleClusterCommands_4:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock6
//  288 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??powerMeter_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powerMeter_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??powerMeterEventLoop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powerMeterEventLoop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??handleClusterCommands?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    handleClusterCommands

        END
//  289 
//  290 
//  291 
//  292 /****************************************************************************
//  293 ****************************************************************************/
//  294 
//  295 
// 
// 326 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//   1 byte  in segment XDATA_Z
// 
// 344 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 1 byte shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none

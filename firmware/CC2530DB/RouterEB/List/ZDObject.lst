###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             02/Nov/2015  18:31:52 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDObject.c                 #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zdo\ZDObject.c -D SECURE=0 -D  #
#                          OSC32K_CRYSTAL_INSTALLED=FALSE -D HAL_KEY=FALSE    #
#                          -D HAL_BOARD_CC2530EB_REV17 -D TC_LINKKEY_JOIN -D  #
#                          NV_INIT -D xNV_RESTORE -D MULTICAST_ENABLED=FALSE  #
#                          -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D          #
#                          FEATURE_SYSTEM_STATS -lC                           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ZDObject.lst             #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ZDObject.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL   ??APS_ReflectorInit?relay; Banked call to: APS_ReflectorInit
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL   ??NLME_DeviceJoiningInit?relay; Banked call to: NLME_DeviceJoiningInit
    192          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */
    254          static void ZDODeviceSetup( void )
    255          {
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    296            {
    297              if ( startMode == MODE_HARD )
    298              {
    299                devState = DEV_COORD_STARTING;
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
    303              }
    304              else if ( startMode == MODE_RESUME )
    305              {
    306                // Just start the coordinator
    307                devState = DEV_COORD_STARTING;
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   65..         XRL     A,?V1
   \   000012   6009         JZ      ??ZDO_StartDevice_0
   \   000014   7402         MOV     A,#0x2
   \   000016   65..         XRL     A,?V1
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001D   EA           MOV     A,R2
   \   00001E   6006         JZ      ??ZDO_StartDevice_2
   \   000020   7403         MOV     A,#0x3
   \   000022   65..         XRL     A,?V0
   \   000024   7040         JNZ     ??ZDO_StartDevice_3
    321              {
    322                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000026   90....       MOV     DPTR,#devState
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?Subroutine34 & 0xFFFF
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327            #else
    328                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_52:
   \   00002E   12....       LCALL   ?XLOAD_R2345
   \   000031   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay; Banked call to: NLME_NetworkDiscoveryRequest
    329              #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000034   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000037   E0           MOVX    A,@DPTR
   \   000038   A2E3         MOV     C,0xE0 /* A   */.3
   \   00003A   4010         JC      ??CrossCallReturnLabel_44
   \   00003C   E9           MOV     A,R1
   \   00003D   700D         JNZ     ??CrossCallReturnLabel_44
   \   00003F   90....       MOV     DPTR,#??discRetries
   \   000042   E0           MOVX    A,@DPTR
   \   000043   04           INC     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   6404         XRL     A,#0x4
   \   000047   7003         JNZ     ??CrossCallReturnLabel_44
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000049   12....       LCALL   ?Subroutine30 & 0xFFFF
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??CrossCallReturnLabel_44:
   \   00004C   7403         MOV     A,#0x3
   \   00004E   65..         XRL     A,?V0
   \   000050   705C         JNZ     ??ZDO_StartDevice_4
   \   000052   90....       MOV     DPTR,#??scanCnt
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   7401         MOV     A,#0x1
   \   000059   28           ADD     A,R0
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   E8           MOV     A,R0
   \   00005C   C3           CLR     C
   \   00005D   9405         SUBB    A,#0x5
   \   00005F   404D         JC      ??ZDO_StartDevice_4
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000061   12....       LCALL   ?Subroutine30 & 0xFFFF
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
   \                     ??CrossCallReturnLabel_45:
   \   000064   8048         SJMP    ??ZDO_StartDevice_4
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   000066   7401         MOV     A,#0x1
   \   000068   65..         XRL     A,?V0
   \   00006A   7045         JNZ     ??ZDO_StartDevice_1
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   00006C   7401         MOV     A,#0x1
   \   00006E   65..         XRL     A,?V1
   \   000070   90....       MOV     DPTR,#devState
   \   000073   702E         JNZ     ??ZDO_StartDevice_5
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  devState = DEV_NWK_ORPHAN;
   \   000075   7409         MOV     A,#0x9
   \   000077   F0           MOVX    @DPTR,A
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7403         MOV     A,#0x3
   \   000086   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   000087   04           INC     A
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   000093   7408         MOV     A,#0x8
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00009A                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00009A   AA..         MOV     R2,?XSP + 0
   \   00009C   AB..         MOV     R3,?XSP + 1
   \   00009E   12....       LCALL   ??nwk_ScanJoiningOrphan?relay; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   0000A1   8025         SJMP    ??ZDO_StartDevice_6
    371                }
    372                else
    373                {
    374                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?Subroutine34 & 0xFFFF
    375                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    376                                                zgDefaultStartingScanDuration );
    377                }
    378              }
    379              else
    380              {
    381          #if defined( LCD_SUPPORTED )
    382                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    383          #endif
    384              }
    385            }
   \                     ??CrossCallReturnLabel_53:
   \   0000A8   12....       LCALL   ?XLOAD_R2345
   \   0000AB   12....       LCALL   ??NLME_OrphanJoinRequest?relay; Banked call to: NLME_OrphanJoinRequest
    386          
    387            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000AE   E9           MOV     A,R1
   \   0000AF   6017         JZ      ??ZDO_StartDevice_6
    388            {
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000B1                ; Setup parameters for call to function osal_start_timerEx
   \   0000B1   90....       MOV     DPTR,#__Constant_3e8
   \   0000B4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B7   7A01         MOV     R2,#0x1
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   90....       MOV     DPTR,#ZDAppTaskID
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000C3   7404         MOV     A,#0x4
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
    390            }
    391          }
   \                     ??ZDO_StartDevice_6:
   \   0000C8   740B         MOV     A,#0xb
   \   0000CA   02....       LJMP    ??Subroutine145_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   90....       MOV     DPTR,#zgDefaultChannelList
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74F8         MOV     A,#-0x8
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7407         MOV     A,#0x7
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine146_0
   \   000003                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??osal_msg_find?relay; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    413          
    414            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP    ??Subroutine146_0 & 0xFFFF
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   801B         SJMP    ??CrossCallReturnLabel_137
    462          
    463          #if defined MT_ZDO_CB_FUNC
    464            if ( zdpExternalStateTaskID == -1 )
    465            {
    466              zdpExternalStateTaskID = MT_TaskID;
    467            }
    468          #endif
    469          
    470            while (pItem != NULL)
    471            {
    472              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   600A         JZ      ??ZDO_UpdateNwkStatus_1
    473              {
    474                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   00001A                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine159_0 & 0xFFFF
    475              }
   \                     ??CrossCallReturnLabel_319:
   \   00001E   FA           MOV     R2,A
   \   00001F   A9..         MOV     R1,?V0
   \   000021   12....       LCALL   ??zdoSendStateChangeMsg?relay; Banked call to: zdoSendStateChangeMsg
    476          
    477              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   12....       LCALL   ?Subroutine81 & 0xFFFF
    478            }
   \                     ??CrossCallReturnLabel_137:
   \   00002B   FF           MOV     R7,A
   \   00002C   EE           MOV     A,R6
   \   00002D   4F           ORL     A,R7
   \   00002E   70E0         JNZ     ??ZDO_UpdateNwkStatus_0
    479            
    480            if ( zdpExternalStateTaskID != -1 )
   \   000030   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F4           CPL     A
   \   000035   7003         JNZ     ??ZDO_UpdateNwkStatus_2
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00003A   600A         JZ      ??ZDO_UpdateNwkStatus_3
    481            {  
    482              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   00003C                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00003C   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   A9..         MOV     R1,?V0
   \   000043   12....       LCALL   ??zdoSendStateChangeMsg?relay; Banked call to: zdoSendStateChangeMsg
    483            }
    484            
    485            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000046                ; Setup parameters for call to function NLME_GetShortAddr
   \   000046   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000049   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004C   12....       LCALL   ?Subroutine41 & 0xFFFF
    486            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_66:
   \   00004F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004F   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
    487          }
   \   000052                REQUIRE ?Subroutine2
   \   000052                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine143_0
   \   000002                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine144_0
   \   000001                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   22           RET
    488          
    489          #if defined ( REFLECTOR )
    490          /*********************************************************************
    491           * @fn          ZDO_RemoveEndDeviceBind
    492           *
    493           * @brief       Remove the end device bind
    494           *
    495           * @param  none
    496           *
    497           * @return      none
    498           */
    499          static void ZDO_RemoveEndDeviceBind( void )
    500          {
    501            if ( ZDO_EDBind != NULL )
    502            {
    503              // Free the RAM
    504              if ( ZDO_EDBind->inClusters != NULL )
    505              {
    506                osal_mem_free( ZDO_EDBind->inClusters );
    507              }
    508              if ( ZDO_EDBind->outClusters != NULL )
    509              {
    510                osal_mem_free( ZDO_EDBind->outClusters );
    511              }
    512              osal_mem_free( ZDO_EDBind );
    513              ZDO_EDBind = NULL;
    514            }
    515          }
    516          #endif // REFLECTOR
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */
    528          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    529          {
    530            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    531          
    532          #if defined( LCD_SUPPORTED )
    533            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    534            if ( Status == ZDP_SUCCESS )
    535            {
    536              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    537            }
    538            else
    539            {
    540              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    541            }
    542          #endif
    543          
    544          }
    545          #endif // REFLECTOR
    546          
    547          #if ( ZG_BUILD_COORDINATOR_TYPE )
    548          /*********************************************************************
    549           * @fn          ZDO_CompareClusterLists
    550           *
    551           * @brief       Compare one list to another list
    552           *
    553           * @param       numList1 - number of items in list 1
    554           * @param       list1 - first list of cluster IDs
    555           * @param       numList2 - number of items in list 2
    556           * @param       list2 - second list of cluster IDs
    557           * @param       pMatches - buffer to put matches
    558           *
    559           * @return      number of matches
    560           */
    561          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    562                                    byte numList2, uint16 *list2, uint16 *pMatches )
    563          {
    564            byte x, y;
    565            uint16 z;
    566            byte numMatches = 0;
    567          
    568            // Check the first in against the seconds out
    569            for ( x = 0; x < numList1; x++ )
    570            {
    571              for ( y = 0; y < numList2; y++ )
    572              {
    573                z = list2[y];
    574                if ( list1[x] == z )
    575                {
    576                  pMatches[numMatches++] = z;
    577                }
    578              }
    579            }
    580          
    581            return ( numMatches );
    582          }
    583          #endif // ZG_BUILD_COORDINATOR_TYPE
    584          
    585          /*********************************************************************
    586           * Utility functions
    587           */
    588          
    589          /*********************************************************************
    590           * @fn          ZDO_CompareByteLists
    591           *
    592           * @brief       Compares two lists for matches.
    593           *
    594           * @param       ACnt  - number of entries in list A
    595           * @param       AList  - List A
    596           * @param       BCnt  - number of entries in list B
    597           * @param       BList  - List B
    598           *
    599           * @return      true if a match is found
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
    603            byte x, y;
    604          
    605            for ( x = 0; x < ACnt; x++ )
   \   000007   7D00         MOV     R5,#0x0
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000011   8001         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000013   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000014   ED           MOV     A,R5
   \   000015   C3           CLR     C
   \   000016   95..         SUBB    A,?V3
   \   000018   503F         JNC     ??ZDO_AnyClusterMatches_2
    606            {
    607              for ( y = 0; y < BCnt; y++ )
   \   00001A   75..00       MOV     ?V2,#0x0
   \   00001D   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00001F   05..         INC     ?V2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000021   E5..         MOV     A,?V2
   \   000023   C3           CLR     C
   \   000024   9C           SUBB    A,R4
   \   000025   50EC         JNC     ??ZDO_AnyClusterMatches_1
    608              {
    609                if ( AList[x] == BList[y] )
   \   000027   ED           MOV     A,R5
   \   000028   25E0         ADD     A,0xE0 /* A   */
   \   00002A   FE           MOV     R6,A
   \   00002B   E4           CLR     A
   \   00002C   33           RLC     A
   \   00002D   FF           MOV     R7,A
   \   00002E   EA           MOV     A,R2
   \   00002F   2E           ADD     A,R6
   \   000030   F582         MOV     DPL,A
   \   000032   EB           MOV     A,R3
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000039   F5..         MOV     ?V1,A
   \   00003B   AE..         MOV     R6,?V2
   \   00003D   EE           MOV     A,R6
   \   00003E   2E           ADD     A,R6
   \   00003F   FE           MOV     R6,A
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   FF           MOV     R7,A
   \   000043   E8           MOV     A,R0
   \   000044   2E           ADD     A,R6
   \   000045   F582         MOV     DPL,A
   \   000047   E9           MOV     A,R1
   \   000048   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00004B   65..         XRL     A,?V0
   \   00004D   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000053   70CA         JNZ     ??ZDO_AnyClusterMatches_4
    610                {
    611                  return true;
   \   000055   7901         MOV     R1,#0x1
   \   000057   8002         SJMP    ??ZDO_AnyClusterMatches_6
    612                }
    613              }
    614            }
    615          
    616            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000059   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00005B   02....       LJMP    ??Subroutine162_0 & 0xFFFF
    617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   3F           ADDC    A,R7
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    618          
    619          /*********************************************************************
    620           * Callback functions from ZDProfile
    621           */
    622          
    623          /*********************************************************************
    624           * @fn          ZDO_ProcessNodeDescReq
    625           *
    626           * @brief       This function processes and responds to the
    627           *              Node_Desc_req message.
    628           *
    629           * @param       inMsg - incoming message
    630           *
    631           * @return      none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine47 & 0xFFFF
    635            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    636            NodeDescriptorFormat_t *desc = NULL;
    637          
    638            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_86:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    639            {
    640              desc = &ZDO_Config_Node_Descriptor;
    641            }
    642          
    643            if ( desc != NULL )
    644            {
    645              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    646            }
    647            else
    648            {
    649              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    650                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine48 & 0xFFFF
    651            }
   \                     ??CrossCallReturnLabel_88:
   \   00003D   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    652          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FD           MOV     R5,A
   \   00000B   7C80         MOV     R4,#-0x80
   \   00000D   EE           MOV     A,R6
   \   00000E   2402         ADD     A,#0x2
   \   000010   FA           MOV     R2,A
   \   000011   E4           CLR     A
   \   000012   3F           ADDC    A,R7
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000004   3F           ADDC    A,R7
   \   000005   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000008   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   00000B   28           ADD     A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine163_0
   \   000001                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
    653          
    654          /*********************************************************************
    655           * @fn          ZDO_ProcessPowerDescReq
    656           *
    657           * @brief       This function processes and responds to the
    658           *              Node_Power_req message.
    659           *
    660           * @param       inMsg  - incoming request
    661           *
    662           * @return      none
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    665          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine47 & 0xFFFF
    666            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    667            NodePowerDescriptorFormat_t *desc = NULL;
    668          
    669            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_87:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    670            {
    671              desc = &ZDO_Config_Power_Descriptor;
    672            }
    673          
    674            if ( desc != NULL )
    675            {
    676              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    677            }
    678            else
    679            {
    680              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    681                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine48 & 0xFFFF
    682            }
   \                     ??CrossCallReturnLabel_89:
   \   00003D   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    683          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine146_0
    684          
    685          /*********************************************************************
    686           * @fn          ZDO_ProcessSimpleDescReq
    687           *
    688           * @brief       This function processes and responds to the
    689           *              Simple_Desc_req message.
    690           *
    691           * @param       inMsg - incoming message (request)
    692           *
    693           * @return      none
    694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine145_0
   \   000002                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    697            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    698            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00001B   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001E   FB           MOV     R3,A
   \   00001F   EC           MOV     A,R4
   \   000020   FA           MOV     R2,A
    699            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
    700            byte free = false;
   \   000029   75..00       MOV     ?V1,#0x0
    701            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV     ?V0,#0x0
    702          
    703            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000031   74FF         MOV     A,#-0x1
   \   000033   69           XRL     A,R1
   \   000034   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    704            {
    705              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV     ?V0,#-0x7e
   \   000039   8037         SJMP    ??ZDO_ProcessSimpleDescReq_2
    706            }
    707            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6A           XRL     A,R2
   \   000040   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7014         JNZ     ??ZDO_ProcessSimpleDescReq_4
    708            {
    709              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   ??afFindSimpleDesc?relay; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV     A,R1
   \   00004F   F5..         MOV     ?V1,A
    710              if ( sDesc == NULL )
   \   000051   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000054   701C         JNZ     ??ZDO_ProcessSimpleDescReq_2
    711              {
    712                stat = ZDP_NOT_ACTIVE;
   \   000056   75..83       MOV     ?V0,#-0x7d
   \   000059   8017         SJMP    ??ZDO_ProcessSimpleDescReq_2
    713              }
    714            }
    715            else
    716            {
    717              if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6004         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   000061   6401         XRL     A,#0x1
   \   000063   7005         JNZ     ??ZDO_ProcessSimpleDescReq_6
    718              {
    719                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000065   75..81       MOV     ?V0,#-0x7f
   \   000068   8008         SJMP    ??ZDO_ProcessSimpleDescReq_2
    720              }
    721              else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6402         XRL     A,#0x2
   \   00006D   7003         JNZ     ??ZDO_ProcessSimpleDescReq_2
    722              {
    723                stat = ZDP_INVALID_REQTYPE;
   \   00006F   75..80       MOV     ?V0,#-0x80
    724              }
    725            }
    726          
    727            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000072                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00007B   A9..         MOV     R1,?V0
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   ??ZDP_SimpleDescMsg?relay; Banked call to: ZDP_SimpleDescMsg
    728          
    729            if ( free && sDesc )
   \   000084   E5..         MOV     A,?V1
   \   000086   600B         JZ      ??ZDO_ProcessSimpleDescReq_7
   \   000088   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00008B   6006         JZ      ??ZDO_ProcessSimpleDescReq_7
    730            {
    731              osal_mem_free( sDesc );
   \   00008D                ; Setup parameters for call to function osal_mem_free
   \   00008D   12....       LCALL   ??Subroutine154_0 & 0xFFFF
    732            }
   \                     ??CrossCallReturnLabel_288:
   \   000090   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    733          }
   \                     ??ZDO_ProcessSimpleDescReq_7:
   \   000093   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine149_0
   \   000001                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine155_0
   \   000006                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   3F           ADDC    A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine166_0
   \   000006                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   22           RET
    734          
    735          /*********************************************************************
    736           * @fn          ZDO_ProcessActiveEPReq
    737           *
    738           * @brief       This function processes and responds to the
    739           *              Active_EP_req message.
    740           *
    741           * @param       inMsg  - incoming message (request)
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    747            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
    748            uint16 aoi;
    749            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V3,#0x0
    750          
    751            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000012   F5..         MOV     ?V0,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V1,A
    752          
    753            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V0
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    754            {
    755              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   ??afNumEndPoints?relay; Banked call to: afNumEndPoints
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V2,A
    756              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   ??afEndPoints?relay  ; Banked call to: afEndPoints
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    757            }
    758            else
    759            {
    760              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V3,#-0x80
    761            }
    762          
    763            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    764                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00003D   F5..         MOV     ?V4,A
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V3
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000065   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000068   F9           MOV     R1,A
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   000070   7407         MOV     A,#0x7
   \   000072   02....       LJMP    ?Subroutine4 & 0xFFFF
    765          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine150_0
   \   000003                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine151_0
   \   000003                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine168_0
   \   000003                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    766          
    767          /*********************************************************************
    768           * @fn          ZDO_ConvertOTAClusters
    769           *
    770           * @brief       This function will convert the over-the-air cluster list
    771           *              format to an internal format.
    772           *
    773           * @param       inMsg  - incoming message (request)
    774           *
    775           * @return      pointer to incremented inBuf
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    779            uint8 x;
    780          
    781            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8030         SJMP    ??ZDO_ConvertOTAClusters_0
    782            {
    783              // convert ota format to internal
    784              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000012   F8           MOV     R0,A
   \   000013   E4           CLR     A
   \   000014   C8           XCH     A,R0
   \   000015   F9           MOV     R1,A
   \   000016   E5..         MOV     A,?V0
   \   000018   28           ADD     A,R0
   \   000019   E4           CLR     A
   \   00001A   39           ADDC    A,R1
   \   00001B   F5..         MOV     ?V1,A
   \   00001D   EF           MOV     A,R7
   \   00001E   25E0         ADD     A,0xE0 /* A   */
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   33           RLC     A
   \   000023   F9           MOV     R1,A
   \   000024   EC           MOV     A,R4
   \   000025   28           ADD     A,R0
   \   000026   F582         MOV     DPL,A
   \   000028   ED           MOV     A,R5
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E5..         MOV     A,?V0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E5..         MOV     A,?V1
   \   000032   F0           MOVX    @DPTR,A
    785              inBuf += sizeof( uint16 );
   \   000033   EA           MOV     A,R2
   \   000034   2402         ADD     A,#0x2
   \   000036   FA           MOV     R2,A
   \   000037   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000039   0B           INC     R3
    786            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00003A   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003B   EF           MOV     A,R7
   \   00003C   C3           CLR     C
   \   00003D   9E           SUBB    A,R6
   \   00003E   40CB         JC      ??ZDO_ConvertOTAClusters_1
    787            return ( inBuf );
   \   000040   02....       LJMP    ??Subroutine146_0 & 0xFFFF
    788          }
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessMatchDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Match_Desc_req message.
    795           *
    796           * @param       inMsg  - incoming message (request)
    797           *
    798           * @return      none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
    802            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    803            uint8 numInClusters;
    804            uint16 *inClusters = NULL;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    805            uint8 numOutClusters;
    806            uint16 *outClusters = NULL;
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    807            epList_t *epDesc;
    808            SimpleDescriptionFormat_t *sDesc = NULL;
    809            uint8 allocated;
    810            uint8 *msg;
    811            uint16 aoi;
    812            uint16 profileID;
    813          
    814            // Parse the incoming message
    815            msg = inMsg->asdu;
   \   000027   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00002A   35..         ADDC    A,?V13
   \   00002C   12....       LCALL   ?Subroutine64 & 0xFFFF
    816            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_111:
   \   00002F   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000032   FE           MOV     R6,A
   \   000033   E4           CLR     A
   \   000034   39           ADDC    A,R1
   \   000035   FF           MOV     R7,A
    817            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000036   85..82       MOV     DPL,?V2
   \   000039   85..83       MOV     DPH,?V3
   \   00003C   A3           INC     DPTR
   \   00003D   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   EA           MOV     A,R2
   \   000045   F5..         MOV     ?V0,A
   \   000047   E4           CLR     A
   \   000048   39           ADDC    A,R1
   \   000049   F5..         MOV     ?V1,A
    818            msg += 4;
   \   00004B   E5..         MOV     A,?V2
   \   00004D   2404         ADD     A,#0x4
   \   00004F   F5..         MOV     ?V2,A
   \   000051   5002         JNC     ??ZDO_ProcessMatchDescReq_0
   \   000053   05..         INC     ?V3
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000055                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
    819          
    820            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000059   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   00005C   E9           MOV     A,R1
   \   00005D   6401         XRL     A,#0x1
   \   00005F   6016         JZ      ??ZDO_ProcessMatchDescReq_1
    821            {
    822              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    823                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    824              return;
    825            }
    826            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000061                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   000068   E9           MOV     A,R1
   \   000069   703D         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   00006B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6E           XRL     A,R6
   \   000070   7003         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000075   6031         JZ      ??ZDO_ProcessMatchDescReq_2
    827            {
    828              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    829                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   000077                ; Setup parameters for call to function ZDP_EPRsp
   \   000077   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   E4           CLR     A
   \   00007E   F5..         MOV     ?V0,A
   \   000080   F5..         MOV     ?V1,A
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   78..         MOV     R0,#?V0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00008F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000092   75..80       MOV     ?V0,#-0x80
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009A   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00009D   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   0000A0   7407         MOV     A,#0x7
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
    830              return;
   \   0000A5   02....       LJMP    ??ZDO_ProcessMatchDescReq_4 & 0xFFFF
    831            }
    832          
    833            if ((numInClusters = *msg++) &&
    834                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0000A8   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000AB   88..         MOV     ?V8,R0
   \   0000AD   602B         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000AF                ; Setup parameters for call to function osal_mem_alloc
   \   0000AF   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000B2   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   0000C5   6013         JZ      ??ZDO_ProcessMatchDescReq_5
    835            {
    836              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000C7                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C7   7403         MOV     A,#0x3
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine79 & 0xFFFF
    837            }
   \                     ??CrossCallReturnLabel_135:
   \   0000CF   A9..         MOV     R1,?V8
   \   0000D1   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   0000D4   8A..         MOV     ?V2,R2
   \   0000D6   8B..         MOV     ?V3,R3
   \   0000D8   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    838            else
    839            {
    840              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000DA   75..00       MOV     ?V8,#0x0
    841            }
    842          
    843            if ((numOutClusters = *msg++) &&
    844                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000DD   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000E0   88..         MOV     ?V7,R0
   \   0000E2   6027         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0000E4                ; Setup parameters for call to function osal_mem_alloc
   \   0000E4   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000E7   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000F2   7401         MOV     A,#0x1
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000FA   600F         JZ      ??ZDO_ProcessMatchDescReq_7
    845            {
    846              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000FC                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   12....       LCALL   ?Subroutine79 & 0xFFFF
    847            }
   \                     ??CrossCallReturnLabel_136:
   \   000104   A9..         MOV     R1,?V7
   \   000106   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   000109   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    848            else
    849            {
    850              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00010B   75..00       MOV     ?V7,#0x0
    851            }
    852          
    853            // First count the number of endpoints that match.
    854            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00010E   90....       MOV     DPTR,#epList
   \   000111   8050         SJMP    ??ZDO_ProcessMatchDescReq_9
    855            while ( epDesc )
    856            {
    857              // Don't search endpoint 0 and check if response is allowed
    858              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    859              {
    860                if ( epDesc->pfnDescCB )
    861                {
    862                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    863                  allocated = TRUE;
    864                }
    865                else
    866                {
    867                  sDesc = epDesc->epDesc->simpleDesc;
    868                  allocated = FALSE;
    869                }
    870          
    871                // Allow specific ProfileId or Wildcard ProfileID
    872                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    873                {
    874                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    875          
    876                  // Are there matching input clusters?
    877                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    878                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    879                      // Are there matching output clusters?
    880                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    881                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    882                  {
    883                    // Notify the endpoint of the match.
    884                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    885                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    886          
    887                    if (pRspSent)
    888                    {
    889                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    890                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    891                      pRspSent->numInClusters = numInClusters;
    892                      pRspSent->numOutClusters = numOutClusters;
    893          
    894                      if (numInClusters)
    895                      {
    896                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    897                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pInClusters = NULL;
    902                      }
    903          
    904                      if (numOutClusters)
    905                      {
    906                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    907                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    908                      }
    909                      else
    910                      {
    911                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000113   E4           CLR     A
   \   000114   F0           MOVX    @DPTR,A
   \   000115   A3           INC     DPTR
   \   000116   F0           MOVX    @DPTR,A
    912                      }
    913          
    914                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000117                ; Setup parameters for call to function osal_msg_send
   \   000117   AA..         MOV     R2,?V2
   \   000119   AB..         MOV     R3,?V3
   \   00011B   85..82       MOV     DPL,?V14
   \   00011E   85..83       MOV     DPH,?V15
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000126   A3           INC     DPTR
   \   000127   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
    915                    }
    916          
    917                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00012E   85..82       MOV     DPL,?V10
   \   000131   85..83       MOV     DPH,?V11
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C0E0         PUSH    A
   \   000137   85..82       MOV     DPL,?XSP + 0
   \   00013A   85..83       MOV     DPH,?XSP + 1
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F8           MOV     R0,A
   \   00013F   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000141   28           ADD     A,R0
   \   000142   F582         MOV     DPL,A
   \   000144   E4           CLR     A
   \   000145   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   000147   F583         MOV     DPH,A
   \   000149   D0E0         POP     A
   \   00014B   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00014E   04           INC     A
   \   00014F   F0           MOVX    @DPTR,A
    918                  }
    919                }
    920          
    921                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000150   E5..         MOV     A,?V9
   \   000152   A2E0         MOV     C,0xE0 /* A   */.0
   \   000154   5007         JNC     ??ZDO_ProcessMatchDescReq_14
    922                {
    923                  osal_mem_free( sDesc );
   \   000156                ; Setup parameters for call to function osal_mem_free
   \   000156   AA..         MOV     R2,?V10
   \   000158   AB..         MOV     R3,?V11
   \   00015A   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    924                }
    925              }
    926              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   00015D   85..82       MOV     DPL,?V14
   \   000160   85..83       MOV     DPH,?V15
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F5..         MOV     ?V14,A
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F5..         MOV     ?V15,A
   \   00016A   E5..         MOV     A,?V14
   \   00016C   45..         ORL     A,?V15
   \   00016E   7003         JNZ     $+5
   \   000170   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   000173   85..82       MOV     DPL,?V14
   \   000176   85..83       MOV     DPH,?V15
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00017E   8A82         MOV     DPL,R2
   \   000180   8B83         MOV     DPH,R3
   \   000182   E0           MOVX    A,@DPTR
   \   000183   FC           MOV     R4,A
   \   000184   60D7         JZ      ??ZDO_ProcessMatchDescReq_14
   \   000186   85..82       MOV     DPL,?V14
   \   000189   85..83       MOV     DPH,?V15
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   A2E0         MOV     C,0xE0 /* A   */.0
   \   000197   50C4         JNC     ??ZDO_ProcessMatchDescReq_14
   \   000199   85..82       MOV     DPL,?V14
   \   00019C   85..83       MOV     DPH,?V15
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0001A4   E582         MOV     A,DPL
   \   0001A6   4583         ORL     A,DPH
   \   0001A8   6010         JZ      ??ZDO_ProcessMatchDescReq_16
   \   0001AA                ; Setup parameters for indirect call
   \   0001AA   EC           MOV     A,R4
   \   0001AB   FA           MOV     R2,A
   \   0001AC   7901         MOV     R1,#0x1
   \   0001AE   12....       LCALL   ?CALL_IND
   \   0001B1   8A..         MOV     ?V10,R2
   \   0001B3   8B..         MOV     ?V11,R3
   \   0001B5   75..01       MOV     ?V9,#0x1
   \   0001B8   8011         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001BA   8A82         MOV     DPL,R2
   \   0001BC   8B83         MOV     DPH,R3
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V10,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F5..         MOV     ?V11,A
   \   0001C8   75..00       MOV     ?V9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001CB   E5..         MOV     A,?V10
   \   0001CD   45..         ORL     A,?V11
   \   0001CF   7003         JNZ     $+5
   \   0001D1   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   0001D4   85..82       MOV     DPL,?V10
   \   0001D7   85..83       MOV     DPH,?V11
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   65..         XRL     A,?V0
   \   0001DE   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0001E4   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   0001E6   74FF         MOV     A,#-0x1
   \   0001E8   65..         XRL     A,?V0
   \   0001EA   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   0001EC   74FF         MOV     A,#-0x1
   \   0001EE   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0001F0   6003         JZ      $+5
   \   0001F2   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001F5                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001F5   85..82       MOV     DPL,?V10
   \   0001F8   85..83       MOV     DPH,?V11
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000205   85..82       MOV     DPL,?V10
   \   000208   85..83       MOV     DPH,?V11
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   FC           MOV     R4,A
   \   000213   7405         MOV     A,#0x5
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00021B   A9..         MOV     R1,?V8
   \   00021D   12....       LCALL   ??ZDO_AnyClusterMatches?relay; Banked call to: ZDO_AnyClusterMatches
   \   000220   7402         MOV     A,#0x2
   \   000222   12....       LCALL   ?DEALLOC_XSTACK8
   \   000225   E9           MOV     A,R1
   \   000226   703C         JNZ     ??ZDO_ProcessMatchDescReq_21
   \   000228                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000228   85..82       MOV     DPL,?V10
   \   00022B   85..83       MOV     DPH,?V11
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00023B   85..82       MOV     DPL,?V10
   \   00023E   85..83       MOV     DPH,?V11
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   FC           MOV     R4,A
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000254   A9..         MOV     R1,?V7
   \   000256   12....       LCALL   ??ZDO_AnyClusterMatches?relay; Banked call to: ZDO_AnyClusterMatches
   \   000259   7402         MOV     A,#0x2
   \   00025B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025E   E9           MOV     A,R1
   \   00025F   7003         JNZ     $+5
   \   000261   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000264                ; Setup parameters for call to function osal_msg_allocate
   \   000264   E5..         MOV     A,?V7
   \   000266   25..         ADD     A,?V8
   \   000268   C3           CLR     C
   \   000269   33           RLC     A
   \   00026A   240A         ADD     A,#0xa
   \   00026C   FA           MOV     R2,A
   \   00026D   7B00         MOV     R3,#0x0
   \   00026F   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000272   8A..         MOV     ?V2,R2
   \   000274   8B..         MOV     ?V3,R3
   \   000276   EA           MOV     A,R2
   \   000277   45..         ORL     A,?V3
   \   000279   7003         JNZ     $+5
   \   00027B   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   00027E   8A82         MOV     DPL,R2
   \   000280   8B83         MOV     DPH,R3
   \   000282   74D2         MOV     A,#-0x2e
   \   000284   F0           MOVX    @DPTR,A
   \   000285   85..82       MOV     DPL,?V12
   \   000288   85..83       MOV     DPH,?V13
   \   00028B   A3           INC     DPTR
   \   00028C   A3           INC     DPTR
   \   00028D   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000290   8A82         MOV     DPL,R2
   \   000292   8B83         MOV     DPH,R3
   \   000294   A3           INC     DPTR
   \   000295   A3           INC     DPTR
   \   000296   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000299   8A82         MOV     DPL,R2
   \   00029B   8B83         MOV     DPH,R3
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   E5..         MOV     A,?V8
   \   0002A3   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0002A6   E5..         MOV     A,?V7
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9   EA           MOV     A,R2
   \   0002AA   2405         ADD     A,#0x5
   \   0002AC   FA           MOV     R2,A
   \   0002AD   E4           CLR     A
   \   0002AE   35..         ADDC    A,?V3
   \   0002B0   FB           MOV     R3,A
   \   0002B1   E5..         MOV     A,?V8
   \   0002B3   6034         JZ      ??ZDO_ProcessMatchDescReq_22
   \   0002B5   E5..         MOV     A,?V2
   \   0002B7   240A         ADD     A,#0xa
   \   0002B9   F8           MOV     R0,A
   \   0002BA   E4           CLR     A
   \   0002BB   35..         ADDC    A,?V3
   \   0002BD   F9           MOV     R1,A
   \   0002BE   8A82         MOV     DPL,R2
   \   0002C0   8B83         MOV     DPH,R3
   \   0002C2   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0002C5                ; Setup parameters for call to function osal_memcpy
   \   0002C5   7403         MOV     A,#0x3
   \   0002C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CA   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0002CD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002D0   AC..         MOV     R4,?V8
   \   0002D2   EC           MOV     A,R4
   \   0002D3   2C           ADD     A,R4
   \   0002D4   FC           MOV     R4,A
   \   0002D5   E4           CLR     A
   \   0002D6   33           RLC     A
   \   0002D7   FD           MOV     R5,A
   \   0002D8   8A82         MOV     DPL,R2
   \   0002DA   8B83         MOV     DPH,R3
   \   0002DC   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   0002DF   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0002E2   7403         MOV     A,#0x3
   \   0002E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E7   8008         SJMP    ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0002E9   8A82         MOV     DPL,R2
   \   0002EB   8B83         MOV     DPH,R3
   \   0002ED   E4           CLR     A
   \   0002EE   F0           MOVX    @DPTR,A
   \   0002EF   A3           INC     DPTR
   \   0002F0   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0002F1   E5..         MOV     A,?V2
   \   0002F3   2408         ADD     A,#0x8
   \   0002F5   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0002F8   E5..         MOV     A,?V7
   \   0002FA   7003         JNZ     $+5
   \   0002FC   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   0002FF   A8..         MOV     R0,?V8
   \   000301   E8           MOV     A,R0
   \   000302   28           ADD     A,R0
   \   000303   F8           MOV     R0,A
   \   000304   E4           CLR     A
   \   000305   33           RLC     A
   \   000306   F9           MOV     R1,A
   \   000307   E5..         MOV     A,?V2
   \   000309   28           ADD     A,R0
   \   00030A   F8           MOV     R0,A
   \   00030B   E5..         MOV     A,?V3
   \   00030D   39           ADDC    A,R1
   \   00030E   F9           MOV     R1,A
   \   00030F   E8           MOV     A,R0
   \   000310   240A         ADD     A,#0xa
   \   000312   FA           MOV     R2,A
   \   000313   E4           CLR     A
   \   000314   39           ADDC    A,R1
   \   000315   FB           MOV     R3,A
   \   000316   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000319                ; Setup parameters for call to function osal_memcpy
   \   000319   7401         MOV     A,#0x1
   \   00031B   12....       LCALL   ?XSTACK_DISP0_8
   \   00031E   12....       LCALL   ?Subroutine63 & 0xFFFF
    927            }
   \                     ??CrossCallReturnLabel_110:
   \   000321   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000324   AC..         MOV     R4,?V7
   \   000326   EC           MOV     A,R4
   \   000327   2C           ADD     A,R4
   \   000328   FC           MOV     R4,A
   \   000329   E4           CLR     A
   \   00032A   33           RLC     A
   \   00032B   FD           MOV     R5,A
   \   00032C   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00032F   7403         MOV     A,#0x3
   \   000331   12....       LCALL   ?DEALLOC_XSTACK8
   \   000334   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    928          
    929            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000337   85..82       MOV     DPL,?XSP + 0
   \   00033A   85..83       MOV     DPH,?XSP + 1
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   6027         JZ      ??ZDO_ProcessMatchDescReq_24
    930            {
    931              // Send the message if at least one match found.
    932              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    933                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000340                ; Setup parameters for call to function ZDP_EPRsp
   \   000340   12....       LCALL   ?Subroutine59 & 0xFFFF
    934              {
    935          #if defined( LCD_SUPPORTED )
    936                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    937          #endif
    938              }
    939            }
   \                     ??CrossCallReturnLabel_264:
   \   000343   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000346   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000349   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00034C   78..         MOV     R0,#?V0
   \   00034E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000351   7403         MOV     A,#0x3
   \   000353   12....       LCALL   ?XSTACK_DISP0_8
   \   000356   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000359   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00035F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000362   75..00       MOV     ?V0,#0x0
   \   000365   8029         SJMP    ??ZDO_ProcessMatchDescReq_25
    940            else
    941            {
    942              // No match found
    943              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000367                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000367   EE           MOV     A,R6
   \   000368   FA           MOV     R2,A
   \   000369   EF           MOV     A,R7
   \   00036A   FB           MOV     R3,A
   \   00036B   12....       LCALL   ??NLME_IsAddressBroadcast?relay; Banked call to: NLME_IsAddressBroadcast
   \   00036E   E9           MOV     A,R1
   \   00036F   702F         JNZ     ??ZDO_ProcessMatchDescReq_26
    944              {
    945                // send response message with match length = 0
    946                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    947                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   000371                ; Setup parameters for call to function ZDP_EPRsp
   \   000371   12....       LCALL   ?Subroutine59 & 0xFFFF
    948          #if defined( LCD_SUPPORTED )
    949                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    950          #endif
    951              }
    952              else
    953              {
    954                // no response mesage for broadcast message
    955          #if defined( LCD_SUPPORTED )
    956                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    957          #endif
    958              }
    959            }
   \                     ??CrossCallReturnLabel_265:
   \   000374   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000377   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00037A   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00037D   78..         MOV     R0,#?V0
   \   00037F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000382   75..00       MOV     ?V0,#0x0
   \   000385   78..         MOV     R0,#?V0
   \   000387   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00038A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00038D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   000390   78..         MOV     R0,#?V0
   \   000392   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000395   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000398   12....       LCALL   ??ZDP_EPRsp?relay    ; Banked call to: ZDP_EPRsp
   \   00039B   7407         MOV     A,#0x7
   \   00039D   12....       LCALL   ?DEALLOC_XSTACK8
    960          
    961            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003A0   7403         MOV     A,#0x3
   \   0003A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A5   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0003A8   600B         JZ      ??ZDO_ProcessMatchDescReq_27
    962            {
    963              osal_mem_free( inClusters );
   \   0003AA                ; Setup parameters for call to function osal_mem_free
   \   0003AA   7403         MOV     A,#0x3
   \   0003AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AF   12....       LCALL   ??Subroutine155_0 & 0xFFFF
    964            }
   \                     ??CrossCallReturnLabel_282:
   \   0003B2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    965          
    966            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003B5   7401         MOV     A,#0x1
   \   0003B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BA   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0003BD   600B         JZ      ??ZDO_ProcessMatchDescReq_4
    967            {
    968              osal_mem_free( outClusters );
   \   0003BF                ; Setup parameters for call to function osal_mem_free
   \   0003BF   7401         MOV     A,#0x1
   \   0003C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C4   12....       LCALL   ??Subroutine155_0 & 0xFFFF
    969            }
   \                     ??CrossCallReturnLabel_283:
   \   0003C7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    970          }
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0003CA   7405         MOV     A,#0x5
   \   0003CC   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine147_0
   \   000003                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   35..         ADDC    A,?V3
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E5..         MOV     A,?V12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V13
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V12
   \   00000B   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00000E   35..         ADDC    A,?V13
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   7A06         MOV     R2,#0x6
   \   000016   7B80         MOV     R3,#-0x80
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   AA..         MOV     R2,?V2
   \   000005   AB..         MOV     R3,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E5..         MOV     A,?V12
   \   000002   240E         ADD     A,#0xe
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V13
   \   000009   F583         MOV     DPH,A
   \   00000B                REQUIRE ??Subroutine148_0
   \   00000B                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   FA           MOV     R2,A
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine153_0
   \   000003                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine157_0
   \   000001                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000003   F5..         MOV     ?V3,A
   \   000005   85..82       MOV     DPL,?V2
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine169_0
   \   000002                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V2,DPL
   \   00000C   8583..       MOV     ?V3,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   85..82       MOV     DPL,?V2
   \   000006   85..83       MOV     DPH,?V3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000004   28           ADD     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    971          
    972          #if defined ( REFLECTOR )
    973          /*********************************************************************
    974           * @fn      ZDO_ProcessBindUnbindReq()
    975           *
    976           * @brief   Called to process a Bind or Unbind Request message.
    977           *
    978           * @param   inMsg  - incoming message (request)
    979           * @param   pReq - place to put parsed information
    980           *
    981           * @return  none
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    985            zAddrType_t SourceAddr;       // Binding Source addres
    986            byte bindStat;
    987          
    988            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    989            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    990          
    991            // If the local device is not the primary binding cache
    992            // check the src address of the bind request.
    993            // If it is not the local device's extended address
    994            // discard the request.
    995            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    996                  (pReq->dstAddress.addrMode != Addr64Bit &&
    997                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020   EE           MOV     A,R6
   \   000021   240F         ADD     A,#0xf
   \   000023   F5..         MOV     ?V14,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F5..         MOV     ?V15,A
   \   000029   EE           MOV     A,R6
   \   00002A   240E         ADD     A,#0xe
   \   00002C   F5..         MOV     ?V12,A
   \   00002E   E4           CLR     A
   \   00002F   3F           ADDC    A,R7
   \   000030   F5..         MOV     ?V13,A
   \   000032   EE           MOV     A,R6
   \   000033   2402         ADD     A,#0x2
   \   000035   F5..         MOV     ?V10,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   F5..         MOV     ?V11,A
   \   00003B   EE           MOV     A,R6
   \   00003C   240C         ADD     A,#0xc
   \   00003E   F5..         MOV     ?V8,A
   \   000040   E4           CLR     A
   \   000041   3F           ADDC    A,R7
   \   000042   F5..         MOV     ?V9,A
   \   000044                ; Setup parameters for call to function sAddrExtCmp
   \   000044                ; Setup parameters for call to function NLME_GetExtAddr
   \   000044   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000047   EA           MOV     A,R2
   \   000048   FC           MOV     R4,A
   \   000049   EB           MOV     A,R3
   \   00004A   FD           MOV     R5,A
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP101_8
   \   000050   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000053   E9           MOV     A,R1
   \   000054   6019         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000056   E5..         MOV     A,?V0
   \   000058   2413         ADD     A,#0x13
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   35..         ADDC    A,?V1
   \   00005E   FB           MOV     R3,A
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   7403         MOV     A,#0x3
   \   000067   68           XRL     A,R0
   \   000068   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00006A   7401         MOV     A,#0x1
   \   00006C   68           XRL     A,R0
   \   00006D   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    998            {
    999              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   7484         MOV     A,#-0x7c
   \   000077   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1000            }
   1001            else
   1002            {
   1003              // Check source & destination endpoints
   1004              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1005                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1006                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00007A   E5..         MOV     A,?V0
   \   00007C   2408         ADD     A,#0x8
   \   00007E   F5..         MOV     ?V6,A
   \   000080   E4           CLR     A
   \   000081   35..         ADDC    A,?V1
   \   000083   F5..         MOV     ?V7,A
   \   000085   85..82       MOV     DPL,?V6
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   6024         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00008E   74FF         MOV     A,#-0x1
   \   000090   69           XRL     A,R1
   \   000091   601F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000093   E5..         MOV     A,?V0
   \   000095   2414         ADD     A,#0x14
   \   000097   F5..         MOV     ?V2,A
   \   000099   E4           CLR     A
   \   00009A   35..         ADDC    A,?V1
   \   00009C   F5..         MOV     ?V3,A
   \   00009E   7403         MOV     A,#0x3
   \   0000A0   68           XRL     A,R0
   \   0000A1   701A         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   0000A3   85..82       MOV     DPL,?V2
   \   0000A6   85..83       MOV     DPH,?V3
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   0000AD   74FF         MOV     A,#-0x1
   \   0000AF   68           XRL     A,R0
   \   0000B0   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1007              {
   1008                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   7482         MOV     A,#-0x7e
   \   0000BA   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1009              }
   1010              else
   1011              {
   1012                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000BD   E5..         MOV     A,?V0
   \   0000BF   2409         ADD     A,#0x9
   \   0000C1   F5..         MOV     ?V4,A
   \   0000C3   E4           CLR     A
   \   0000C4   35..         ADDC    A,?V1
   \   0000C6   F5..         MOV     ?V5,A
   \   0000C8   E5..         MOV     A,?V0
   \   0000CA   240B         ADD     A,#0xb
   \   0000CC   FE           MOV     R6,A
   \   0000CD   E4           CLR     A
   \   0000CE   35..         ADDC    A,?V1
   \   0000D0   FF           MOV     R7,A
   \   0000D1   85..82       MOV     DPL,?V8
   \   0000D4   85..83       MOV     DPH,?V9
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6421         XRL     A,#0x21
   \   0000DA   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1013                {
   1014                  // Assume the table is full
   1015                  bindStat = ZDP_TABLE_FULL;
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   748C         MOV     A,#-0x74
   \   0000EB   12....       LCALL   ?Subroutine45 & 0xFFFF
   1016          
   1017          #if defined( APP_TP ) || defined( APP_TP2 )
   1018                  // For ZigBee Conformance Testing
   1019                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1020          #endif
   1021                  {
   1022          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1023                    uint16 nwkAddr;
   1024          
   1025                    // Verifies that a valid NWK address exists for the device
   1026                    // before creating a Binding entry. If NWK address does not
   1027                    // exist the request is sent out and the BindReq is saved, to
   1028                    // create the Bind Entry once the NwkAddrRsp is received
   1029                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1030                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_82:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   6403         XRL     A,#0x3
   \   0000F1   6003         JZ      $+5
   \   0000F3   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   0000F6                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000F6   7401         MOV     A,#0x1
   \   0000F8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FB   EE           MOV     A,R6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   FB           MOV     R3,A
   \   0000FF   12....       LCALL   ??APSME_LookupNwkAddr?relay; Banked call to: APSME_LookupNwkAddr
   \   000102   E9           MOV     A,R1
   \   000103   6003         JZ      $+5
   \   000105   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1031                    {
   1032                      // find an empty bind slot in the pending Bind Req list
   1033                      ZDO_PendingBindReq_t *pPendingBind;
   1034          
   1035                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   000108                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   000108   12....       LCALL   ??ZDApp_GetEmptyPendingBindReq?relay; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   00010B   8A..         MOV     ?V2,R2
   \   00010D   8B..         MOV     ?V3,R3
   \   00010F   EA           MOV     A,R2
   \   000110   45..         ORL     A,?V3
   \   000112   7003         JNZ     $+5
   \   000114   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1036                      {
   1037                        // copy the received request into the empty slot and all required info
   1038                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   000117                ; Setup parameters for call to function osal_memcpy
   \   000117   85....       MOV     ?V4,?V0
   \   00011A   85....       MOV     ?V5,?V1
   \   00011D   75..00       MOV     ?V6,#0x0
   \   000120   78..         MOV     R0,#?V4
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000125   7C15         MOV     R4,#0x15
   \   000127   7D00         MOV     R5,#0x0
   \   000129   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00012C   7403         MOV     A,#0x3
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   1039          
   1040                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   000131   85..82       MOV     DPL,?V10
   \   000134   85..83       MOV     DPH,?V11
   \   000137   E5..         MOV     A,?V2
   \   000139   2415         ADD     A,#0x15
   \   00013B   FC           MOV     R4,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V3
   \   00013F   FD           MOV     R5,A
   \   000140   7409         MOV     A,#0x9
   \   000142   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1041                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   000145   85..82       MOV     DPL,?V12
   \   000148   85..83       MOV     DPH,?V13
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   C0E0         PUSH    A
   \   00014E   E5..         MOV     A,?V2
   \   000150   241E         ADD     A,#0x1e
   \   000152   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000155   D0E0         POP     A
   \   000157   F0           MOVX    @DPTR,A
   1042                        pPendingBind->transSeq = inMsg->TransSeq;
   \   000158   85..82       MOV     DPL,?V14
   \   00015B   85..83       MOV     DPH,?V15
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   C0E0         PUSH    A
   \   000161   E5..         MOV     A,?V2
   \   000163   241F         ADD     A,#0x1f
   \   000165   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000168   D0E0         POP     A
   \   00016A   F0           MOVX    @DPTR,A
   1043                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00016B   E5..         MOV     A,?V2
   \   00016D   2420         ADD     A,#0x20
   \   00016F   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000172   7405         MOV     A,#0x5
   \   000174   F0           MOVX    @DPTR,A
   1044          
   1045                        // create an entry in Address Manager
   1046                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   000175                ; Setup parameters for call to function bindAddrIndexGet
   \   000175   EE           MOV     A,R6
   \   000176   FA           MOV     R2,A
   \   000177   EF           MOV     A,R7
   \   000178   FB           MOV     R3,A
   \   000179   12....       LCALL   ??bindAddrIndexGet?relay; Banked call to: bindAddrIndexGet
   1047          
   1048                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00017C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00017C   7D00         MOV     R5,#0x0
   \   00017E   7C00         MOV     R4,#0x0
   \   000180   7900         MOV     R1,#0x0
   \   000182   EE           MOV     A,R6
   \   000183   FA           MOV     R2,A
   \   000184   EF           MOV     A,R7
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   ??ZDP_NwkAddrReq?relay; Banked call to: ZDP_NwkAddrReq
   1049          
   1050                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1051                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   000189                ; Setup parameters for call to function osal_start_timerEx
   \   000189   90....       MOV     DPTR,#__Constant_3e8
   \   00018C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00018F   7A00         MOV     R2,#0x0
   \   000191   7B10         MOV     R3,#0x10
   \   000193   90....       MOV     DPTR,#ZDAppTaskID
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F9           MOV     R1,A
   \   000198   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00019B   7404         MOV     A,#0x4
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
   1052                        return;
   \   0001A0   02....       LJMP    ??ZDO_ProcessBindUnbindReq_9 & 0xFFFF
   1053                      }
   1054                    }
   1055                    // Add Bind entry
   1056                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1057                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001A3                ; Setup parameters for call to function APSME_BindRequest
   \   0001A3   85..82       MOV     DPL,?V2
   \   0001A6   85..83       MOV     DPH,?V3
   \   0001A9   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   1058                    {
   1059                      // valid entry
   1060                      bindStat = ZDP_SUCCESS;
   1061          
   1062                      // Notify to save info into NV
   1063                      ZDApp_NVUpdate();
   1064                    }
   1065          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1066                    // Create binding entry first independently of existance of  valid NWK addres
   1067                    // if NWK address does not exist a request is sent out
   1068                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1069                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1070                    {
   1071                      uint16 nwkAddr;
   1072          
   1073                      // valid entry
   1074                      bindStat = ZDP_SUCCESS;
   1075          
   1076                      // Notify to save info into NV
   1077                      ZDApp_NVUpdate();
   1078          
   1079                      // Check for the destination address
   1080                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1081                      {
   1082                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1083                        {
   1084                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1085                        }
   1086                      }
   1087                    }
   1088          #endif
   1089                  }
   1090                }
   \                     ??CrossCallReturnLabel_260:
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AF   EE           MOV     A,R6
   \   0001B0   FC           MOV     R4,A
   \   0001B1   EF           MOV     A,R7
   \   0001B2   FD           MOV     R5,A
   \   0001B3   85..82       MOV     DPL,?V4
   \   0001B6   85..83       MOV     DPH,?V5
   \   0001B9   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0001BC   85..82       MOV     DPL,?V6
   \   0001BF   85..83       MOV     DPH,?V7
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F9           MOV     R1,A
   \   0001C4   12....       LCALL   ??APSME_BindRequest?relay; Banked call to: APSME_BindRequest
   \   0001C7   7401         MOV     A,#0x1
   \   0001C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CC   E9           MOV     A,R1
   \   0001CD   703C         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   0001CF   8024         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1091                else // Unbind_req
   1092                {
   1093                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1094                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0001D1                ; Setup parameters for call to function APSME_UnBindRequest
   \   0001D1   85..82       MOV     DPL,?V2
   \   0001D4   85..83       MOV     DPH,?V3
   \   0001D7   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DD   EE           MOV     A,R6
   \   0001DE   FC           MOV     R4,A
   \   0001DF   EF           MOV     A,R7
   \   0001E0   FD           MOV     R5,A
   \   0001E1   85..82       MOV     DPL,?V4
   \   0001E4   85..83       MOV     DPH,?V5
   \   0001E7   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0001EA   12....       LCALL   ??APSME_UnBindRequest?relay; Banked call to: APSME_UnBindRequest
   \   0001ED   7401         MOV     A,#0x1
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   E9           MOV     A,R1
   \   0001F3   700D         JNZ     ??ZDO_ProcessBindUnbindReq_11
   1095                  {
   1096                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001F5   85..82       MOV     DPL,?XSP + 0
   \   0001F8   85..83       MOV     DPH,?XSP + 1
   \   0001FB   E4           CLR     A
   \   0001FC   F0           MOVX    @DPTR,A
   1097          
   1098                    // Notify to save info into NV
   1099                    ZDApp_NVUpdate();
   \   0001FD                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0001FD   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   \   000200   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1100                  }
   1101                  else
   1102                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   000202   85..82       MOV     DPL,?XSP + 0
   \   000205   85..83       MOV     DPH,?XSP + 1
   \   000208   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00020A   F0           MOVX    @DPTR,A
   1103                }
   1104              }
   1105            }
   1106          
   1107            // Send back a response message
   1108            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1109                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1110                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00020B                ; Setup parameters for call to function ZDP_SendData
   \   00020B   85..82       MOV     DPL,?V12
   \   00020E   85..83       MOV     DPH,?V13
   \   000211   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000214   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000217   7401         MOV     A,#0x1
   \   000219   12....       LCALL   ?XSTACK_DISP100_8
   \   00021C   88..         MOV     ?V0,R0
   \   00021E   89..         MOV     ?V1,R1
   \   000220   78..         MOV     R0,#?V0
   \   000222   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000225   85..82       MOV     DPL,?V8
   \   000228   85..83       MOV     DPH,?V9
   \   00022B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00022E   4480         ORL     A,#0x80
   \   000230   F5..         MOV     ?V1,A
   \   000232   78..         MOV     R0,#?V0
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000237   7901         MOV     R1,#0x1
   \   000239   AC..         MOV     R4,?V10
   \   00023B   AD..         MOV     R5,?V11
   \   00023D   AA..         MOV     R2,?V14
   \   00023F   AB..         MOV     R3,?V15
   \   000241   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000244   7405         MOV     A,#0x5
   \   000246   12....       LCALL   ?DEALLOC_XSTACK8
   1111          }
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000249   740C         MOV     A,#0xc
   \   00024B   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
   1112          #endif // REFLECTOR
   1113          
   1114          /*********************************************************************
   1115           * @fn      ZDO_UpdateAddrManager
   1116           *
   1117           * @brief   Update the Address Manager.
   1118           *
   1119           * @param   nwkAddr - network address
   1120           * @param   extAddr - extended address
   1121           *
   1122           * @return  none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1126            AddrMgrEntry_t addrEntry;
   1127          
   1128            // Update the address manager
   1129            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1130            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine41 & 0xFFFF
   1131            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_70:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   1132            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   ??AddrMgrEntryUpdate?relay; Banked call to: AddrMgrEntryUpdate
   1133          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDO_ProcessServerDiscReq
   1137           *
   1138           * @brief   Process the Server_Discovery_req message.
   1139           *
   1140           * @param   inMsg  - incoming message (request)
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1146            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1147            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000C   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00000F   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000012   F8           MOV     R0,A
   \   000013   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   58           ANL     A,R0
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   59           ANL     A,R1
   \   00001D   F5..         MOV     ?V1,A
   1148          
   1149            if ( matchMask )
   \   00001F   E5..         MOV     A,?V0
   \   000021   45..         ORL     A,?V1
   \   000023   6026         JZ      ??ZDO_ProcessServerDiscReq_0
   1150            {
   1151              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1152                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000030   12....       LCALL   ?Subroutine86 & 0xFFFF
   1153            }
   \                     ??CrossCallReturnLabel_273:
   \   000033   FD           MOV     R5,A
   \   000034   7C00         MOV     R4,#0x0
   \   000036   EE           MOV     A,R6
   \   000037   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   00003A   3F           ADDC    A,R7
   \   00003B   FB           MOV     R3,A
   \   00003C   EE           MOV     A,R6
   \   00003D   240F         ADD     A,#0xf
   \   00003F   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??ZDP_ServerDiscRsp?relay; Banked call to: ZDP_ServerDiscRsp
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1154          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00004B   02....       LJMP    ??Subroutine146_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   1155          
   1156          #if defined ( ZIGBEE_CHILD_AGING )
   1157          /*********************************************************************
   1158           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1159           *
   1160           * @brief       This function processes and responds to the
   1161           *              End_Device_Timeout_Req message.
   1162           *
   1163           * @param       inMsg  - incoming message (request)
   1164           *
   1165           * @return      none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1169            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   1170            uint8 *ieee = NULL;
   1171            uint16 reqTimeout;
   1172          
   1173            // Only process this message if Child Table Management is enabled OR
   1174            // If message was broadcast OR multicast OR
   1175            // if the NWK src and the MAC src are not the same) drop message
   1176            if ( ( zgChildAgingEnable == FALSE ) ||
   1177                 ( inMsg->wasBroadcast == TRUE ) ||
   1178                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000016   90....       MOV     DPTR,#zgChildAgingEnable
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6021         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   00001C   EE           MOV     A,R6
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000022   6401         XRL     A,#0x1
   \   000024   6017         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000026   EE           MOV     A,R6
   \   000027   2402         ADD     A,#0x2
   \   000029   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00002C   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00002F   EE           MOV     A,R6
   \   000030   2415         ADD     A,#0x15
   \   000032   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   00003B   6003         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   1179            {
   1180              // the message does not come from a child, drop it
   1181              return;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   00003D   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
   1182            }
   1183          
   1184            ieee = inMsg->asdu;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   000040   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000043   12....       LCALL   ?Subroutine74 & 0xFFFF
   1185          
   1186            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \                     ??CrossCallReturnLabel_126:
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FC           MOV     R4,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   E4           CLR     A
   \   000064   C8           XCH     A,R0
   \   000065   F9           MOV     R1,A
   \   000066   EC           MOV     A,R4
   \   000067   28           ADD     A,R0
   \   000068   F5..         MOV     ?V2,A
   \   00006A   E4           CLR     A
   \   00006B   39           ADDC    A,R1
   \   00006C   F5..         MOV     ?V3,A
   1187          
   1188            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1189                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   00006E   EC           MOV     A,R4
   \   00006F   45..         ORL     A,?V3
   \   000071   6010         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   000073   EC           MOV     A,R4
   \   000074   9471         SUBB    A,#0x71
   \   000076   E9           MOV     A,R1
   \   000077   9408         SUBB    A,#0x8
   \   000079   5008         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   00007B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6402         XRL     A,#0x2
   \   000081   700A         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_5
   1190            {
   1191              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   7480         MOV     A,#-0x80
   \   00008B   8038         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1192            }
   1193            else
   1194            {
   1195              associated_devices_t *pAssoc;
   1196          
   1197              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1198                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1199                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   00008D                ; Setup parameters for call to function AssocGetWithExt
   \   00008D   12....       LCALL   ??AssocGetWithExt?relay; Banked call to: AssocGetWithExt
   \   000090   8A..         MOV     ?V4,R2
   \   000092   8B..         MOV     ?V5,R3
   \   000094   A8..         MOV     R0,?V4
   \   000096   A9..         MOV     R1,?V5
   \   000098   E8           MOV     A,R0
   \   000099   49           ORL     A,R1
   \   00009A   6021         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   00009C   8882         MOV     DPL,R0
   \   00009E   8983         MOV     DPH,R1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6016         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000A7   C3           CLR     C
   \   0000A8   9403         SUBB    A,#0x3
   \   0000AA   5011         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
   1200              {
   1201                pAssoc->timeoutCounter = reqTimeout;
   \   0000AC   E8           MOV     A,R0
   \   0000AD   2412         ADD     A,#0x12
   \   0000AF   12....       LCALL   ?Subroutine93 & 0xFFFF
   1202                pAssoc->endDevKaTimeout = reqTimeout;
   \                     ??CrossCallReturnLabel_159:
   \   0000B2   E8           MOV     A,R0
   \   0000B3   2414         ADD     A,#0x14
   \   0000B5   12....       LCALL   ?Subroutine93 & 0xFFFF
   1203          
   1204                // Set event to save NV
   1205                ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_160:
   \   0000B8                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B8   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   \   0000BB   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_8
   1206              }
   1207              else
   1208              {
   1209                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_7:
   \   0000BD   85..82       MOV     DPL,?XSP + 0
   \   0000C0   85..83       MOV     DPH,?XSP + 1
   \   0000C3   7481         MOV     A,#-0x7f
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   0000C5   F0           MOVX    @DPTR,A
   1210              }
   1211          
   1212            }
   1213          
   1214            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1215                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_8:
   \   0000C6                ; Setup parameters for call to function ZDP_SendData
   \   0000C6   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000C9   F5..         MOV     ?V2,A
   \   0000CB   78..         MOV     R0,#?V2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D5   88..         MOV     ?V2,R0
   \   0000D7   89..         MOV     ?V3,R1
   \   0000D9   78..         MOV     R0,#?V2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   75..1F       MOV     ?V2,#0x1f
   \   0000E1   75..80       MOV     ?V3,#-0x80
   \   0000E4   78..         MOV     R0,#?V2
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E9   7901         MOV     R1,#0x1
   \   0000EB   AC..         MOV     R4,?V0
   \   0000ED   AD..         MOV     R5,?V1
   \   0000EF   EE           MOV     A,R6
   \   0000F0   240F         ADD     A,#0xf
   \   0000F2   FA           MOV     R2,A
   \   0000F3   E4           CLR     A
   \   0000F4   3F           ADDC    A,R7
   \   0000F5   FB           MOV     R3,A
   \   0000F6   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000F9   7405         MOV     A,#0x5
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   1216          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   0000FE   7401         MOV     A,#0x1
   \   000100   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E5..         MOV     A,?V3
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F5..         MOV     ?V0,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F5..         MOV     ?V1,A
   \   000006   85..82       MOV     DPL,?V0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
   1217          #endif // ZIGBEE_CHILD_AGING
   1218          
   1219          /*********************************************************************
   1220           * Call Back Functions from APS  - API
   1221           */
   1222          
   1223          /*********************************************************************
   1224           * @fn          ZDO_EndDeviceTimeoutCB
   1225           *
   1226           * @brief       This function handles the binding timer for the End
   1227           *              Device Bind command.
   1228           *
   1229           * @param       none
   1230           *
   1231           * @return      none
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1235          #if defined ( REFLECTOR )
   1236            byte stat;
   1237            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1238            {
   1239              stat = ZDO_EDBind->status;
   1240          
   1241              // Send the response message to the first sent
   1242              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1243                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2415         ADD     A,#0x15
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   38           ADDC    A,R0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   90....       MOV     DPTR,#ZDO_EDBind
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C9           XCH     A,R1
   \   000029   2416         ADD     A,#0x16
   \   00002B   F582         MOV     DPL,A
   \   00002D   E4           CLR     A
   \   00002E   39           ADDC    A,R1
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C0E0         PUSH    A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#ZDO_EDBind
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   2401         ADD     A,#0x1
   \   000042   FC           MOV     R4,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   3400         ADDC    A,#0x0
   \   000047   FD           MOV     R5,A
   \   000048   90....       MOV     DPTR,#ZDO_EDBind
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F583         MOV     DPH,A
   \   000051   8982         MOV     DPL,R1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B                ; Setup parameters for call to function ZDP_SendData
   \   00005B   E8           MOV     A,R0
   \   00005C   F5..         MOV     ?V0,A
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP100_8
   \   000068   88..         MOV     ?V0,R0
   \   00006A   89..         MOV     ?V1,R1
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   75..20       MOV     ?V0,#0x20
   \   000074   75..80       MOV     ?V1,#-0x80
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7901         MOV     R1,#0x1
   \   00007E   7405         MOV     A,#0x5
   \   000080   12....       LCALL   ?XSTACK_DISP101_8
   \   000083   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000086   7405         MOV     A,#0x5
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   1244          
   1245              ZDO_RemoveEndDeviceBind();
   \   00008B   90....       MOV     DPTR,#ZDO_EDBind
   \   00008E   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   1246            }
   \                     ??CrossCallReturnLabel_359:
   \   000091   602E         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   000093   E0           MOVX    A,@DPTR
   \   000094   C8           XCH     A,R0
   \   000095   2410         ADD     A,#0x10
   \   000097   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00009A   6003         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   00009C                ; Setup parameters for call to function osal_mem_free
   \   00009C   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009F   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   C8           XCH     A,R0
   \   0000A7   2413         ADD     A,#0x13
   \   0000A9   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0000AC   6003         JZ      ??ZDO_EndDeviceTimeoutCB_2
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000B1                ; Setup parameters for call to function osal_mem_free
   \   0000B1   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B4   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0000B7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000BA   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   F0           MOVX    @DPTR,A
   1247          #endif  // REFLECTOR
   1248          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000C1   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine152_0
   \   000006                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   22           RET
   1249          
   1250          /*********************************************************************
   1251           * Optional Management Messages
   1252           */
   1253          
   1254          /*********************************************************************
   1255           * @fn          ZDO_ProcessMgmtLqiReq
   1256           *
   1257           * @brief       This function handles parsing the incoming Management
   1258           *              LQI request and generate the response.
   1259           *
   1260           *   Note:      This function will limit the number of items returned
   1261           *              to ZDO_MAX_LQI_ITEMS items.
   1262           *
   1263           * @param       inMsg - incoming message (request)
   1264           *
   1265           * @return      none
   1266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
   1269            byte x;
   1270            byte index;
   1271            byte numItems;
   1272            byte maxItems;
   1273            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V12,#0x0
   \   000011   75..00       MOV     ?V13,#0x0
   1274            ZDP_MgmtLqiItem_t* item;
   1275            neighborEntry_t    entry;
   1276            byte aItems;
   1277            associated_devices_t *aDevice;
   1278            AddrMgrEntry_t  nwkEntry;
   1279            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000017   35..         ADDC    A,?V15
   \   000019   12....       LCALL   ?Subroutine50 & 0xFFFF
   1280          
   1281            // Get the number of neighbor items
   1282            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \                     ??CrossCallReturnLabel_92:
   \   00001C   799C         MOV     R1,#-0x64
   \   00001E   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   1283          
   1284            // Get the number of associated items
   1285            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000021                ; Setup parameters for call to function AssocCount
   \   000021   7A04         MOV     R2,#0x4
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   ??AssocCount?relay   ; Banked call to: AssocCount
   \   000028   EA           MOV     A,R2
   \   000029   F5..         MOV     ?V2,A
   1286          
   1287            // Total number of items
   1288            maxItems += aItems;
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2A           ADD     A,R2
   \   000033   F0           MOVX    @DPTR,A
   1289          
   1290            // Start with the supplied index
   1291            if ( maxItems > StartIndex )
   \   000034   F8           MOV     R0,A
   \   000035   E5..         MOV     A,?V4
   \   000037   C3           CLR     C
   \   000038   98           SUBB    A,R0
   \   000039   4003         JC      $+5
   \   00003B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1292            {
   1293              numItems = maxItems - StartIndex;
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   C3           CLR     C
   \   000040   95..         SUBB    A,?V4
   \   000042   F5..         MOV     ?V1,A
   1294          
   1295              // limit the size of the list
   1296              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000044   C3           CLR     C
   \   000045   9404         SUBB    A,#0x4
   \   000047   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1297                numItems = ZDO_MAX_LQI_ITEMS;
   \   000049   75..03       MOV     ?V1,#0x3
   1298          
   1299              // Allocate the memory to build the table
   1300              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1301                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00004C                ; Setup parameters for call to function osal_mem_alloc
   \   00004C   E5..         MOV     A,?V1
   \   00004E   75F01A       MOV     B,#0x1a
   \   000051   A4           MUL     AB
   \   000052   FA           MOV     R2,A
   \   000053   ABF0         MOV     R3,B
   \   000055   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000058   8A..         MOV     ?V12,R2
   \   00005A   8B..         MOV     ?V13,R3
   1302          
   1303              if ( table != NULL )
   \   00005C   EA           MOV     A,R2
   \   00005D   45..         ORL     A,?V13
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1304              {
   1305                x = 0;
   \   000064   75..00       MOV     ?V3,#0x0
   1306                item = table;
   \   000067   AE..         MOV     R6,?V12
   \   000069   AF..         MOV     R7,?V13
   1307                index = StartIndex;
   \   00006B   85....       MOV     ?V0,?V4
   \   00006E   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1308          
   1309                // Loop through associated items and build list
   1310                for ( ; x < numItems; x++ )
   1311                {
   1312                  if ( index < aItems )
   1313                  {
   1314                    // get next associated device
   1315                    aDevice = AssocFindDevice( index++ );
   1316          
   1317                    // set basic fields
   1318                    item->panID   = _NIB.nwkPanId;
   1319                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1320                    item->nwkAddr = aDevice->shortAddr;
   1321                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1322                    item->depth   = 0xFF;
   1323                    item->lqi     = aDevice->linkInfo.rxLqi;
   1324          
   1325                    // set extented address
   1326                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1327                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1328          
   1329                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1330                    {
   1331                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1332                    }
   1333                    else
   1334                    {
   1335                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   000071                ; Setup parameters for call to function osal_memset
   \   000071   7C08         MOV     R4,#0x8
   \   000073   7D00         MOV     R5,#0x0
   \   000075   79FF         MOV     R1,#-0x1
   \   000077   AA..         MOV     R2,?V10
   \   000079   AB..         MOV     R3,?V11
   \   00007B   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1336                    }
   1337          
   1338                    // use association info to set other fields
   1339                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   00007E   E5..         MOV     A,?V6
   \   000080   2404         ADD     A,#0x4
   \   000082   F8           MOV     R0,A
   \   000083   E4           CLR     A
   \   000084   35..         ADDC    A,?V7
   \   000086   F9           MOV     R1,A
   \   000087   EE           MOV     A,R6
   \   000088   2416         ADD     A,#0x16
   \   00008A   FA           MOV     R2,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   EE           MOV     A,R6
   \   00008F   2415         ADD     A,#0x15
   \   000091   FC           MOV     R4,A
   \   000092   E4           CLR     A
   \   000093   3F           ADDC    A,R7
   \   000094   FD           MOV     R5,A
   \   000095   EE           MOV     A,R6
   \   000096   2414         ADD     A,#0x14
   \   000098   F5..         MOV     ?V10,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   F5..         MOV     ?V11,A
   \   00009E   8882         MOV     DPL,R0
   \   0000A0   8983         MOV     DPH,R1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   7030         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1340                    {
   1341                      if (  aDevice->shortAddr == 0 )
   \   0000A5   85..82       MOV     DPL,?V6
   \   0000A8   85..83       MOV     DPH,?V7
   \   0000AB   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0000AE   85..82       MOV     DPL,?V10
   \   0000B1   85..83       MOV     DPH,?V11
   \   0000B4   7004         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1342                      {
   1343                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
   1344                        item->depth = 0;
   \   0000B8   8008         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1345                      }
   1346                      else
   1347                      {
   1348                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   F0           MOVX    @DPTR,A
   1349                        item->depth = _NIB.nodeDepth - 1;
   \   0000BD   90....       MOV     DPTR,#_NIB + 52
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C2   85..82       MOV     DPL,?V8
   \   0000C5   85..83       MOV     DPH,?V9
   \   0000C8   F0           MOVX    @DPTR,A
   1350                      }
   1351          
   1352                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000C9   8C82         MOV     DPL,R4
   \   0000CB   8D83         MOV     DPH,R5
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?Subroutine45 & 0xFFFF
   1353                      item->relation = ZDP_MGMT_REL_PARENT;
   1354                    }
   \                     ??CrossCallReturnLabel_83:
   \   0000D2   E4           CLR     A
   \   0000D3   8033         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1355                    else
   1356                    {
   1357                      // If not parent, then it's a child
   1358                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000D5   90....       MOV     DPTR,#_NIB + 52
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   04           INC     A
   \   0000DA   85..82       MOV     DPL,?V8
   \   0000DD   85..83       MOV     DPH,?V9
   \   0000E0   12....       LCALL   ?Subroutine15 & 0xFFFF
   1359          
   1360                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_9:
   \   0000E3   C3           CLR     C
   \   0000E4   9403         SUBB    A,#0x3
   \   0000E6   85..82       MOV     DPL,?V10
   \   0000E9   85..83       MOV     DPH,?V11
   \   0000EC   4003         JC      $+5
   \   0000EE   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1361                      {
   1362                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?Subroutine15 & 0xFFFF
   1363          
   1364                        if ( aDevice->nodeRelation == CHILD_RFD )
   1365                        {
   1366                          item->rxOnIdle = FALSE;
   1367                        }
   1368                        else
   1369                        {
   1370                          item->rxOnIdle = TRUE;
   1371                        }
   1372                      }
   \                     ??CrossCallReturnLabel_10:
   \   0000F6   6401         XRL     A,#0x1
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1373                      else
   1374                      {
   1375                        item->devType = ZDP_MGMT_DT_ROUTER;
   1376          
   1377                        if ( aDevice->nodeRelation == CHILD_FFD )
   1378                        {
   1379                          item->rxOnIdle = FALSE;
   1380                        }
   1381                        else
   1382                        {
   1383                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0000FD   8C82         MOV     DPL,R4
   \   0000FF   8D83         MOV     DPH,R5
   \   000101   7401         MOV     A,#0x1
   1384                        }
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   000103   12....       LCALL   ?Subroutine45 & 0xFFFF
   1385                      }
   1386          
   1387                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_84:
   \   000106   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000108   F0           MOVX    @DPTR,A
   1388                    }
   1389          
   1390                    item++;
   \   000109   EE           MOV     A,R6
   \   00010A   241A         ADD     A,#0x1a
   \   00010C   FE           MOV     R6,A
   \   00010D   5001         JNC     ??ZDO_ProcessMgmtLqiReq_14
   \   00010F   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000110   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000112   E5..         MOV     A,?V3
   \   000114   C3           CLR     C
   \   000115   95..         SUBB    A,?V1
   \   000117   4003         JC      $+5
   \   000119   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   00011C   E5..         MOV     A,?V0
   \   00011E   C3           CLR     C
   \   00011F   95..         SUBB    A,?V2
   \   000121   4003         JC      $+5
   \   000123   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   000126                ; Setup parameters for call to function AssocFindDevice
   \   000126   85....       MOV     ?V6,?V0
   \   000129   AA..         MOV     R2,?V6
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ??AssocFindDevice?relay; Banked call to: AssocFindDevice
   \   000130   8A..         MOV     ?V6,R2
   \   000132   8B..         MOV     ?V7,R3
   \   000134   05..         INC     ?V0
   \   000136   90....       MOV     DPTR,#_NIB + 33
   \   000139   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00013C   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00013F   85..82       MOV     DPL,?V6
   \   000142   85..83       MOV     DPH,?V7
   \   000145   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000148   EE           MOV     A,R6
   \   000149   2412         ADD     A,#0x12
   \   00014B   F582         MOV     DPL,A
   \   00014D   E4           CLR     A
   \   00014E   3F           ADDC    A,R7
   \   00014F   F583         MOV     DPH,A
   \   000151   E8           MOV     A,R0
   \   000152   F0           MOVX    @DPTR,A
   \   000153   A3           INC     DPTR
   \   000154   E9           MOV     A,R1
   \   000155   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000158   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00015B   74FF         MOV     A,#-0x1
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   85..82       MOV     DPL,?V6
   \   000161   85..83       MOV     DPH,?V7
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   C0E0         PUSH    A
   \   000171   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   7401         MOV     A,#0x1
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E4           CLR     A
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   85..82       MOV     DPL,?V6
   \   000181   85..83       MOV     DPH,?V7
   \   000184   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000187   7402         MOV     A,#0x2
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00018F   EE           MOV     A,R6
   \   000190   240A         ADD     A,#0xa
   \   000192   F5..         MOV     ?V10,A
   \   000194   E4           CLR     A
   \   000195   3F           ADDC    A,R7
   \   000196   F5..         MOV     ?V11,A
   \   000198                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP101_8
   \   00019D   12....       LCALL   ??AddrMgrEntryLookupNwk?relay; Banked call to: AddrMgrEntryLookupNwk
   \   0001A0   E9           MOV     A,R1
   \   0001A1   6401         XRL     A,#0x1
   \   0001A3   6003         JZ      $+5
   \   0001A5   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001A8                ; Setup parameters for call to function sAddrExtCpy
   \   0001A8   7404         MOV     A,#0x4
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   AC82         MOV     R4,DPL
   \   0001AF   AD83         MOV     R5,DPH
   \   0001B1   AA..         MOV     R2,?V10
   \   0001B3   AB..         MOV     R3,?V11
   \   0001B5   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0001B8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001BB   7401         MOV     A,#0x1
   \   0001BD   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001C0   6403         XRL     A,#0x3
   \   0001C2   6003         JZ      $+5
   \   0001C4   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001C7   8C82         MOV     DPL,R4
   \   0001C9   8D83         MOV     DPH,R5
   \   0001CB   E4           CLR     A
   \   0001CC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1391                  }
   1392                  else
   1393                  {
   1394                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001CF   E5..         MOV     A,?V2
   \   0001D1   C3           CLR     C
   \   0001D2   95..         SUBB    A,?V4
   \   0001D4   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1395                      // Start with 1st neighbor
   1396                      index = 0;
   \   0001D6   75..00       MOV     ?V0,#0x0
   \   0001D9   801F         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1397                    else
   1398                      // Start with >1st neighbor
   1399                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001DB   E5..         MOV     A,?V4
   \   0001DD   C3           CLR     C
   \   0001DE   95..         SUBB    A,?V2
   \   0001E0   F5..         MOV     ?V0,A
   \   0001E2   8016         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1400                    break;
   1401                  }
   1402                }
   1403          
   1404                // Loop through neighbor items and finish list
   1405                for ( ; x < numItems; x++ )
   1406                {
   1407                  // Add next neighbor table item
   1408                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1409          
   1410                  // set ZDP_MgmtLqiItem_t fields
   1411                  item->panID    = entry.panId;
   1412                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1413                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1414                  item->nwkAddr  = entry.neighborAddress;
   1415                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1416                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1417                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1418                  item->depth    = 0xFF;
   1419                  item->lqi      = entry.linkInfo.rxLqi;
   1420          
   1421                  if ( item->nwkAddr == 0 )
   1422                  {
   1423                    item->devType = ZDP_MGMT_DT_COORD;
   1424                  }
   1425                  else
   1426                  {
   1427                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001E4   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0001E6   F0           MOVX    @DPTR,A
   1428                  }
   1429          
   1430                  item++;
   \   0001E7   EE           MOV     A,R6
   \   0001E8   241A         ADD     A,#0x1a
   \   0001EA   FE           MOV     R6,A
   \   0001EB   5001         JNC     ??ZDO_ProcessMgmtLqiReq_21
   \   0001ED   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0001EE   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001F0   E5..         MOV     A,?V3
   \   0001F2   C3           CLR     C
   \   0001F3   95..         SUBB    A,?V1
   \   0001F5   4003         JC      $+5
   \   0001F7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001FA                ; Setup parameters for call to function NLME_GetRequest
   \   0001FA   740E         MOV     A,#0xe
   \   0001FC   12....       LCALL   ?XSTACK_DISP102_8
   \   0001FF   85....       MOV     ?V6,?V0
   \   000202   AA..         MOV     R2,?V6
   \   000204   7B00         MOV     R3,#0x0
   \   000206   7987         MOV     R1,#-0x79
   \   000208   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   00020B   05..         INC     ?V0
   \   00020D   7418         MOV     A,#0x18
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000215   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000218                ; Setup parameters for call to function osal_memset
   \   000218   7C08         MOV     R4,#0x8
   \   00021A   7D00         MOV     R5,#0x0
   \   00021C   79FF         MOV     R1,#-0x1
   \   00021E   EE           MOV     A,R6
   \   00021F   240A         ADD     A,#0xa
   \   000221   FA           MOV     R2,A
   \   000222   E4           CLR     A
   \   000223   3F           ADDC    A,R7
   \   000224   FB           MOV     R3,A
   \   000225   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   \   000228   EE           MOV     A,R6
   \   000229   2412         ADD     A,#0x12
   \   00022B   F8           MOV     R0,A
   \   00022C   E4           CLR     A
   \   00022D   3F           ADDC    A,R7
   \   00022E   F9           MOV     R1,A
   \   00022F   740E         MOV     A,#0xe
   \   000231   12....       LCALL   ?XSTACK_DISP0_8
   \   000234   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000237   8882         MOV     DPL,R0
   \   000239   8983         MOV     DPH,R1
   \   00023B   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00023E   EE           MOV     A,R6
   \   00023F   2415         ADD     A,#0x15
   \   000241   F582         MOV     DPL,A
   \   000243   E4           CLR     A
   \   000244   3F           ADDC    A,R7
   \   000245   F583         MOV     DPH,A
   \   000247   7402         MOV     A,#0x2
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   EE           MOV     A,R6
   \   00024B   2416         ADD     A,#0x16
   \   00024D   F582         MOV     DPL,A
   \   00024F   E4           CLR     A
   \   000250   3F           ADDC    A,R7
   \   000251   F583         MOV     DPH,A
   \   000253   7403         MOV     A,#0x3
   \   000255   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000258   F582         MOV     DPL,A
   \   00025A   E4           CLR     A
   \   00025B   3F           ADDC    A,R7
   \   00025C   F583         MOV     DPH,A
   \   00025E   74FF         MOV     A,#-0x1
   \   000260   F0           MOVX    @DPTR,A
   \   000261   741D         MOV     A,#0x1d
   \   000263   12....       LCALL   ?XSTACK_DISP0_8
   \   000266   E0           MOVX    A,@DPTR
   \   000267   C0E0         PUSH    A
   \   000269   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00026C   D0E0         POP     A
   \   00026E   F0           MOVX    @DPTR,A
   \   00026F   EE           MOV     A,R6
   \   000270   2414         ADD     A,#0x14
   \   000272   FA           MOV     R2,A
   \   000273   E4           CLR     A
   \   000274   3F           ADDC    A,R7
   \   000275   FB           MOV     R3,A
   \   000276   8882         MOV     DPL,R0
   \   000278   8983         MOV     DPH,R1
   \   00027A   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00027D   8A82         MOV     DPL,R2
   \   00027F   8B83         MOV     DPH,R3
   \   000281   6003         JZ      $+5
   \   000283   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000286   E4           CLR     A
   \   000287   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_20 & 0xFFFF
   1431                }
   1432              }
   1433            }
   1434            else
   1435            {
   1436              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   00028A   75..00       MOV     ?V1,#0x0
   1437            }
   1438          
   1439            // Send response
   1440            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1441                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00028D                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00028D   75..00       MOV     ?V2,#0x0
   \   000290   78..         MOV     R0,#?V2
   \   000292   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000295   78..         MOV     R0,#?V12
   \   000297   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029A   78..         MOV     R0,#?V1
   \   00029C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029F   E5..         MOV     A,?V4
   \   0002A1   F5..         MOV     ?V1,A
   \   0002A3   78..         MOV     R0,#?V1
   \   0002A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A8   7405         MOV     A,#0x5
   \   0002AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   FD           MOV     R5,A
   \   0002AF   7C00         MOV     R4,#0x0
   \   0002B1   E5..         MOV     A,?V14
   \   0002B3   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0002B6   35..         ADDC    A,?V15
   \   0002B8   FB           MOV     R3,A
   \   0002B9   E5..         MOV     A,?V14
   \   0002BB   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0002BE   35..         ADDC    A,?V15
   \   0002C0   F583         MOV     DPH,A
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   F9           MOV     R1,A
   \   0002C4   12....       LCALL   ??ZDP_MgmtLqiRsp?relay; Banked call to: ZDP_MgmtLqiRsp
   \   0002C7   7405         MOV     A,#0x5
   \   0002C9   12....       LCALL   ?DEALLOC_XSTACK8
   1442          
   1443            if ( table )
   \   0002CC   E5..         MOV     A,?V12
   \   0002CE   45..         ORL     A,?V13
   \   0002D0   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1444            {
   1445              osal_mem_free( table );
   \   0002D2                ; Setup parameters for call to function osal_mem_free
   \   0002D2   AA..         MOV     R2,?V12
   \   0002D4   AB..         MOV     R3,?V13
   \   0002D6   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1446            }
   1447          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002D9   7425         MOV     A,#0x25
   \   0002DB                REQUIRE ?Subroutine5
   \   0002DB                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   FB           MOV     R3,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000005   F5..         MOV     ?V4,A
   \   000007                ; Setup parameters for call to function NLME_GetRequest
   \   000007                ; Setup parameters for call to function APSME_GetRequest
   \   000007   AC..         MOV     R4,?XSP + 0
   \   000009   AD..         MOV     R5,?XSP + 1
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F5..         MOV     ?V8,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F5..         MOV     ?V9,A
   \   000006   85..82       MOV     DPL,?V8
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1448          
   1449          /*********************************************************************
   1450           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1451           *
   1452           * @brief       This function handles parsing the incoming Management
   1453           *              Network Discover request and starts the request.
   1454           *
   1455           * @param       inMsg - incoming message (request)
   1456           *
   1457           * @return      none
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1461            NLME_ScanFields_t scan;
   1462            uint8             index;
   1463            uint8             *msg;
   1464          
   1465            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000011   35..         ADDC    A,?V1
   \   000013   12....       LCALL   ?Subroutine68 & 0xFFFF
   1466            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_115:
   \   000016   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000019   EA           MOV     A,R2
   \   00001A   F8           MOV     R0,A
   \   00001B   EB           MOV     A,R3
   \   00001C   F9           MOV     R1,A
   \   00001D   EC           MOV     A,R4
   \   00001E   FA           MOV     R2,A
   \   00001F   ED           MOV     A,R5
   \   000020   FB           MOV     R3,A
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   12....       LCALL   ?XSTORE_R0123
   1467            msg += 4;
   \   00002A   EE           MOV     A,R6
   \   00002B   2404         ADD     A,#0x4
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
   \   000030   0F           INC     R7
   1468            scan.duration = *msg++;
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   C0E0         PUSH    A
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   D0E0         POP     A
   \   00003F   12....       LCALL   ?Subroutine37 & 0xFFFF
   1469            index         = *msg;
   \                     ??CrossCallReturnLabel_58:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   1470            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1471            scan.scanApp  = NLME_DISC_SCAN;
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
   1472          
   1473            // Save off the information to be used for the response
   1474            zdappMgmtNwkDiscReqInProgress          = true;
   \   000054   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000057   F0           MOVX    @DPTR,A
   1475            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000058   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00005B   04           INC     A
   \   00005C   F0           MOVX    @DPTR,A
   1476            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000068   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00006B   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   1477            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_300:
   \   00006E   EA           MOV     A,R2
   \   00006F   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000072   F0           MOVX    @DPTR,A
   1478            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000073   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00007A   F0           MOVX    @DPTR,A
   1479          
   1480            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00007B                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00007B   AA..         MOV     R2,?XSP + 0
   \   00007D   AB..         MOV     R3,?XSP + 1
   \   00007F   12....       LCALL   ??NLME_NwkDiscReq2?relay; Banked call to: NLME_NwkDiscReq2
   \   000082   E9           MOV     A,R1
   \   000083   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
   1481            {
   1482              NLME_NwkDiscTerm();
   \   000085                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000085   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1483          
   1484              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1485            }
   1486          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_1:
   \   000088   7407         MOV     A,#0x7
   \   00008A   02....       LJMP    ??Subroutine145_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005   7904         MOV     R1,#0x4
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET
   1487          
   1488          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1489          /*********************************************************************
   1490           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1491           *
   1492           * @brief       This function finishes the processing of the Management
   1493           *              Network Discover Request and generates the response.
   1494           *
   1495           *   Note:      This function will limit the number of items returned
   1496           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1497           *
   1498           * @param       ResultCountSrcAddr - source of the request
   1499           * @param       msg - pointer to incoming message
   1500           * @param       SecurityUse -
   1501           *
   1502           * @return      none
   1503           */
   1504          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1505          {
   1506            byte count, i, ResultCount = 0;
   1507            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1508          
   1509            NetworkList = nwk_getNwkDescList();
   1510          
   1511            // Count the number of nwk descriptors in the list
   1512            pList = nwk_getNwkDescList();
   1513            while (pList)
   1514            {
   1515              ResultCount++;
   1516              pList = pList->nextDesc;
   1517            }
   1518          
   1519            if ( ZSTACK_ROUTER_BUILD )
   1520            {
   1521              // Look for my PanID.
   1522              pList = nwk_getNwkDescList();
   1523              while ( pList )
   1524              {
   1525                if ( pList->panId == _NIB.nwkPanId )
   1526                {
   1527                  break;
   1528                }
   1529          
   1530          
   1531                if ( !pList->nextDesc )
   1532                {
   1533                  break;
   1534                }
   1535                pList = pList->nextDesc;
   1536              }
   1537          
   1538          
   1539              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1540              // prepend it.
   1541              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1542              {
   1543                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1544                if ( newDesc )
   1545                {
   1546                  byte pJoin;
   1547          
   1548                  newDesc->panId = _NIB.nwkPanId;
   1549                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1550                  newDesc->version = NLME_GetProtocolVersion();
   1551                  newDesc->stackProfile = zgStackProfile;
   1552          
   1553                  //Extended PanID
   1554                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1555          
   1556                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1557                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1558                                                     INVALID_NODE_ADDR);
   1559          
   1560                  newDesc->nextDesc = NetworkList;
   1561                  NetworkList = newDesc;
   1562                  ResultCount++;
   1563                }
   1564              }
   1565            }
   1566          
   1567            // Calc the count and apply a max count.
   1568            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1569            {
   1570              count = 0;
   1571            }
   1572            else
   1573            {
   1574              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1575              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1576              {
   1577                count = ZDO_MAX_NWKDISC_ITEMS;
   1578              }
   1579          
   1580              // Move the list pointer up to the start index.
   1581              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1582              {
   1583                NetworkList = NetworkList->nextDesc;
   1584              }
   1585            }
   1586          
   1587            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1588                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1589                                zdappMgmtNwkDiscStartIndex,
   1590                                count,
   1591                                NetworkList,
   1592                                false );
   1593          
   1594            if ( ZSTACK_ROUTER_BUILD )
   1595            {
   1596              if ( newDesc != NULL )
   1597              {
   1598                osal_mem_free( newDesc );
   1599              }
   1600            }
   1601          
   1602            NLME_NwkDiscTerm();
   1603          }
   1604          #endif
   1605          
   1606          /*********************************************************************
   1607           * @fn          ZDO_ProcessMgmtRtgReq
   1608           *
   1609           * @brief       This function finishes the processing of the Management
   1610           *              Routing Request and generates the response.
   1611           *
   1612           *   Note:      This function will limit the number of items returned
   1613           *              to ZDO_MAX_RTG_ITEMS items.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1621            byte x;
   1622            byte maxNumItems;
   1623            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1624            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V6,R6
   \   000012   8E..         MOV     ?V7,R6
   1625            rtgItem_t *pList;
   1626            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000017   35..         ADDC    A,?V3
   \   000019   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00001C   FF           MOV     R7,A
   1627          
   1628            // Get the number of table items
   1629            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001D                ; Setup parameters for call to function NLME_GetRequest
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
   \   000025   799D         MOV     R1,#-0x63
   \   000027   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   1630          
   1631            if ( maxNumItems > StartIndex )
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   98           SUBB    A,R0
   \   000035   5071         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1632            {
   1633              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C3           CLR     C
   \   000039   9F           SUBB    A,R7
   \   00003A   FE           MOV     R6,A
   1634          
   1635              // limit the size of the list
   1636              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003B   C3           CLR     C
   \   00003C   940B         SUBB    A,#0xb
   \   00003E   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1637              {
   1638                numItems = ZDO_MAX_RTG_ITEMS;
   \   000040   7E0A         MOV     R6,#0xa
   1639              }
   1640          
   1641              // Allocate the memory to build the table
   1642              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV     A,R6
   \   000043   75F007       MOV     B,#0x7
   \   000046   A4           MUL     AB
   \   000047   FA           MOV     R2,A
   \   000048   ABF0         MOV     R3,B
   \   00004A   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00004D   8A..         MOV     ?V0,R2
   \   00004F   8B..         MOV     ?V1,R3
   \   000051   8A..         MOV     ?V6,R2
   \   000053   8B..         MOV     ?V7,R3
   1643          
   1644              if ( pBuf != NULL )
   \   000055   EA           MOV     A,R2
   \   000056   45..         ORL     A,?V7
   \   000058   604C         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1645              {
   1646                // Convert buffer to list
   1647                pList = (rtgItem_t *)pBuf;
   1648          
   1649                // Loop through items and build list
   1650                for ( x = 0; x < numItems; x++ )
   \   00005A   75..00       MOV     ?V4,#0x0
   \   00005D   800F         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1651                {
   1652                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1653          
   1654                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1655                  switch( pList->status )
   1656                  {
   1657                    case RT_ACTIVE:
   1658                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1659                      break;
   1660          
   1661                    case RT_DISC:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1663                      break;
   1664          
   1665                    case RT_LINK_FAIL:
   1666                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1667                      break;
   1668          
   1669                    case RT_INIT:
   1670                    case RT_REPAIR:
   1671                    default:
   1672                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00005F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000061   F0           MOVX    @DPTR,A
   1673                      break;
   1674                  }
   1675          
   1676                  // Increment pointer to next record
   1677                  pList++;
   \   000062   E5..         MOV     A,?V0
   \   000064   2407         ADD     A,#0x7
   \   000066   F5..         MOV     ?V0,A
   \   000068   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00006A   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00006C   05..         INC     ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00006E   E5..         MOV     A,?V4
   \   000070   C3           CLR     C
   \   000071   9E           SUBB    A,R6
   \   000072   5034         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000074                ; Setup parameters for call to function NLME_GetRequest
   \   000074   AC..         MOV     R4,?V0
   \   000076   AD..         MOV     R5,?V1
   \   000078   85....       MOV     ?V8,?V4
   \   00007B   E5..         MOV     A,?V8
   \   00007D   2F           ADD     A,R7
   \   00007E   FA           MOV     R2,A
   \   00007F   E4           CLR     A
   \   000080   3400         ADDC    A,#0x0
   \   000082   FB           MOV     R3,A
   \   000083   798B         MOV     R1,#-0x75
   \   000085   12....       LCALL   ??NLME_GetRequest?relay; Banked call to: NLME_GetRequest
   \   000088   E5..         MOV     A,?V0
   \   00008A   2405         ADD     A,#0x5
   \   00008C   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   14           DEC     A
   \   000091   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   000093   14           DEC     A
   \   000094   6008         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   000096   14           DEC     A
   \   000097   6009         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   000099   80C4         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00009B   E4           CLR     A
   \   00009C   80C3         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   80BF         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   80BB         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1678                }
   1679              }
   1680              else
   1681              {
   1682                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000A6   7E00         MOV     R6,#0x0
   1683              }
   1684            }
   1685          
   1686            // Send response
   1687            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1688                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000A8                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000A8   75..00       MOV     ?V0,#0x0
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   78..         MOV     R0,#?V6
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F5..         MOV     ?V0,A
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   EF           MOV     A,R7
   \   0000BE   F5..         MOV     ?V0,A
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   7405         MOV     A,#0x5
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FD           MOV     R5,A
   \   0000CC   7C00         MOV     R4,#0x0
   \   0000CE   E5..         MOV     A,?V2
   \   0000D0   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000D3   35..         ADDC    A,?V3
   \   0000D5   FB           MOV     R3,A
   \   0000D6   E5..         MOV     A,?V2
   \   0000D8   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000DB   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   ??ZDP_MgmtRtgRsp?relay; Banked call to: ZDP_MgmtRtgRsp
   \   0000E3   7405         MOV     A,#0x5
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   1689          
   1690            if ( pBuf != NULL )
   \   0000E8   E5..         MOV     A,?V6
   \   0000EA   45..         ORL     A,?V7
   \   0000EC   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1691            {
   1692              osal_mem_free( pBuf );
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   AA..         MOV     R2,?V6
   \   0000F0   AB..         MOV     R3,?V7
   \   0000F2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1693            }
   1694          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   7F0C         MOV     R7,#0xc
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine159_0
   \   000002                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine165_0
   \   000003                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtBindReq
   1698           *
   1699           * @brief       This function finishes the processing of the Management
   1700           *              Bind Request and generates the response.
   1701           *
   1702           *   Note:      This function will limit the number of items returned
   1703           *              to ZDO_MAX_BIND_ITEMS items.
   1704           *
   1705           * @param       inMsg - incoming message (request)
   1706           *
   1707           * @return      none
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine158_0
   \   000006                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   1711          #if defined ( REFLECTOR )
   1712            byte x;
   1713            uint16 maxNumItems;
   1714            uint16 numItems;
   1715            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0,#0x0
   \   000011   75..00       MOV     ?V1,#0x0
   1716            apsBindingItem_t *pList;
   1717            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000017   35..         ADDC    A,?V13
   \   000019   12....       LCALL   ?Subroutine50 & 0xFFFF
   1718            uint8 status;
   1719          
   1720            // Get the number of table items
   1721            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \                     ??CrossCallReturnLabel_93:
   \   00001C   79A3         MOV     R1,#-0x5d
   \   00001E   12....       LCALL   ??APSME_GetRequest?relay; Banked call to: APSME_GetRequest
   1722          
   1723            if ( maxNumItems > StartIndex )
   \   000021   85..82       MOV     DPL,?V4
   \   000024   AA82         MOV     R2,DPL
   \   000026   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000029   C3           CLR     C
   \   00002A   EA           MOV     A,R2
   \   00002B   98           SUBB    A,R0
   \   00002C   E4           CLR     A
   \   00002D   99           SUBB    A,R1
   \   00002E   507C         JNC     ??ZDO_ProcessMgmtBindReq_0
   1724            {
   1725              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C3           CLR     C
   \   000038   9A           SUBB    A,R2
   \   000039   FE           MOV     R6,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   9400         SUBB    A,#0x0
   \   00003E   FF           MOV     R7,A
   1726            }
   1727            else
   1728            {
   1729              numItems = 0;
   1730            }
   1731          
   1732            // limit the size of the list
   1733            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00003F   C3           CLR     C
   \   000040   EE           MOV     A,R6
   \   000041   9404         SUBB    A,#0x4
   \   000043   EF           MOV     A,R7
   \   000044   9400         SUBB    A,#0x0
   \   000046   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1734            {
   1735              numItems = ZDO_MAX_BIND_ITEMS;
   \   000048   7E03         MOV     R6,#0x3
   \   00004A   7F00         MOV     R7,#0x0
   \   00004C   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1736            }
   1737          
   1738            // Allocate the memory to build the table
   1739            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   00004E   EE           MOV     A,R6
   \   00004F   4F           ORL     A,R7
   \   000050   605A         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000052                ; Setup parameters for call to function osal_mem_alloc
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   FB           MOV     R3,A
   \   000056   EA           MOV     A,R2
   \   000057   75F015       MOV     B,#0x15
   \   00005A   A4           MUL     AB
   \   00005B   FA           MOV     R2,A
   \   00005C   A8F0         MOV     R0,B
   \   00005E   75F015       MOV     B,#0x15
   \   000061   EB           MOV     A,R3
   \   000062   A4           MUL     AB
   \   000063   28           ADD     A,R0
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000068   8A..         MOV     ?V2,R2
   \   00006A   8B..         MOV     ?V3,R3
   \   00006C   8A..         MOV     ?V0,R2
   \   00006E   8B..         MOV     ?V1,R3
   \   000070   EA           MOV     A,R2
   \   000071   45..         ORL     A,?V1
   \   000073   6037         JZ      ??ZDO_ProcessMgmtBindReq_0
   1740            {
   1741              status = ZSuccess;
   \   000075   75..00       MOV     ?V5,#0x0
   1742          
   1743              // Convert buffer to list
   1744              pList = (apsBindingItem_t *)pBuf;
   1745          
   1746              // Loop through items and build list
   1747              for ( x = 0; x < numItems; x++ )
   \   000078   75..00       MOV     ?V6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   00007B   85....       MOV     ?V8,?V6
   \   00007E   C3           CLR     C
   \   00007F   E5..         MOV     A,?V8
   \   000081   9E           SUBB    A,R6
   \   000082   E4           CLR     A
   \   000083   9F           SUBB    A,R7
   \   000084   502B         JNC     ??ZDO_ProcessMgmtBindReq_4
   1748              {
   1749                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   000086                ; Setup parameters for call to function APSME_GetRequest
   \   000086   AC..         MOV     R4,?V2
   \   000088   AD..         MOV     R5,?V3
   \   00008A   85....       MOV     ?V10,?V6
   \   00008D   85....       MOV     ?V8,?V4
   \   000090   E5..         MOV     A,?V10
   \   000092   25..         ADD     A,?V8
   \   000094   FA           MOV     R2,A
   \   000095   E4           CLR     A
   \   000096   3400         ADDC    A,#0x0
   \   000098   FB           MOV     R3,A
   \   000099   79A2         MOV     R1,#-0x5e
   \   00009B   12....       LCALL   ??APSME_GetRequest?relay; Banked call to: APSME_GetRequest
   1750                pList++;
   \   00009E   E5..         MOV     A,?V2
   \   0000A0   2415         ADD     A,#0x15
   \   0000A2   F5..         MOV     ?V2,A
   \   0000A4   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000A6   05..         INC     ?V3
   1751              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A8   05..         INC     ?V6
   \   0000AA   80CF         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1752          
   1753            }
   1754            else
   1755            {
   1756              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000AC   75..8B       MOV     ?V5,#-0x75
   1757              numItems = 0;
   \   0000AF   7E00         MOV     R6,#0x0
   1758            }
   1759          
   1760            // Send response
   1761            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1762                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000B1                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B1   75..00       MOV     ?V2,#0x0
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B9   78..         MOV     R0,#?V0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   EE           MOV     A,R6
   \   0000BF   F5..         MOV     ?V2,A
   \   0000C1   78..         MOV     R0,#?V2
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C6   E5..         MOV     A,?V4
   \   0000C8   F5..         MOV     ?V2,A
   \   0000CA   78..         MOV     R0,#?V2
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CF   7405         MOV     A,#0x5
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FD           MOV     R5,A
   \   0000D6   AC..         MOV     R4,?V5
   \   0000D8   E5..         MOV     A,?V12
   \   0000DA   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0000DD   35..         ADDC    A,?V13
   \   0000DF   FB           MOV     R3,A
   \   0000E0   E5..         MOV     A,?V12
   \   0000E2   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000E5   35..         ADDC    A,?V13
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F9           MOV     R1,A
   \   0000EB   12....       LCALL   ??ZDP_MgmtBindRsp?relay; Banked call to: ZDP_MgmtBindRsp
   \   0000EE   7405         MOV     A,#0x5
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764            if ( pBuf )
   \   0000F3   E5..         MOV     A,?V0
   \   0000F5   45..         ORL     A,?V1
   \   0000F7   6007         JZ      ??ZDO_ProcessMgmtBindReq_6
   1765            {
   1766              osal_mem_free( pBuf );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   AA..         MOV     R2,?V0
   \   0000FB   AB..         MOV     R3,?V1
   \   0000FD   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   1767            }
   1768          #else
   1769            (void)inMsg;
   1770          #endif
   1771          }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   7F0E         MOV     R7,#0xe
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1775           *
   1776           * @brief       This function finishes the processing of the Management
   1777           *              Direct Join Request and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine94 & 0xFFFF
   1785            uint8 *deviceAddr;
   1786            uint8 capInfo;
   1787            uint8 stat;
   1788          
   1789            // Parse the message
   1790            deviceAddr = inMsg->asdu;
   1791            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1792          
   1793            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_334:
   \   00000D   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??NLME_DirectJoinRequest?relay; Banked call to: NLME_DirectJoinRequest
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1794          
   1795            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0,#0x0
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP100_8
   \   000032   88..         MOV     ?V0,R0
   \   000034   89..         MOV     ?V1,R1
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   75..35       MOV     ?V0,#0x35
   \   00003E   75..80       MOV     ?V1,#-0x80
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000049   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00004C   7405         MOV     A,#0x5
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1796          }
   \   000051                REQUIRE ?Subroutine8
   \   000051                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine145_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine161_0
   \   000004                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   7901         MOV     R1,#0x1
   \   000002   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000005   FA           MOV     R2,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   22           RET
   1797          
   1798          /*********************************************************************
   1799           * @fn          ZDO_ProcessMgmtLeaveReq
   1800           *
   1801           * @brief       This function processes a Management Leave Request
   1802           *              and generates the response.
   1803           *
   1804           * @param       inMsg - incoming message (request)
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1810            NLME_LeaveReq_t req;
   1811            ZStatus_t       status;
   1812            uint8           option;
   1813            uint8 *msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000012   12....       LCALL   ?Subroutine126 & 0xFFFF
   1814          
   1815            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1816                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_221:
   \   000015                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??AddrMgrExtAddrValid?relay; Banked call to: AddrMgrExtAddrValid
   \   00001C   E9           MOV     A,R1
   \   00001D   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001F   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000022   EA           MOV     A,R2
   \   000023   FC           MOV     R4,A
   \   000024   EB           MOV     A,R3
   \   000025   FD           MOV     R5,A
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   EF           MOV     A,R7
   \   000029   FB           MOV     R3,A
   \   00002A   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00002D   E9           MOV     A,R1
   \   00002E   6401         XRL     A,#0x1
   \   000030   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1817            {
   1818              // Remove this device
   1819              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1820            }
   1821            else
   1822            {
   1823              // Remove child device
   1824              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   EE           MOV     A,R6
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   EF           MOV     A,R7
   1825            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000045   12....       LCALL   ?Subroutine37 & 0xFFFF
   1826          
   1827            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_56:
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   1828            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000051   A2E6         MOV     C,0xE0 /* A   */.6
   \   000053   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1829            {
   1830              req.removeChildren = TRUE;
   \   000055   7403         MOV     A,#0x3
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
   1831            }
   1832          
   1833            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   00005D   E8           MOV     A,R0
   \   00005E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000060   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1834            {
   1835               req.rejoin = TRUE;
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   1836            }
   1837          
   1838            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00006A   7405         MOV     A,#0x5
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   1839          
   1840            status = NLME_LeaveReq( &req );
   \   000071                ; Setup parameters for call to function NLME_LeaveReq
   \   000071   04           INC     A
   \   000072   12....       LCALL   ?XSTACK_DISP101_8
   \   000075   12....       LCALL   ??NLME_LeaveReq?relay; Banked call to: NLME_LeaveReq
   \   000078   E9           MOV     A,R1
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   F0           MOVX    @DPTR,A
   1841          
   1842            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1843            {
   1844              // Stop polling and get ready to reset
   1845              NLME_SetPollRate( 0 );
   \   000080                ; Setup parameters for call to function NLME_SetPollRate
   \   000080   7A00         MOV     R2,#0x0
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1846            }
   1847          
   1848            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000087                ; Setup parameters for call to function ZDP_SendData
   \   000087   75..00       MOV     ?V2,#0x0
   \   00008A   78..         MOV     R0,#?V2
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?XSTACK_DISP100_8
   \   000094   88..         MOV     ?V2,R0
   \   000096   89..         MOV     ?V3,R1
   \   000098   78..         MOV     R0,#?V2
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   75..34       MOV     ?V2,#0x34
   \   0000A0   75..80       MOV     ?V3,#-0x80
   \   0000A3   78..         MOV     R0,#?V2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7901         MOV     R1,#0x1
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   2402         ADD     A,#0x2
   \   0000AE   FC           MOV     R4,A
   \   0000AF   E4           CLR     A
   \   0000B0   35..         ADDC    A,?V1
   \   0000B2   FD           MOV     R5,A
   \   0000B3   E5..         MOV     A,?V0
   \   0000B5   240F         ADD     A,#0xf
   \   0000B7   FA           MOV     R2,A
   \   0000B8   E4           CLR     A
   \   0000B9   35..         ADDC    A,?V1
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000BF   7405         MOV     A,#0x5
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   1849          }
   \   0000C4   7406         MOV     A,#0x6
   \   0000C6                REQUIRE ?Subroutine3
   \   0000C6                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET
   1850          
   1851          
   1852          /*********************************************************************
   1853           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1854           *
   1855           * @brief       This function processes a Management Permit Join Request
   1856           *              and generates the response.
   1857           *
   1858           * @param       inMsg - incoming message (request)
   1859           *
   1860           * @return      none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine94 & 0xFFFF
   1864            uint8 stat;
   1865            uint8 duration;
   1866            uint8 tcsig;
   1867          
   1868            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1869            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1870          
   1871            // Set the network layer permit join duration
   1872            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_335:
   \   00000D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??NLME_PermitJoiningRequest?relay; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1873          
   1874            // Handle the Trust Center Significance
   1875            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1876            {
   1877              if ( tcsig == TRUE )
   1878              {
   1879                ZDSecMgrPermitJoining( duration );
   1880              }
   1881            }
   1882          
   1883            // Send a response if unicast
   1884            if ( !inMsg->wasBroadcast )
   \   00001C   EE           MOV     A,R6
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000022   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1885            {
   1886              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000024                ; Setup parameters for call to function ZDP_SendData
   \   000024   75..00       MOV     ?V0,#0x0
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP100_8
   \   000031   88..         MOV     ?V0,R0
   \   000033   89..         MOV     ?V1,R1
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..36       MOV     ?V0,#0x36
   \   00003D   75..80       MOV     ?V1,#-0x80
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine87 & 0xFFFF
   1887            }
   \                     ??CrossCallReturnLabel_147:
   \   000048   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1888          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000050   02....       LJMP    ?Subroutine8 & 0xFFFF
   1889          
   1890          /*
   1891           * This function stub allows the next higher layer to be notified of
   1892           * a permit joining timeout.
   1893           */
   1894          /*********************************************************************
   1895           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1896           *
   1897           * @brief       This function stub allows the next higher layer to be
   1898           *              notified of a permit joining timeout. Currently, this
   1899           *              directly bypasses the APS layer.
   1900           *
   1901           * @param       none
   1902           *
   1903           * @return      none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1907            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1908            // Currently, only the ZDSecMgr needs to be notified
   1909            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1910            {
   1911              ZDSecMgrPermitJoiningTimeout();
   1912            }
   1913            #endif
   1914          }
   \   000000   02....       LJMP    ?BRET
   1915          
   1916          /*********************************************************************
   1917           * @fn          ZDO_ProcessUserDescReq
   1918           *
   1919           * @brief       This function finishes the processing of the User
   1920           *              Descriptor Request and generates the response.
   1921           *
   1922           * @param       inMsg - incoming message (request)
   1923           *
   1924           * @return      none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1928            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000011   F5..         MOV     ?V4,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V5,A
   1929            UserDescriptorFormat_t userDesc;
   1930          
   1931            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1932                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   EE           MOV     A,R6
   \   000018   240F         ADD     A,#0xf
   \   00001A   F5..         MOV     ?V2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   F5..         MOV     ?V3,A
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F5..         MOV     ?V0,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F5..         MOV     ?V1,A
   \   000029   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   65..         XRL     A,?V4
   \   00002F   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   65..         XRL     A,?V5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000035   705B         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV     R0,?XSP + 0
   \   000039   A9..         MOV     R1,?XSP + 1
   \   00003B   88..         MOV     ?V6,R0
   \   00003D   89..         MOV     ?V7,R1
   \   00003F   78..         MOV     R0,#?V6
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V6,#0x11
   \   000047   75..00       MOV     ?V7,#0x0
   \   00004A   78..         MOV     R0,#?V6
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7030         JNZ     ??ZDO_ProcessUserDescReq_1
   1933            {
   1934              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000062                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000062   75..00       MOV     ?V6,#0x0
   \   000065   78..         MOV     R0,#?V6
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V6,R0
   \   000071   89..         MOV     ?V7,R1
   \   000073   78..         MOV     R0,#?V6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   AC..         MOV     R4,?V4
   \   00007A   AD..         MOV     R5,?V5
   \   00007C   AA..         MOV     R2,?V0
   \   00007E   AB..         MOV     R3,?V1
   \   000080   85..82       MOV     DPL,?V2
   \   000083   85..83       MOV     DPH,?V3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??ZDP_UserDescRsp?relay; Banked call to: ZDP_UserDescRsp
   \   00008B   7403         MOV     A,#0x3
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   802A         SJMP    ??ZDO_ProcessUserDescReq_2
   1935            }
   1936            else
   1937            {
   1938              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1939                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000092                ; Setup parameters for call to function ZDP_GenericRsp
   \   000092   75..11       MOV     ?V6,#0x11
   \   000095   75..80       MOV     ?V7,#-0x80
   \   000098   78..         MOV     R0,#?V6
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   12....       LCALL   ?Subroutine86 & 0xFFFF
   1940            }
   \                     ??CrossCallReturnLabel_275:
   \   0000A5   FD           MOV     R5,A
   \   0000A6   7C84         MOV     R4,#-0x7c
   \   0000A8   AA..         MOV     R2,?V0
   \   0000AA   AB..         MOV     R3,?V1
   \   0000AC   85..82       MOV     DPL,?V2
   \   0000AF   85..83       MOV     DPH,?V3
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   1941          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BC   7411         MOV     A,#0x11
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   02....       LJMP    ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1942          
   1943          /*********************************************************************
   1944           * @fn          ZDO_ProcessUserDescSet
   1945           *
   1946           * @brief       This function finishes the processing of the User
   1947           *              Descriptor Set and generates the response.
   1948           *
   1949           * @param       inMsg - incoming message (request)
   1950           *
   1951           * @return      none
   1952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1953          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1954          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1955            uint8 *msg;
   1956            uint16 aoi;
   1957            UserDescriptorFormat_t userDesc;
   1958            uint8 outMsg[3];
   1959            uint8 status;
   1960          
   1961            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000011   35..         ADDC    A,?V3
   \   000013   12....       LCALL   ?Subroutine60 & 0xFFFF
   1962            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_105:
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   FB           MOV     R3,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2A           ADD     A,R2
   \   00001C   FE           MOV     R6,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   FF           MOV     R7,A
   1963          
   1964            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1965            {
   1966              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   9410         SUBB    A,#0x10
   \   000039   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV     ?V0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E5..         MOV     A,?V0
   \   000049   12....       LCALL   ?Subroutine38 & 0xFFFF
   1967              msg ++;  // increment one for the length field
   1968          
   1969              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_59:
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A982         MOV     R1,DPL
   \   000050   AA83         MOV     R2,DPH
   \   000052   89..         MOV     ?V4,R1
   \   000054   8A..         MOV     ?V5,R2
   \   000056   75..00       MOV     ?V6,#0x0
   \   000059   78..         MOV     R0,#?V4
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   7407         MOV     A,#0x7
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FC           MOV     R4,A
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7408         MOV     A,#0x8
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   AA82         MOV     R2,DPL
   \   00006E   AB83         MOV     R3,DPH
   \   000070   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   1970              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000078                ; Setup parameters for call to function osal_nv_write
   \   000078   7404         MOV     A,#0x4
   \   00007A   12....       LCALL   ?XSTACK_DISP100_8
   \   00007D   88..         MOV     ?V4,R0
   \   00007F   89..         MOV     ?V5,R1
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   75..11       MOV     ?V4,#0x11
   \   000089   75..00       MOV     ?V5,#0x0
   \   00008C   78..         MOV     R0,#?V4
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C00         MOV     R4,#0x0
   \   000093   7D00         MOV     R5,#0x0
   \   000095   7A81         MOV     R2,#-0x7f
   \   000097   7B00         MOV     R3,#0x0
   \   000099   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00009C   7404         MOV     A,#0x4
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   1971              if ( userDesc.len != 0 )
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000AA   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1972              {
   1973                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   D2E4         SETB    0xE0 /* A   */.4
   \   0000AF   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1974              }
   1975              else
   1976              {
   1977                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B4   F0           MOVX    @DPTR,A
   1978              }
   1979          
   1980              status = ZDP_SUCCESS;
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   E4           CLR     A
   \   0000BC   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1981            }
   1982            else
   1983            {
   1984              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C6   F0           MOVX    @DPTR,A
   1985            }
   1986          
   1987            outMsg[0] = status;
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C0E0         PUSH    A
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   D0E0         POP     A
   \   0000D1   F0           MOVX    @DPTR,A
   1988            outMsg[1] = LO_UINT16( aoi );
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F0           MOVX    @DPTR,A
   1989            outMsg[2] = LO_UINT16( aoi );
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   EE           MOV     A,R6
   \   0000DF   F0           MOVX    @DPTR,A
   1990          
   1991            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1992                         inMsg->SecurityUse );
   \   0000E0                ; Setup parameters for call to function ZDP_SendData
   \   0000E0   E5..         MOV     A,?V2
   \   0000E2   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000E5   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   F5..         MOV     ?V1,A
   \   0000EB   78..         MOV     R0,#?V1
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   7402         MOV     A,#0x2
   \   0000F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F5   88..         MOV     ?V4,R0
   \   0000F7   89..         MOV     ?V5,R1
   \   0000F9   78..         MOV     R0,#?V4
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE   75..14       MOV     ?V4,#0x14
   \   000101   75..80       MOV     ?V5,#-0x80
   \   000104   78..         MOV     R0,#?V4
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   7903         MOV     R1,#0x3
   \   00010B   E5..         MOV     A,?V2
   \   00010D   2402         ADD     A,#0x2
   \   00010F   FC           MOV     R4,A
   \   000110   E4           CLR     A
   \   000111   35..         ADDC    A,?V3
   \   000113   FD           MOV     R5,A
   \   000114   E5..         MOV     A,?V2
   \   000116   240F         ADD     A,#0xf
   \   000118   FA           MOV     R2,A
   \   000119   E4           CLR     A
   \   00011A   35..         ADDC    A,?V3
   \   00011C   FB           MOV     R3,A
   \   00011D   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   000120   7405         MOV     A,#0x5
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   1993          }
   \   000125   7415         MOV     A,#0x15
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012A   7F07         MOV     R7,#0x7
   \   00012C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_ProcessDeviceAnnce
   1997           *
   1998           * @brief       This function processes a device annouce message.
   1999           *
   2000           * @param       inMsg - incoming message
   2001           *
   2002           * @return      none
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine154_0
   \   000004                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   2006            ZDO_DeviceAnnce_t Annce;
   2007            AddrMgrEntry_t addrEntry;
   2008            uint8 parentExt[Z_EXTADDR_LEN];
   2009          
   2010            // Parse incoming message
   2011            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay; Banked call to: ZDO_ParseDeviceAnnce
   2012          
   2013            if ( ZSTACK_END_DEVICE_BUILD )
   \   000015   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6402         XRL     A,#0x2
   \   00001B   7033         JNZ     ??ZDO_ProcessDeviceAnnce_0
   2014            {
   2015              // Make sure the message didn't come from myself - end device only
   2016              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   00001D                ; Setup parameters for call to function sAddrExtCmp
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   \   000026                ; Setup parameters for call to function NLME_GetExtAddr
   \   000026   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000029   EE           MOV     A,R6
   \   00002A   FC           MOV     R4,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FD           MOV     R5,A
   \   00002D   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000030   E9           MOV     A,R1
   \   000031   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000033                ; Setup parameters for call to function NLME_GetShortAddr
   \   000033   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000036   8A..         MOV     ?V2,R2
   \   000038   8B..         MOV     ?V3,R3
   \   00003A   A8..         MOV     R0,?V2
   \   00003C   A9..         MOV     R1,?V3
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   68           XRL     A,R0
   \   000046   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2017              {
   2018                return;
   2019              }
   2020            }
   2021          
   2022          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2023            // Clean up the neighbor table
   2024            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000050                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000050   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay; Banked call to: nwkNeighborRemoveAllStranded
   2025          
   2026            // If address conflict is detected, no need to update the address manager
   2027            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000053                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00005B   12....       LCALL   ??NLME_CheckNewAddrSet?relay; Banked call to: NLME_CheckNewAddrSet
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2028            {
   2029              return;
   2030            }
   2031          #endif
   2032          
   2033          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2034            // Check for parent's address
   2035            NLME_GetCoordExtAddr( parentExt );
   \   000066                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000066   7418         MOV     A,#0x18
   \   000068   12....       LCALL   ?XSTACK_DISP101_8
   \   00006B   12....       LCALL   ??NLME_GetCoordExtAddr?relay; Banked call to: NLME_GetCoordExtAddr
   2036            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00006E                ; Setup parameters for call to function sAddrExtCmp
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   AC82         MOV     R4,DPL
   \   000075   AD83         MOV     R5,DPH
   \   000077   7418         MOV     A,#0x18
   \   000079   12....       LCALL   ?XSTACK_DISP101_8
   \   00007C   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00007F   E9           MOV     A,R1
   \   000080   602C         JZ      ??ZDO_ProcessDeviceAnnce_3
   2037            {
   2038              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000082                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000082   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000085   8A..         MOV     ?V2,R2
   \   000087   8B..         MOV     ?V3,R3
   \   000089   A8..         MOV     R0,?V2
   \   00008B   A9..         MOV     R1,?V3
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   68           XRL     A,R0
   \   000095   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   00009A   6012         JZ      ??ZDO_ProcessDeviceAnnce_3
   2039              {
   2040                // Set the Parent's MAC's new short address
   2041                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00009C   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00009F   90....       MOV     DPTR,#_NIB + 23
   \   0000A2   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   2042                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_301:
   \   0000A5                ; Setup parameters for call to function ZMacSetReq
   \   0000A5   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000A7   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000A9   794B         MOV     R1,#0x4b
   \   0000AB   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   2043              }
   2044            }
   2045          
   2046            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000AE   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6007         JZ      ??ZDO_ProcessDeviceAnnce_5
   \   0000B4   6401         XRL     A,#0x1
   \   0000B6   6003         JZ      $+5
   \   0000B8   02....       LJMP    ??ZDO_ProcessDeviceAnnce_6 & 0xFFFF
   2047            {
   2048              // If the device annce comes from a end device child that has moved
   2049              // to another parent, remove it from associated device list
   2050          
   2051              // If the dev annce is coming from other device's children,
   2052              // (The dev annce from its own children shall be unicast to itself,
   2053              // So check the mac destination address)
   2054              // Remove it from the associated device list. If it is not
   2055              // a child, no action will be taken in AssocRemove() anyway.
   2056              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   2411         ADD     A,#0x11
   \   0000BF   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   0000C2   C082         PUSH    DPL
   \   0000C4   C083         PUSH    DPH
   \   0000C6                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000C6   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   0000C9   8A..         MOV     ?V0,R2
   \   0000CB   8B..         MOV     ?V1,R3
   \   0000CD   D083         POP     DPH
   \   0000CF   D082         POP     DPL
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   65..         XRL     A,?V0
   \   0000D4   7004         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   65..         XRL     A,?V1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000DA   6050         JZ      ??ZDO_ProcessDeviceAnnce_8
   2057              {
   2058                associated_devices_t *dev_ptr;
   2059          
   2060                // If it's an end device child
   2061                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000DC                ; Setup parameters for call to function AssocGetWithExt
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   AA82         MOV     R2,DPL
   \   0000E3   AB83         MOV     R3,DPH
   \   0000E5   12....       LCALL   ??AssocGetWithExt?relay; Banked call to: AssocGetWithExt
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
   2062                if ( dev_ptr )
   \   0000EC   E582         MOV     A,DPL
   \   0000EE   4583         ORL     A,DPH
   \   0000F0   601C         JZ      ??ZDO_ProcessDeviceAnnce_9
   2063                {
   2064                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2065                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F8           MOV     R0,A
   \   0000F8   7401         MOV     A,#0x1
   \   0000FA   68           XRL     A,R0
   \   0000FB   6005         JZ      ??ZDO_ProcessDeviceAnnce_10
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   68           XRL     A,R0
   \   000100   700C         JNZ     ??ZDO_ProcessDeviceAnnce_9
   2066                  {
   2067                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   000102                ; Setup parameters for call to function AssocRemove
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   AA82         MOV     R2,DPL
   \   000109   AB83         MOV     R3,DPH
   \   00010B   12....       LCALL   ??AssocRemove?relay  ; Banked call to: AssocRemove
   2068                  }
   2069                }
   2070          
   2071          #if defined ( ZIGBEE_CHILD_AGING )
   2072                // Remove the address from the SrcMatch table,
   2073                // just in case the device was aged out by Child Management Table process
   2074                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2075                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   00010E   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   000111   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000114   6016         JZ      ??ZDO_ProcessDeviceAnnce_8
   \   000116   90....       MOV     DPTR,#zgChildAgingEnable
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   6401         XRL     A,#0x1
   \   00011C   700E         JNZ     ??ZDO_ProcessDeviceAnnce_8
   2076                {
   2077                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   00011E                ; Setup parameters for indirect call
   \   00011E   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   2078                }
   2079          #endif // ZIGBEE_CHILD_AGING
   2080              }
   \                     ??CrossCallReturnLabel_289:
   \   000121   90....       MOV     DPTR,#pNwkNotMyChildListDelete + 1
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F583         MOV     DPH,A
   \   000127   8882         MOV     DPL,R0
   \   000129   12....       LCALL   ?CALL_IND
   2081          
   2082              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   00012C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00012C   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00012F   8A..         MOV     ?V0,R2
   \   000131   8B..         MOV     ?V1,R3
   \   000133   A8..         MOV     R0,?V0
   \   000135   A9..         MOV     R1,?V1
   \   000137   85..82       MOV     DPL,?XSP + 0
   \   00013A   85..83       MOV     DPH,?XSP + 1
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   68           XRL     A,R0
   \   00013F   7003         JNZ     ??ZDO_ProcessDeviceAnnce_11
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_11:
   \   000144   6011         JZ      ??ZDO_ProcessDeviceAnnce_6
   2083              {
   2084                // If an associated device is found with matched extended Address,
   2085                // update its short address
   2086                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000146                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000146   7402         MOV     A,#0x2
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00014E   12....       LCALL   ??AssocChangeNwkAddr?relay; Banked call to: AssocChangeNwkAddr
   \   000151   E9           MOV     A,R1
   \   000152   6003         JZ      ??ZDO_ProcessDeviceAnnce_6
   2087                {
   2088                  // Set event to save NV
   2089                  ZDApp_NVUpdate();
   \   000154                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000154   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   2090                }
   2091              }
   2092            }
   2093          
   2094            // Update the neighbor table
   2095            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   000157                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000157   7402         MOV     A,#0x2
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00015F   12....       LCALL   ??nwkNeighborUpdateNwkAddr?relay; Banked call to: nwkNeighborUpdateNwkAddr
   2096          
   2097            // Assume that the device has moved, remove existing routing entries
   2098            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   000162                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000162   7900         MOV     R1,#0x0
   \   000164   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000167   12....       LCALL   ??RTG_RemoveRtgEntry?relay; Banked call to: RTG_RemoveRtgEntry
   2099          
   2100          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2101          
   2102            // Fill in the extended address in address manager if we don't have it already.
   2103            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   00016A   740B         MOV     A,#0xb
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   E4           CLR     A
   \   000170   12....       LCALL   ?Subroutine42 & 0xFFFF
   2104            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_75:
   \   000173   F8           MOV     R0,A
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F9           MOV     R1,A
   \   000177   740C         MOV     A,#0xc
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   2105            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_302:
   \   00017F                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00017F   740B         MOV     A,#0xb
   \   000181   12....       LCALL   ?XSTACK_DISP101_8
   \   000184   12....       LCALL   ??AddrMgrEntryLookupNwk?relay; Banked call to: AddrMgrEntryLookupNwk
   \   000187   E9           MOV     A,R1
   \   000188   603F         JZ      ??ZDO_ProcessDeviceAnnce_12
   2106            {
   2107              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   00018A                ; Setup parameters for call to function osal_memset
   \   00018A   7C08         MOV     R4,#0x8
   \   00018C   7D00         MOV     R5,#0x0
   \   00018E   7900         MOV     R1,#0x0
   \   000190   7418         MOV     A,#0x18
   \   000192   12....       LCALL   ?XSTACK_DISP101_8
   \   000195   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2108              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000198                ; Setup parameters for call to function sAddrExtCmp
   \   000198   740E         MOV     A,#0xe
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   AC82         MOV     R4,DPL
   \   00019F   AD83         MOV     R5,DPH
   \   0001A1   7418         MOV     A,#0x18
   \   0001A3   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A6   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   0001A9   E9           MOV     A,R1
   \   0001AA   601D         JZ      ??ZDO_ProcessDeviceAnnce_12
   2109              {
   2110                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0001AC                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001AC   7402         MOV     A,#0x2
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   AC82         MOV     R4,DPL
   \   0001B3   AD83         MOV     R5,DPH
   \   0001B5   740E         MOV     A,#0xe
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   AA82         MOV     R2,DPL
   \   0001BC   AB83         MOV     R3,DPH
   \   0001BE   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   2111                AddrMgrEntryUpdate( &addrEntry );
   \   0001C1                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001C1   740B         MOV     A,#0xb
   \   0001C3   12....       LCALL   ?XSTACK_DISP101_8
   \   0001C6   12....       LCALL   ??AddrMgrEntryUpdate?relay; Banked call to: AddrMgrEntryUpdate
   2112              }
   2113            }
   2114          
   2115            // Update the short address in address manager if it's been changed
   2116            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_12:
   \   0001C9                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   AC82         MOV     R4,DPL
   \   0001D0   AD83         MOV     R5,DPH
   \   0001D2   740E         MOV     A,#0xe
   \   0001D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D7   AA82         MOV     R2,DPL
   \   0001D9   AB83         MOV     R3,DPH
   \   0001DB   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   2117            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   0001DE                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   0001DE   740B         MOV     A,#0xb
   \   0001E0   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E3   12....       LCALL   ??AddrMgrEntryLookupExt?relay; Banked call to: AddrMgrEntryLookupExt
   \   0001E6   E9           MOV     A,R1
   \   0001E7   602A         JZ      ??ZDO_ProcessDeviceAnnce_2
   2118            {
   2119              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   0001E9   740C         MOV     A,#0xc
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   0001F1   85..82       MOV     DPL,?XSP + 0
   \   0001F4   85..83       MOV     DPH,?XSP + 1
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   68           XRL     A,R0
   \   0001F9   7003         JNZ     ??ZDO_ProcessDeviceAnnce_13
   \   0001FB   A3           INC     DPTR
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_13:
   \   0001FE   6013         JZ      ??ZDO_ProcessDeviceAnnce_2
   2120              {
   2121                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000200   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000203   740C         MOV     A,#0xc
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   2122                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_303:
   \   00020B                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00020B   740B         MOV     A,#0xb
   \   00020D   12....       LCALL   ?XSTACK_DISP101_8
   \   000210   12....       LCALL   ??AddrMgrEntryUpdate?relay; Banked call to: AddrMgrEntryUpdate
   2123              }
   2124            }
   2125          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000213   7420         MOV     A,#0x20
   \   000215   02....       LJMP    ?Subroutine3 & 0xFFFF
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_BuildSimpleDescBuf
   2129           *
   2130           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2131           *
   2132           * @param       buf  - pointer to a byte array big enough for data.
   2133           * @param       desc - SimpleDescriptionFormat_t *
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2139            byte cnt;
   2140            uint16 *ptr;
   2141          
   2142            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine71 & 0xFFFF
   2143            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_119:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine20 & 0xFFFF
   2144            *buf++ = LO_UINT16( desc->AppProfId );
   2145            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_26:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   E4           CLR     A
   \   00001D   3D           ADDC    A,R5
   \   00001E   F9           MOV     R1,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   12....       LCALL   ?Subroutine20 & 0xFFFF
   2146            *buf++ = LO_UINT16( desc->AppDeviceId );
   2147          
   2148            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_27:
   \   000026   8C82         MOV     DPL,R4
   \   000028   8D83         MOV     DPH,R5
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C4           SWAP    A
   \   000031   54F0         ANL     A,#0xf0
   \   000033   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   2149          
   2150            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_373:
   \   000036   EC           MOV     A,R4
   \   000037   2406         ADD     A,#0x6
   \   000039   F8           MOV     R0,A
   \   00003A   E4           CLR     A
   \   00003B   3D           ADDC    A,R5
   \   00003C   F9           MOV     R1,A
   \   00003D   88..         MOV     ?V0,R0
   \   00003F   89..         MOV     ?V1,R1
   \   000041   8882         MOV     DPL,R0
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ?Subroutine112 & 0xFFFF
   2151            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_374:
   \   000048   8C82         MOV     DPL,R4
   \   00004A   8D83         MOV     DPH,R5
   \   00004C   12....       LCALL   ?Subroutine83 & 0xFFFF
   2152            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_139:
   \   00004F   8010         SJMP    ??ZDO_BuildSimpleDescBuf_0
   2153            {
   2154              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine73 & 0xFFFF
   2155              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_123:
   \   000059   12....       LCALL   ?Subroutine33 & 0xFFFF
   2156            }
   \                     ??CrossCallReturnLabel_50:
   \   00005C   5001         JNC     ??ZDO_BuildSimpleDescBuf_2
   \   00005E   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00005F   05..         INC     ?V2
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A882         MOV     R0,DPL
   \   000068   A983         MOV     R1,DPH
   \   00006A   85..82       MOV     DPL,?V0
   \   00006D   85..83       MOV     DPH,?V1
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V3,A
   \   000073   E5..         MOV     A,?V2
   \   000075   C3           CLR     C
   \   000076   95..         SUBB    A,?V3
   \   000078   40D7         JC      ??ZDO_BuildSimpleDescBuf_1
   2157          
   2158            *buf++ = desc->AppNumOutClusters;
   \   00007A   EC           MOV     A,R4
   \   00007B   2409         ADD     A,#0x9
   \   00007D   FE           MOV     R6,A
   \   00007E   E4           CLR     A
   \   00007F   3D           ADDC    A,R5
   \   000080   FF           MOV     R7,A
   \   000081   8E..         MOV     ?V0,R6
   \   000083   8F..         MOV     ?V1,R7
   \   000085   8E82         MOV     DPL,R6
   \   000087   F583         MOV     DPH,A
   \   000089   12....       LCALL   ?Subroutine73 & 0xFFFF
   2159            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_124:
   \   00008C   8C82         MOV     DPL,R4
   \   00008E   8D83         MOV     DPH,R5
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine83 & 0xFFFF
   2160            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_140:
   \   000096   8010         SJMP    ??ZDO_BuildSimpleDescBuf_3
   2161            {
   2162              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   12....       LCALL   ?Subroutine71 & 0xFFFF
   2163              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_120:
   \   0000A0   12....       LCALL   ?Subroutine33 & 0xFFFF
   2164            }
   \                     ??CrossCallReturnLabel_51:
   \   0000A3   5001         JNC     ??ZDO_BuildSimpleDescBuf_5
   \   0000A5   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000A6   05..         INC     ?V2
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   0000A8   85..82       MOV     DPL,?V0
   \   0000AB   85..83       MOV     DPH,?V1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   E5..         MOV     A,?V2
   \   0000B2   C3           CLR     C
   \   0000B3   98           SUBB    A,R0
   \   0000B4   40E2         JC      ??ZDO_BuildSimpleDescBuf_4
   2165          }
   \   0000B6   80..         SJMP    ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00000A   75..00       MOV     ?V2,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000007   EE           MOV     A,R6
   \   000008   2402         ADD     A,#0x2
   \   00000A   FE           MOV     R6,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine167_0
   \   000001                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET
   2166          
   2167          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2168          /*********************************************************************
   2169           * @fn      ZDO_MatchEndDeviceBind()
   2170           *
   2171           * @brief
   2172           *
   2173           *   Called to match end device binding requests
   2174           *
   2175           * @param  bindReq  - binding request information
   2176           * @param  SecurityUse - Security enable/disable
   2177           *
   2178           * @return  none
   2179           */
   2180          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2181          {
   2182            zAddrType_t dstAddr;
   2183            uint8 sendRsp = FALSE;
   2184            uint8 status;
   2185          
   2186            // Is this the first request?
   2187            if ( matchED == NULL )
   2188            {
   2189              // Create match info structure
   2190              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2191              if ( matchED )
   2192              {
   2193                // Clear the structure
   2194                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2195          
   2196                // Copy the first request's information
   2197                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2198                {
   2199                  status = ZDP_NO_ENTRY;
   2200                  sendRsp = TRUE;
   2201                }
   2202              }
   2203              else
   2204              {
   2205                status = ZDP_NO_ENTRY;
   2206                sendRsp = TRUE;
   2207              }
   2208          
   2209              if ( !sendRsp )
   2210              {
   2211                // Set into the correct state
   2212                matchED->state = ZDMATCH_WAIT_REQ;
   2213          
   2214                // Setup the timeout
   2215                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2216              }
   2217            }
   2218            else
   2219            {
   2220                matchED->state = ZDMATCH_SENDING_BINDS;
   2221          
   2222                // Copy the 2nd request's information
   2223                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2224                {
   2225                  status = ZDP_NO_ENTRY;
   2226                  sendRsp = TRUE;
   2227                }
   2228          
   2229                // Make a source match for ed1
   2230                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2231                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2232                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2233                if ( matchED->ed1numMatched )
   2234                {
   2235                  // Save the match list
   2236                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2237                  if ( matchED->ed1Matched )
   2238                  {
   2239                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2240                  }
   2241                  else
   2242                  {
   2243                    // Allocation error, stop
   2244                    status = ZDP_NO_ENTRY;
   2245                    sendRsp = TRUE;
   2246                  }
   2247                }
   2248          
   2249                // Make a source match for ed2
   2250                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2251                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2252                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2253                if ( matchED->ed2numMatched )
   2254                {
   2255                  // Save the match list
   2256                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2257                  if ( matchED->ed2Matched )
   2258                  {
   2259                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2260                  }
   2261                  else
   2262                  {
   2263                    // Allocation error, stop
   2264                    status = ZDP_NO_ENTRY;
   2265                    sendRsp = TRUE;
   2266                  }
   2267                }
   2268          
   2269                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2270                {
   2271                  // Do the first unbind/bind state
   2272                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2273                }
   2274                else
   2275                {
   2276                  status = ZDP_NO_MATCH;
   2277                  sendRsp = TRUE;
   2278                }
   2279            }
   2280          
   2281            if ( sendRsp )
   2282            {
   2283              // send response to this requester
   2284              dstAddr.addrMode = Addr16Bit;
   2285              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2286              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2287          
   2288              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2289              {
   2290                // send response to first requester
   2291                dstAddr.addrMode = Addr16Bit;
   2292                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2293                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2294              }
   2295          
   2296              // Process ended - release memory used
   2297              ZDO_RemoveMatchMemory();
   2298            }
   2299          }
   2300          
   2301          /*********************************************************************
   2302           * @fn      ZDO_RemoveMatchMemory()
   2303           *
   2304           * @brief   Called to clear the memory used for the end device bind.
   2305           *
   2306           * @param  none
   2307           *
   2308           * @return  none
   2309           */
   2310          static void ZDO_RemoveMatchMemory( void )
   2311          {
   2312            if ( matchED != NULL )
   2313            {
   2314              if ( matchED->ed2Matched != NULL )
   2315              {
   2316                osal_mem_free( matchED->ed2Matched );
   2317              }
   2318              if ( matchED->ed1Matched != NULL )
   2319              {
   2320                osal_mem_free( matchED->ed1Matched );
   2321              }
   2322              if ( matchED->ed1.inClusters != NULL )
   2323              {
   2324                osal_mem_free( matchED->ed1.inClusters );
   2325              }
   2326              if ( matchED->ed1.outClusters != NULL )
   2327              {
   2328                osal_mem_free( matchED->ed1.outClusters );
   2329              }
   2330              if ( matchED->ed2.inClusters != NULL )
   2331              {
   2332                osal_mem_free( matchED->ed2.inClusters );
   2333              }
   2334              if ( matchED->ed2.outClusters != NULL )
   2335              {
   2336                osal_mem_free( matchED->ed2.outClusters );
   2337              }
   2338          
   2339              osal_mem_free( matchED );
   2340              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2341            }
   2342          }
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_CopyMatchInfo()
   2346           *
   2347           * @brief   Called to copy memory used for the end device bind.
   2348           *
   2349           * @param  srcReq - source information
   2350           * @param  dstReq - destination location
   2351           *
   2352           * @return  TRUE if copy was successful.
   2353           */
   2354          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2355          {
   2356            uint8 allOK = TRUE;
   2357          
   2358            // Copy bind information into the match info structure
   2359            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2360          
   2361            // Initialize the destination cluster pointers
   2362            destReq->inClusters = NULL;
   2363            destReq->outClusters = NULL;
   2364          
   2365            // Copy input cluster IDs
   2366            if ( srcReq->numInClusters )
   2367            {
   2368              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2369              if ( destReq->inClusters )
   2370              {
   2371                // Copy the clusters
   2372                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2373                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2374              }
   2375              else
   2376              {
   2377                allOK = FALSE;
   2378              }
   2379            }
   2380          
   2381            // Copy output cluster IDs
   2382            if ( srcReq->numOutClusters )
   2383            {
   2384              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2385              if ( destReq->outClusters )
   2386              {
   2387                // Copy the clusters
   2388                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2389                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2390              }
   2391              else
   2392              {
   2393                allOK = FALSE;
   2394              }
   2395            }
   2396          
   2397            if ( allOK == FALSE )
   2398            {
   2399              if ( destReq->inClusters != NULL )
   2400              {
   2401                osal_mem_free( destReq->inClusters );
   2402              }
   2403              if ( destReq->outClusters != NULL )
   2404              {
   2405                osal_mem_free( destReq->outClusters );
   2406              }
   2407            }
   2408          
   2409            return ( allOK );
   2410          }
   2411          
   2412          /*********************************************************************
   2413           * @fn      ZDMatchSendState()
   2414           *
   2415           * @brief   State machine for the End device match message algorithm.
   2416           *
   2417           * @param  reason - state of algoritm
   2418           * @param  status - initial message status
   2419           * @param  TransSeq - next transaction sequence number
   2420           *
   2421           * @return  FALSE if error and we are not currently matching, TRUE
   2422           *          if success.
   2423           */
   2424          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2425          {
   2426            uint8 *dstIEEEAddr = NULL;
   2427            uint8 dstEP = 0xFF;
   2428            zAddrType_t dstAddr;
   2429            zAddrType_t destinationAddr;
   2430            uint16 msgType;
   2431            uint16 clusterID = 0xFFFF;
   2432            ZDEndDeviceBind_t *ed = NULL;
   2433            uint8 rspStatus = ZDP_SUCCESS;
   2434          
   2435            if ( matchED == NULL )
   2436            {
   2437              return ( FALSE );
   2438            }
   2439          
   2440            // Check sequence number
   2441            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2442            {
   2443              if ( TransSeq != matchED->transSeq )
   2444              {
   2445                return( FALSE ); // ignore the message
   2446              }
   2447            }
   2448          
   2449            // turn off timer
   2450            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2451          
   2452            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2453            {
   2454              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2455            }
   2456          
   2457            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2458            {
   2459              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2460          
   2461              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2462              {
   2463                rspStatus = status;
   2464              }
   2465            }
   2466            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2467            {
   2468              if ( status == ZDP_SUCCESS )
   2469              {
   2470                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2471              }
   2472              else
   2473              {
   2474                matchED->sending = ZDMATCH_SENDING_BIND;
   2475              }
   2476            }
   2477          
   2478            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2479            {
   2480              // Move to the next cluster ID
   2481              if ( matchED->ed1numMatched )
   2482              {
   2483                matchED->ed1numMatched--;
   2484              }
   2485              else if ( matchED->ed2numMatched )
   2486              {
   2487                matchED->ed2numMatched--;
   2488              }
   2489            }
   2490          
   2491            // What message do we send now
   2492            if ( matchED->ed1numMatched )
   2493            {
   2494              ed = &(matchED->ed1);
   2495              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2496              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2497              dstEP = matchED->ed2.endpoint;
   2498            }
   2499            else if ( matchED->ed2numMatched )
   2500            {
   2501              ed = &(matchED->ed2);
   2502              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2503              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2504              dstEP = matchED->ed1.endpoint;
   2505            }
   2506          
   2507            dstAddr.addrMode = Addr16Bit;
   2508          
   2509            // Send the next message
   2510            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2511            {
   2512              // Send unbind/bind message to source
   2513              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2514              {
   2515                msgType = Unbind_req;
   2516              }
   2517              else
   2518              {
   2519                msgType = Bind_req;
   2520              }
   2521          
   2522              dstAddr.addr.shortAddr = ed->srcAddr;
   2523          
   2524              // Save off the transaction sequence number
   2525              matchED->transSeq = ZDP_TransID;
   2526          
   2527              destinationAddr.addrMode = Addr64Bit;
   2528              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2529          
   2530              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2531                  &destinationAddr, dstEP, ed->SecurityUse );
   2532          
   2533              // Set timeout for response
   2534              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2535            }
   2536            else
   2537            {
   2538              // Send the response messages to requesting devices
   2539              // send response to first requester
   2540              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2541              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2542          
   2543              // send response to second requester
   2544              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2545              {
   2546                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2547                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2548              }
   2549          
   2550              // Process ended - release memory used
   2551              ZDO_RemoveMatchMemory();
   2552            }
   2553          
   2554            return ( TRUE );
   2555          }
   2556          
   2557          /*********************************************************************
   2558           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2559           *
   2560           * @brief   End device bind timeout.
   2561           *
   2562           * @param  none
   2563           *
   2564           * @return  none
   2565           */
   2566          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2567          {
   2568            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2569          }
   2570          #endif // ZG_BUILD_COORDINATOR_TYPE
   2571          
   2572          /*********************************************************************
   2573           * ZDO MESSAGE PARSING API FUNCTIONS
   2574           */
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseEndDeviceBindReq
   2578           *
   2579           * @brief       This function parses the End_Device_Bind_req message.
   2580           *
   2581           *     NOTE:  The clusters lists in bindReq are allocated in this
   2582           *            function and must be freed by that calling function.
   2583           *
   2584           * @param       inMsg  - incoming message (request)
   2585           * @param       bindReq - pointer to place to parse message to
   2586           *
   2587           * @return      none
   2588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2589          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2591            uint8 *msg;
   2592          
   2593            // Parse the message
   2594            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   00000F   12....       LCALL   ?Subroutine44 & 0xFFFF
   2595            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_79:
   \   000012   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   2596            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_304:
   \   00001E   EA           MOV     A,R2
   \   00001F   240E         ADD     A,#0xe
   \   000021   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   2597            msg = inMsg->asdu;
   \   000026   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000029   12....       LCALL   ?Subroutine64 & 0xFFFF
   2598          
   2599            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_112:
   \   00002C   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   12....       LCALL   ?Subroutine14 & 0xFFFF
   2600            msg += 2;
   \                     ??CrossCallReturnLabel_427:
   \   000036   5002         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000038   05..         INC     ?V3
   2601          
   2602            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003A                ; Setup parameters for call to function sAddrExtCpy
   \   00003A   FC           MOV     R4,A
   \   00003B   AD..         MOV     R5,?V3
   \   00003D   EE           MOV     A,R6
   \   00003E   2406         ADD     A,#0x6
   \   000040   FA           MOV     R2,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2603            msg += Z_EXTADDR_LEN;
   \   000047   E5..         MOV     A,?V2
   \   000049   2408         ADD     A,#0x8
   \   00004B   F5..         MOV     ?V2,A
   \   00004D   5002         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   00004F   05..         INC     ?V3
   2604          
   2605            bindReq->endpoint = *msg++;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000051   F582         MOV     DPL,A
   \   000053   85..83       MOV     DPH,?V3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C0E0         PUSH    A
   \   000059   EE           MOV     A,R6
   \   00005A   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00005D   3F           ADDC    A,R7
   \   00005E   F583         MOV     DPH,A
   \   000060   D0E0         POP     A
   \   000062   12....       LCALL   ?Subroutine19 & 0xFFFF
   2606            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_24:
   \   000065   F8           MOV     R0,A
   \   000066   EE           MOV     A,R6
   \   000067   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00006A   3F           ADDC    A,R7
   \   00006B   F583         MOV     DPH,A
   \   00006D   E8           MOV     A,R0
   \   00006E   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   2607            msg += 2;
   \                     ??CrossCallReturnLabel_429:
   \   000071   5002         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   000073   05..         INC     ?V3
   2608          
   2609            bindReq->inClusters = NULL;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000075   EE           MOV     A,R6
   \   000076   2412         ADD     A,#0x12
   \   000078   F5..         MOV     ?V4,A
   \   00007A   E4           CLR     A
   \   00007B   3F           ADDC    A,R7
   \   00007C   F5..         MOV     ?V5,A
   \   00007E   85..82       MOV     DPL,?V4
   \   000081   F583         MOV     DPH,A
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   F0           MOVX    @DPTR,A
   2610            bindReq->outClusters = NULL;
   \   000087   EE           MOV     A,R6
   \   000088   2415         ADD     A,#0x15
   \   00008A   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine32 & 0xFFFF
   2611          
   2612            if ((bindReq->numInClusters = *msg++) &&
   2613                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_48:
   \   000093   8582..       MOV     ?V2,DPL
   \   000096   8583..       MOV     ?V3,DPH
   \   000099   EE           MOV     A,R6
   \   00009A   2411         ADD     A,#0x11
   \   00009C   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00009F   E8           MOV     A,R0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   6033         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000A3                ; Setup parameters for call to function osal_mem_alloc
   \   0000A3   28           ADD     A,R0
   \   0000A4   FA           MOV     R2,A
   \   0000A5   E4           CLR     A
   \   0000A6   33           RLC     A
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000AB   85..82       MOV     DPL,?V4
   \   0000AE   85..83       MOV     DPH,?V5
   \   0000B1   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B4   85..82       MOV     DPL,?V4
   \   0000B7   85..83       MOV     DPH,?V5
   \   0000BA   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000BD   EC           MOV     A,R4
   \   0000BE   4D           ORL     A,R5
   \   0000BF   6015         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000C1                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C1   AA..         MOV     R2,?V2
   \   0000C3   AB..         MOV     R3,?V3
   \   0000C5   85..82       MOV     DPL,?V0
   \   0000C8   85..83       MOV     DPH,?V1
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   0000D0   8A..         MOV     ?V2,R2
   \   0000D2   8B..         MOV     ?V3,R3
   \   0000D4   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2616            }
   2617            else
   2618            {
   2619              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   E4           CLR     A
   \   0000DD   F0           MOVX    @DPTR,A
   2620            }
   2621          
   2622            if ((bindReq->numOutClusters = *msg++) &&
   2623                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000DE   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000E1   EE           MOV     A,R6
   \   0000E2   2414         ADD     A,#0x14
   \   0000E4   FE           MOV     R6,A
   \   0000E5   5001         JNC     ??ZDO_ParseEndDeviceBindReq_5
   \   0000E7   0F           INC     R7
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   0000E8   8E82         MOV     DPL,R6
   \   0000EA   8F83         MOV     DPH,R7
   \   0000EC   E8           MOV     A,R0
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   602D         JZ      ??ZDO_ParseEndDeviceBindReq_6
   \   0000F0                ; Setup parameters for call to function osal_mem_alloc
   \   0000F0   28           ADD     A,R0
   \   0000F1   FA           MOV     R2,A
   \   0000F2   E4           CLR     A
   \   0000F3   33           RLC     A
   \   0000F4   FB           MOV     R3,A
   \   0000F5   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000F8   85..82       MOV     DPL,?V8
   \   0000FB   85..83       MOV     DPH,?V9
   \   0000FE   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000101   85..82       MOV     DPL,?V8
   \   000104   85..83       MOV     DPH,?V9
   \   000107   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00010A   EC           MOV     A,R4
   \   00010B   4D           ORL     A,R5
   \   00010C   600F         JZ      ??ZDO_ParseEndDeviceBindReq_6
   2624            {
   2625              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00010E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00010E   AA..         MOV     R2,?V2
   \   000110   AB..         MOV     R3,?V3
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   12....       LCALL   ??ZDO_ConvertOTAClusters?relay; Banked call to: ZDO_ConvertOTAClusters
   \   00011B   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_7
   2626            }
   2627            else
   2628            {
   2629              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   E4           CLR     A
   \   000122   F0           MOVX    @DPTR,A
   2630            }
   2631          }
   \                     ??ZDO_ParseEndDeviceBindReq_7:
   \   000123                REQUIRE ?Subroutine7
   \   000123                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine171_0
   \   000001                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V2,DPL
   \   000007   8583..       MOV     ?V3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine180_0
   \   000004                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V2,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine181_0
   \   000006                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseBindUnbindReq
   2635           *
   2636           * @brief       This function parses the Bind_req or Unbind_req message.
   2637           *
   2638           * @param       inMsg  - incoming message (request)
   2639           * @param       pReq - place to put parsed information
   2640           *
   2641           * @return      none
   2642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E5..         MOV     A,?V0
   \   000002   2414         ADD     A,#0x14
   \   000004                REQUIRE ??Subroutine164_0
   \   000004                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2643          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine91 & 0xFFFF
   2645            uint8 *msg;
   2646          
   2647            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_382:
   \   000008   12....       LCALL   ?Subroutine126 & 0xFFFF
   2648            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_222:
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   EE           MOV     A,R6
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0
   \   000011   AB..         MOV     R3,?V1
   \   000013   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2649            msg += Z_EXTADDR_LEN;
   \   000016   EE           MOV     A,R6
   \   000017   2408         ADD     A,#0x8
   \   000019   FE           MOV     R6,A
   \   00001A   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00001C   0F           INC     R7
   2650            pReq->srcEndpoint = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ?Subroutine24 & 0xFFFF
   2651            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_33:
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine12 & 0xFFFF
   2652            msg += 2;
   \                     ??CrossCallReturnLabel_400:
   \   000038   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   00003A   0F           INC     R7
   2653            pReq->dstAddress.addrMode = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   E5..         MOV     A,?V0
   \   000043   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000046   E8           MOV     A,R0
   \   000047   12....       LCALL   ?Subroutine21 & 0xFFFF
   2654            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_28:
   \   00004A   240B         ADD     A,#0xb
   \   00004C   FA           MOV     R2,A
   \   00004D   E4           CLR     A
   \   00004E   35..         ADDC    A,?V1
   \   000050   FB           MOV     R3,A
   \   000051   7403         MOV     A,#0x3
   \   000053   68           XRL     A,R0
   \   000054   701D         JNZ     ??ZDO_ParseBindUnbindReq_2
   2655            {
   2656              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV     A,R6
   \   000057   FC           MOV     R4,A
   \   000058   EF           MOV     A,R7
   \   000059   FD           MOV     R5,A
   \   00005A   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2657              msg += Z_EXTADDR_LEN;
   2658              pReq->dstEndpoint = *msg;
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   12....       LCALL   ?Subroutine106 & 0xFFFF
   2659            }
   \                     ??CrossCallReturnLabel_352:
   \   00006F   D0E0         POP     A
   \   000071   8006         SJMP    ??ZDO_ParseBindUnbindReq_3
   2660            else
   2661            {
   2662              // copy group address
   2663              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000073   12....       LCALL   ?Subroutine72 & 0xFFFF
   2664            }
   \                     ??CrossCallReturnLabel_121:
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000079   F0           MOVX    @DPTR,A
   2665          }
   \   00007A   02....       LJMP    ??Subroutine146_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   8C..         MOV     ?V0,R4
   \   000002   8D..         MOV     ?V1,R5
   \   000004                REQUIRE ??Subroutine170_0
   \   000004                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine173_0
   \   000002                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine174_0
   \   000001                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EE           MOV     A,R6
   \   000005   2402         ADD     A,#0x2
   \   000007   FE           MOV     R6,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   E5..         MOV     A,?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET
   2666          
   2667          /*********************************************************************
   2668           * @fn      ZDO_ParseAddrRsp
   2669           *
   2670           * @brief   Turns the inMsg (incoming message) into the out parsed
   2671           *          structure.
   2672           *
   2673           * @param   inMsg - incoming message
   2674           *
   2675           * @return  pointer to parsed structures.  This structure was
   2676           *          allocated using osal_mem_alloc, so it must be freed
   2677           *          by the calling function [osal_mem_free()].
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2681            ZDO_NwkIEEEAddrResp_t *rsp;
   2682            uint8 *msg;
   2683            byte cnt = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   2684          
   2685            // Calculate the number of items in the list
   2686            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV     A,R2
   \   000009   2413         ADD     A,#0x13
   \   00000B   F8           MOV     R0,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   FE           MOV     R6,A
   \   000011   E9           MOV     A,R1
   \   000012   FF           MOV     R7,A
   \   000013   EA           MOV     A,R2
   \   000014   2410         ADD     A,#0x10
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   3B           ADDC    A,R3
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C3           CLR     C
   \   00001E   940C         SUBB    A,#0xc
   \   000020   4014         JC      ??ZDO_ParseAddrRsp_0
   2687            {
   2688              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C8           XCH     A,R0
   \   00002B   240B         ADD     A,#0xb
   \   00002D   F582         MOV     DPL,A
   \   00002F   E4           CLR     A
   \   000030   38           ADDC    A,R0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V2,A
   2689            }
   2690            else
   2691            {
   2692              cnt = 0;
   2693            }
   2694          
   2695            // Make buffer
   2696            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   A8..         MOV     R0,?V2
   \   000038   E8           MOV     A,R0
   \   000039   28           ADD     A,R0
   \   00003A   F8           MOV     R0,A
   \   00003B   E4           CLR     A
   \   00003C   33           RLC     A
   \   00003D   F9           MOV     R1,A
   \   00003E   E8           MOV     A,R0
   \   00003F   240D         ADD     A,#0xd
   \   000041   FA           MOV     R2,A
   \   000042   E4           CLR     A
   \   000043   39           ADDC    A,R1
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V0,R2
   \   00004A   8B..         MOV     ?V1,R3
   2697          
   2698            if ( rsp )
   \   00004C   EA           MOV     A,R2
   \   00004D   45..         ORL     A,?V1
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2699            {
   2700              msg = inMsg->asdu;
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   2701          
   2702              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_420:
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   12....       LCALL   ?Subroutine25 & 0xFFFF
   2703              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_35:
   \   000062   707F         JNZ     ??ZDO_ParseAddrRsp_1
   2704              {
   2705                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000064                ; Setup parameters for call to function sAddrExtCpy
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   EF           MOV     A,R7
   \   000067   FD           MOV     R5,A
   \   000068   EA           MOV     A,R2
   \   000069   2403         ADD     A,#0x3
   \   00006B   FA           MOV     R2,A
   \   00006C   E4           CLR     A
   \   00006D   35..         ADDC    A,?V1
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2706                msg += Z_EXTADDR_LEN;
   \   000073   EE           MOV     A,R6
   \   000074   2408         ADD     A,#0x8
   \   000076   FE           MOV     R6,A
   \   000077   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   000079   0F           INC     R7
   2707                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00007A   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00007D   85..82       MOV     DPL,?V0
   \   000080   85..83       MOV     DPH,?V1
   \   000083   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2708          
   2709                msg += 2;
   \                     ??CrossCallReturnLabel_402:
   \   000086   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   000088   0F           INC     R7
   2710                rsp->numAssocDevs = 0;
   \                     ??ZDO_ParseAddrRsp_3:
   \   000089   E5..         MOV     A,?V0
   \   00008B   240B         ADD     A,#0xb
   \   00008D   F8           MOV     R0,A
   \   00008E   E4           CLR     A
   \   00008F   35..         ADDC    A,?V1
   \   000091   F9           MOV     R1,A
   \   000092   E8           MOV     A,R0
   \   000093   FA           MOV     R2,A
   \   000094   E9           MOV     A,R1
   \   000095   FB           MOV     R3,A
   \   000096   8A82         MOV     DPL,R2
   \   000098   8B83         MOV     DPH,R3
   \   00009A   E4           CLR     A
   \   00009B   F0           MOVX    @DPTR,A
   2711          
   2712                // StartIndex field is only present if NumAssocDev field is non-zero.
   2713                if ( cnt > 0 )
   \   00009C   E5..         MOV     A,?V2
   \   00009E   6043         JZ      ??ZDO_ParseAddrRsp_1
   2714                {
   2715                  uint16 *pList = &(rsp->devList[0]);
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   240D         ADD     A,#0xd
   \   0000A4   F8           MOV     R0,A
   \   0000A5   E4           CLR     A
   \   0000A6   35..         ADDC    A,?V1
   \   0000A8   F9           MOV     R1,A
   2716                  byte n = cnt;
   2717          
   2718                  rsp->numAssocDevs = *msg++;
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   12....       LCALL   ?Subroutine10 & 0xFFFF
   2719                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_0:
   \   0000B5   C0E0         PUSH    A
   \   0000B7   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000BA   D0E0         POP     A
   \   0000BC   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000BF   85....       MOV     ?V3,?V2
   2720          
   2721                  while ( n != 0 )
   2722                  {
   2723                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FC           MOV     R4,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FB           MOV     R3,A
   \   0000CB   EC           MOV     A,R4
   \   0000CC   8882         MOV     DPL,R0
   \   0000CE   8983         MOV     DPH,R1
   \   0000D0   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000D3   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000D5   09           INC     R1
   2724                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000D6   EE           MOV     A,R6
   \   0000D7   2402         ADD     A,#0x2
   \   0000D9   FE           MOV     R6,A
   \   0000DA   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000DC   0F           INC     R7
   2725                    n--;
   2726                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000DD   15..         DEC     ?V3
   \   0000DF   E5..         MOV     A,?V3
   \   0000E1   70DF         JNZ     ??ZDO_ParseAddrRsp_4
   2727                }
   2728              }
   2729            }
   2730          
   2731            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000E3   AA..         MOV     R2,?V0
   \   0000E5   AB..         MOV     R3,?V1
   \   0000E7   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   2732          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine172_0
   \   000004                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E8           MOV     A,R0
   \   000005   2402         ADD     A,#0x2
   \   000007   F8           MOV     R0,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   22           RET
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDO_ParseNodeDescRsp
   2736           *
   2737           * @brief       This function parses the Node_Desc_rsp message.
   2738           *
   2739           * @param       inMsg - incoming message
   2740           * @param       pNDRsp - place to parse the message into
   2741           *
   2742           * @return      none
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   2746            uint8 *msg;
   2747          
   2748            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2749          
   2750            pNDRsp->status = *msg++;
   2751            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2752          
   2753            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_5:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2754            {
   2755              msg += 2;
   \   00000D   E8           MOV     A,R0
   \   00000E   2402         ADD     A,#0x2
   \   000010   F8           MOV     R0,A
   \   000011   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   000013   09           INC     R1
   2756              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   000014   EC           MOV     A,R4
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3D           ADDC    A,R5
   \   00001A   FB           MOV     R3,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   5407         ANL     A,#0x7
   \   000022   FE           MOV     R6,A
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   54F8         ANL     A,#0xf8
   \   00002A   4E           ORL     A,R6
   \   00002B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2757          
   2758              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_12:
   \   00002E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A2E3         MOV     C,0xE0 /* A   */.3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   92E3         MOV     0xE0 /* A   */.3,C
   \   000039   12....       LCALL   ?Subroutine15 & 0xFFFF
   2759              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_13:
   \   00003C   A2E4         MOV     C,0xE0 /* A   */.4
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A2E4         MOV     C,0xE0 /* A   */.4
   \   000044   E0           MOVX    A,@DPTR
   \   000045   92E4         MOV     0xE0 /* A   */.4,C
   \   000047   12....       LCALL   ?Subroutine38 & 0xFFFF
   2760          
   2761              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_60:
   \   00004A   08           INC     R0
   \   00004B   A983         MOV     R1,DPH
   2762              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   00004D   EC           MOV     A,R4
   \   00004E   2404         ADD     A,#0x4
   \   000050   0A           INC     R2
   \   000051   E4           CLR     A
   \   000052   3D           ADDC    A,R5
   \   000053   FB           MOV     R3,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   54F8         ANL     A,#0xf8
   \   000057   F5..         MOV     ?V0,A
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   5407         ANL     A,#0x7
   \   000060   45..         ORL     A,?V0
   \   000062   F5..         MOV     ?V0,A
   \   000064   12....       LCALL   ?Subroutine15 & 0xFFFF
   2763              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_14:
   \   000067   5407         ANL     A,#0x7
   \   000069   F5..         MOV     ?V1,A
   \   00006B   A3           INC     DPTR
   \   00006C   08           INC     R0
   \   00006D   A983         MOV     R1,DPH
   \   00006F   74F8         MOV     A,#-0x8
   \   000071   55..         ANL     A,?V0
   \   000073   45..         ORL     A,?V1
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   12....       LCALL   ?Subroutine15 & 0xFFFF
   2764              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   12....       LCALL   ?Subroutine22 & 0xFFFF
   2765              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_406:
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine18 & 0xFFFF
   2766              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_22:
   \   000094   12....       LCALL   ?Subroutine18 & 0xFFFF
   2767              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_23:
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine16 & 0xFFFF
   2768              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_17:
   \   00009B   12....       LCALL   ?Subroutine16 & 0xFFFF
   2769              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_18:
   \   00009E   12....       LCALL   ?Subroutine22 & 0xFFFF
   2770              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_407:
   \   0000A1   F5..         MOV     ?V0,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   EC           MOV     A,R4
   \   0000A7   240B         ADD     A,#0xb
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   E4           CLR     A
   \   0000AC   3D           ADDC    A,R5
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   12....       LCALL   ?Subroutine40 & 0xFFFF
   2771              msg += 2;
   \                     ??CrossCallReturnLabel_64:
   \   0000B4   5001         JNC     ??ZDO_ParseNodeDescRsp_2
   \   0000B6   09           INC     R1
   2772              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??ZDO_ParseNodeDescRsp_2:
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EC           MOV     A,R4
   \   0000BF   240D         ADD     A,#0xd
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E4           CLR     A
   \   0000C4   3D           ADDC    A,R5
   \   0000C5   F583         MOV     DPH,A
   \   0000C7   D0E0         POP     A
   \   0000C9   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   2773              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_408:
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EC           MOV     A,R4
   \   0000CF   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0000D2   3D           ADDC    A,R5
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   D0E0         POP     A
   \   0000D7   12....       LCALL   ?Subroutine38 & 0xFFFF
   2774              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_61:
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   EC           MOV     A,R4
   \   0000DE   12....       LCALL   ?Subroutine100 & 0xFFFF
   2775            }
   \                     ??CrossCallReturnLabel_181:
   \   0000E1   3D           ADDC    A,R5
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
   2776          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000E7   7F03         MOV     R7,#0x3
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine175_0
   \   000001                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_ParsePowerDescRsp
   2780           *
   2781           * @brief       This function parses the Power_Desc_rsp message.
   2782           *
   2783           * @param       inMsg  - incoming message
   2784           * @param       pNPRsp - place to parse the message into
   2785           *
   2786           * @return      none
   2787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F9           MOV     R1,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine156_0
   \   000005                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2788          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2790            uint8 *msg;
   2791          
   2792            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000008   12....       LCALL   ?Subroutine75 & 0xFFFF
   2793            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_127:
   \   00000B   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00000E   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000011   A3           INC     DPTR
   \   000012   AA82         MOV     R2,DPL
   \   000014   AB83         MOV     R3,DPH
   2794            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   EE           MOV     A,R6
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   2795          
   2796            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_294:
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7077         JNZ     ??CrossCallReturnLabel_306
   2797            {
   2798              msg += 2;
   \   00002B   EA           MOV     A,R2
   \   00002C   2402         ADD     A,#0x2
   \   00002E   FA           MOV     R2,A
   \   00002F   5001         JNC     ??ZDO_ParsePowerDescRsp_0
   \   000031   0B           INC     R3
   2799              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   000032   EC           MOV     A,R4
   \   000033   2403         ADD     A,#0x3
   \   000035   E4           CLR     A
   \   000036   3D           ADDC    A,R5
   \   000037   0C           INC     R4
   \   000038   0C           INC     R4
   \   000039   0C           INC     R4
   \   00003A   FD           MOV     R5,A
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   540F         ANL     A,#0xf
   \   000042   FE           MOV     R6,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FF           MOV     R7,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C4           SWAP    A
   \   00004C   540F         ANL     A,#0xf
   \   00004E   F5..         MOV     ?V0,A
   \   000050   75..00       MOV     ?V1,#0x0
   \   000053   7404         MOV     A,#0x4
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?S_SHL
   \   00005A   EE           MOV     A,R6
   \   00005B   45..         ORL     A,?V0
   \   00005D   FE           MOV     R6,A
   \   00005E   8C82         MOV     DPL,R4
   \   000060   8D83         MOV     DPH,R5
   \   000062   12....       LCALL   ?Subroutine31 & 0xFFFF
   2800              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_46:
   \   000065   A3           INC     DPTR
   \   000066   0A           INC     R2
   \   000067   AB83         MOV     R3,DPH
   \   000069   EE           MOV     A,R6
   \   00006A   54F0         ANL     A,#0xf0
   \   00006C   48           ORL     A,R0
   \   00006D   F8           MOV     R0,A
   \   00006E   EF           MOV     A,R7
   \   00006F   12....       LCALL   ?Subroutine28 & 0xFFFF
   2801              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_305:
   \   000072   E8           MOV     A,R0
   \   000073   FE           MOV     R6,A
   \   000074   E9           MOV     A,R1
   \   000075   540F         ANL     A,#0xf
   \   000077   FF           MOV     R7,A
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   C4           SWAP    A
   \   00007E   540F         ANL     A,#0xf
   \   000080   F5..         MOV     ?V0,A
   \   000082   740C         MOV     A,#0xc
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?S_SHL
   \   000089   EF           MOV     A,R7
   \   00008A   45..         ORL     A,?V1
   \   00008C   FF           MOV     R7,A
   \   00008D   8C82         MOV     DPL,R4
   \   00008F   8D83         MOV     DPH,R5
   \   000091   EE           MOV     A,R6
   \   000092   12....       LCALL   ?Subroutine31 & 0xFFFF
   2802              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2803            }
   \                     ??CrossCallReturnLabel_47:
   \   000095   EF           MOV     A,R7
   \   000096   54F0         ANL     A,#0xf0
   \   000098   FF           MOV     R7,A
   \   000099   E8           MOV     A,R0
   \   00009A   F9           MOV     R1,A
   \   00009B   EE           MOV     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   49           ORL     A,R1
   \   00009F   12....       LCALL   ?Subroutine28 & 0xFFFF
   2804          }
   \                     ??CrossCallReturnLabel_306:
   \   0000A2   02....       LJMP    ??Subroutine146_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   540F         ANL     A,#0xf
   \   000009   F8           MOV     R0,A
   \   00000A   22           RET
   2805          
   2806          /*********************************************************************
   2807           * @fn          ZDO_ParseSimpleDescRsp
   2808           *
   2809           * @brief       This function parse the Simple_Desc_rsp message.
   2810           *
   2811           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2812           *         in the SimpleDescriptionFormat_t structure are allocated
   2813           *         and the calling function needs to free [osal_msg_free()]
   2814           *         these buffers.
   2815           *
   2816           * @param       inMsg  - incoming message
   2817           * @param       pSimpleDescRsp - place to parse the message into
   2818           *
   2819           * @return      none
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2822          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2823            uint8 *msg;
   2824          
   2825            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2826            pSimpleDescRsp->status = *msg++;
   2827            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2828            msg += sizeof ( uint16 );
   2829            msg++; // Skip past the length field.
   2830          
   2831            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_6:
   \   000008   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2832            {
   2833              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV     A,R0
   \   000012   2403         ADD     A,#0x3
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay; Banked call to: ZDO_ParseSimpleDescBuf
   2834            }
   2835          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP    ?Subroutine2 & 0xFFFF
   2836          
   2837          /*********************************************************************
   2838           * @fn          ZDO_ParseEPListRsp
   2839           *
   2840           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2841           *
   2842           * @param       inMsg  - incoming message
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2848            ZDO_ActiveEndpointRsp_t *pRsp;
   2849            uint8 *msg;
   2850            uint8 Status;
   2851            uint8 cnt;
   2852          
   2853            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine70 & 0xFFFF
   2854            Status = *msg++;
   \                     ??CrossCallReturnLabel_117:
   \   000008   F5..         MOV     ?V5,A
   \   00000A   A3           INC     DPTR
   \   00000B   8582..       MOV     ?V2,DPL
   \   00000E   8583..       MOV     ?V3,DPH
   2855            cnt = msg[2];
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V4,A
   2856          
   2857            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000016   F582         MOV     DPL,A
   \   000018   8582..       MOV     ?V0,DPL
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV     ?V6,R2
   \   000026   8B..         MOV     ?V7,R3
   \   000028   AE..         MOV     R6,?V6
   \   00002A   AF..         MOV     R7,?V7
   2858            if ( pRsp )
   \   00002C   EE           MOV     A,R6
   \   00002D   4F           ORL     A,R7
   \   00002E   6032         JZ      ??ZDO_ParseEPListRsp_0
   2859            {
   2860              pRsp->status = Status;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E5..         MOV     A,?V5
   \   000036   12....       LCALL   ?Subroutine117 & 0xFFFF
   2861              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_211:
   \   000039   FA           MOV     R2,A
   \   00003A   12....       LCALL   ?Subroutine27 & 0xFFFF
   2862              msg += sizeof( uint16 );
   2863              pRsp->cnt = cnt;
   2864              msg++; // pass cnt
   2865              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_40:
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   85..82       MOV     DPL,?V2
   \   000040   85..83       MOV     DPH,?V3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A982         MOV     R1,DPL
   \   000048   AA83         MOV     R2,DPH
   \   00004A   89..         MOV     ?V4,R1
   \   00004C   8A..         MOV     ?V5,R2
   \   00004E   88..         MOV     ?V6,R0
   \   000050   78..         MOV     R0,#?V4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   12....       LCALL   ?Subroutine134 & 0xFFFF
   2866            }
   \                     ??CrossCallReturnLabel_416:
   \   000058   3F           ADDC    A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000062   02....       LJMP    ?Subroutine6 & 0xFFFF
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine176_0
   \   000004                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   AC..         MOV     R4,?V0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005                REQUIRE ??Subroutine177_0
   \   000005                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000006   85..82       MOV     DPL,?V2
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E5..         MOV     A,?V4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseServerDiscRsp
   2873           *
   2874           * @brief       Parse the Server_Discovery_rsp message.
   2875           *
   2876           * @param       inMsg - incoming message.
   2877           * @param       pRsp - place to put the parsed information.
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2882          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2883            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F583         MOV     DPH,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2884            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_16:
   \   00001E   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   2885          }
   \                     ??CrossCallReturnLabel_295:
   \   000030   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtLqiRsp
   2889           *
   2890           * @brief       This function parses the incoming Management
   2891           *              LQI response
   2892           *
   2893           * @param       inMsg - incoming message
   2894           *
   2895           * @return      a pointer to parsed response structure (NULL if not allocated).
   2896           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2897           *          by the calling function [osal_mem_free()].
   2898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   FC           MOV     R4,A
   \   000001   EF           MOV     A,R7
   \   000002   FD           MOV     R5,A
   \   000003   E5..         MOV     A,?V0
   \   000005                REQUIRE ??Subroutine160_0
   \   000005                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2899          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2901            ZDO_MgmtLqiRsp_t *pRsp;
   2902            uint8 status;
   2903            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   2904            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   2905            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine52 & 0xFFFF
   2909          
   2910            status = *msg++;
   2911            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_96:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_100
   2912            {
   2913              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine56 & 0xFFFF
   2914              startIndex = *msg++;
   2915              neighborLqiCount = *msg++;
   2916            }
   2917          
   2918            // Allocate a buffer big enough to handle the list.
   2919            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2920                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??CrossCallReturnLabel_100:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V4
   \   000018   75F01A       MOV     B,#0x1a
   \   00001B   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00001E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V2,R2
   \   000023   8B..         MOV     ?V3,R3
   2921            if ( pRsp )
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V3
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_0 & 0xFFFF
   2922            {
   2923              uint8 x;
   2924              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   00002D   12....       LCALL   ?Subroutine103 & 0xFFFF
   2925              pRsp->status = status;
   \                     ??CrossCallReturnLabel_185:
   \   000030   12....       LCALL   ?Subroutine13 & 0xFFFF
   2926              pRsp->neighborLqiEntries = neighborLqiEntries;
   2927              pRsp->startIndex = startIndex;
   2928              pRsp->neighborLqiCount = neighborLqiCount;
   2929          
   2930              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_7:
   \   000033   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2931              {
   2932                uint8 tmp;
   2933          
   2934                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   2935                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV     A,R6
   \   000041   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000044   35..         ADDC    A,?V1
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2936                msg += Z_EXTADDR_LEN;
   \   00004A   EE           MOV     A,R6
   \   00004B   2408         ADD     A,#0x8
   \   00004D   FE           MOV     R6,A
   \   00004E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_3
   \   000050   0F           INC     R7
   2937          
   2938                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   FC           MOV     R4,A
   \   000052   EF           MOV     A,R7
   \   000053   FD           MOV     R5,A
   \   000054   E5..         MOV     A,?V0
   \   000056   240A         ADD     A,#0xa
   \   000058   FA           MOV     R2,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V1
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2939                msg += Z_EXTADDR_LEN;
   \   000060   EE           MOV     A,R6
   \   000061   2408         ADD     A,#0x8
   \   000063   FE           MOV     R6,A
   \   000064   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000066   0F           INC     R7
   2940          
   2941                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000067   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00006A   F8           MOV     R0,A
   \   00006B   E5..         MOV     A,?V0
   \   00006D   2412         ADD     A,#0x12
   \   00006F   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000072   E8           MOV     A,R0
   \   000073   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   2942                msg += 2;
   \                     ??CrossCallReturnLabel_404:
   \   000076   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000078   0F           INC     R7
   2943          
   2944                tmp = *msg++;
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   AE82         MOV     R6,DPL
   \   000082   AF83         MOV     R7,DPH
   2945                pList->devType = tmp & 0x03;
   \   000084   7403         MOV     A,#0x3
   \   000086   58           ANL     A,R0
   \   000087   C0E0         PUSH    A
   \   000089   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00008C   D0E0         POP     A
   \   00008E   F0           MOVX    @DPTR,A
   2946                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   00008F   E8           MOV     A,R0
   \   000090   13           RRC     A
   \   000091   13           RRC     A
   \   000092   543F         ANL     A,#0x3f
   \   000094   5403         ANL     A,#0x3
   \   000096   C0E0         PUSH    A
   \   000098   E5..         MOV     A,?V0
   \   00009A   2415         ADD     A,#0x15
   \   00009C   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00009F   D0E0         POP     A
   \   0000A1   F0           MOVX    @DPTR,A
   2947                pList->relation = (tmp >> 4) & 0x07;
   \   0000A2   E8           MOV     A,R0
   \   0000A3   C4           SWAP    A
   \   0000A4   540F         ANL     A,#0xf
   \   0000A6   5407         ANL     A,#0x7
   \   0000A8   C0E0         PUSH    A
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   2416         ADD     A,#0x16
   \   0000AE   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   2948          
   2949                pList->permit = (*msg++) & 0x03;
   2950          
   2951                pList->depth = *msg++;
   2952          
   2953                pList->lqi = *msg++;
   2954                pList++;
   2955              }
   \                     ??CrossCallReturnLabel_346:
   \   0000B1   D0E0         POP     A
   \   0000B3   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   5403         ANL     A,#0x3
   \   0000B9   C0E0         PUSH    A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   2417         ADD     A,#0x17
   \   0000BF   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000C7   C0E0         PUSH    A
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   2418         ADD     A,#0x18
   \   0000CD   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   0000D0   D0E0         POP     A
   \   0000D2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D5   C0E0         PUSH    A
   \   0000D7   E5..         MOV     A,?V0
   \   0000D9   2419         ADD     A,#0x19
   \   0000DB   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0000DE   D0E0         POP     A
   \   0000E0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E3   241A         ADD     A,#0x1a
   \   0000E5   F5..         MOV     ?V0,A
   \   0000E7   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   0000E9   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000EB   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   0000ED   E5..         MOV     A,?V5
   \   0000EF   C3           CLR     C
   \   0000F0   95..         SUBB    A,?V4
   \   0000F2   5003         JNC     $+5
   \   0000F4   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2956            }
   2957          
   2958            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   0000F7                REQUIRE ?Subroutine9
   \   0000F7                ; // Fall through to label ?Subroutine9
   2959          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004   80..         SJMP    ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   0E           INC     R6
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000003   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000006   F5..         MOV     ?V7,A
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V4,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V6
   \   00000A   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E5..         MOV     A,?V5
   \   000011   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000014   E5..         MOV     A,?V4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   75..00       MOV     ?V5,#0x0
   \   00001A   22           RET
   2960          
   2961          /*********************************************************************
   2962           * @fn          ZDO_ParseMgmNwkDiscRsp
   2963           *
   2964           * @brief       This function parses the incoming Management
   2965           *              Network Discover response.
   2966           *
   2967           * @param       inMsg - incoming message
   2968           *
   2969           * @return      pointer to parsed response.  This structure was
   2970           *          allocated using osal_mem_alloc, so it must be freed
   2971           *          by the calling function [osal_mem_free()].
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2975            ZDO_MgmNwkDiscRsp_t *pRsp;
   2976            uint8 status;
   2977            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   2978            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   2979            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2980            uint8 *msg;
   2981          
   2982            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine52 & 0xFFFF
   2983            status = *msg++;
   2984          
   2985            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_97:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_101
   2986            {
   2987              networkCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine56 & 0xFFFF
   2988              startIndex = *msg++;
   2989              networkListCount = *msg++;
   2990            }
   2991          
   2992            // Allocate a buffer big enough to handle the list.
   2993            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2994                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??CrossCallReturnLabel_101:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   85....       MOV     ?V0,?V4
   \   000019   75..00       MOV     ?V1,#0x0
   \   00001C   7404         MOV     A,#0x4
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?S_SHL
   \   000023   E5..         MOV     A,?V0
   \   000025   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000028   35..         ADDC    A,?V1
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   2995            if ( pRsp )
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V3
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_0 & 0xFFFF
   2996            {
   2997              uint8 x;
   2998              mgmtNwkDiscItem_t *pList;
   2999          
   3000              pRsp->status = status;
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   E5..         MOV     A,?V7
   \   000040   F0           MOVX    @DPTR,A
   3001              pRsp->networkCount = networkCount;
   \   000041   A3           INC     DPTR
   \   000042   E5..         MOV     A,?V6
   \   000044   12....       LCALL   ?Subroutine44 & 0xFFFF
   3002              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_80:
   \   000047   E5..         MOV     A,?V5
   \   000049   12....       LCALL   ?Subroutine43 & 0xFFFF
   3003              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_77:
   \   00004C   E5..         MOV     A,?V4
   \   00004E   F0           MOVX    @DPTR,A
   3004              pList = pRsp->list;
   \   00004F   12....       LCALL   ?Subroutine103 & 0xFFFF
   3005          
   3006              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_186:
   \   000052   75..00       MOV     ?V5,#0x0
   \   000055   8071         SJMP    ??ZDO_ParseMgmNwkDiscRsp_1
   3007              {
   3008                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   000057                ; Setup parameters for call to function sAddrExtCpy
   \   000057   EE           MOV     A,R6
   \   000058   FC           MOV     R4,A
   \   000059   EF           MOV     A,R7
   \   00005A   FD           MOV     R5,A
   \   00005B   AA..         MOV     R2,?V0
   \   00005D   AB..         MOV     R3,?V1
   \   00005F   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   3009                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000062   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000065   A3           INC     DPTR
   \   000066   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   3010                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_296:
   \   000069   EE           MOV     A,R6
   \   00006A   2408         ADD     A,#0x8
   \   00006C   FE           MOV     R6,A
   \   00006D   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_3
   \   00006F   0F           INC     R7
   3011          
   3012                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000077   12....       LCALL   ?Subroutine25 & 0xFFFF
   3013                pList->stackProfile = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_36:
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   540F         ANL     A,#0xf
   \   00007D   C0E0         PUSH    A
   \   00007F   E5..         MOV     A,?V0
   \   000081   240B         ADD     A,#0xb
   \   000083   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   3014                pList->version = (*msg++ >> 4) & 0x0F;
   3015                pList->beaconOrder = (*msg) & 0x0F;
   3016                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   3017                pList->permitJoining = *msg++;
   3018                pList++;
   3019              }
   \                     ??CrossCallReturnLabel_350:
   \   000086   D0E0         POP     A
   \   000088   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00008B   C0E0         PUSH    A
   \   00008D   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000090   D0E0         POP     A
   \   000092   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000095   540F         ANL     A,#0xf
   \   000097   C0E0         PUSH    A
   \   000099   E5..         MOV     A,?V0
   \   00009B   240D         ADD     A,#0xd
   \   00009D   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   0000A0   D0E0         POP     A
   \   0000A2   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000A5   C0E0         PUSH    A
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000AC   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   0000AF   D0E0         POP     A
   \   0000B1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000B4   C0E0         PUSH    A
   \   0000B6   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000B9   D0E0         POP     A
   \   0000BB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000BE   2410         ADD     A,#0x10
   \   0000C0   F5..         MOV     ?V0,A
   \   0000C2   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000C4   05..         INC     ?V1
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000C6   05..         INC     ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000C8   E5..         MOV     A,?V5
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V4
   \   0000CD   4088         JC      ??ZDO_ParseMgmNwkDiscRsp_2
   3020            }
   3021          
   3022            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   0000CF   02....       LJMP    ?Subroutine9 & 0xFFFF
   3023          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C4           SWAP    A
   \   000005   540F         ANL     A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   85..83       MOV     DPH,?V1
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   3024          
   3025          /*********************************************************************
   3026           * @fn          ZDO_ParseMgmtRtgRsp
   3027           *
   3028           * @brief       This function parses the incoming Management
   3029           *              Routing response.
   3030           *
   3031           * @param       inMsg - incoming message
   3032           *
   3033           * @return      a pointer to parsed response structure (NULL if not allocated).
   3034           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3035           *          by the calling function [osal_mem_free()].
   3036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3037          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3039            ZDO_MgmtRtgRsp_t *pRsp;
   3040            uint8 status;
   3041            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3042            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3043            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3044            uint8 *msg;
   3045          
   3046            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine53 & 0xFFFF
   3047          
   3048            status = *msg++;
   \                     ??CrossCallReturnLabel_418:
   \   000011   F5..         MOV     ?V3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3049            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3050            {
   3051              rtgCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   3052              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_378:
   \   00001D   F5..         MOV     ?V1,A
   \   00001F   A3           INC     DPTR
   3053              rtgListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   3054            }
   3055          
   3056            // Allocate a buffer big enough to handle the list
   3057            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3058                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000031   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   3059            if ( pRsp )
   \   000034   EA           MOV     A,R2
   \   000035   4B           ORL     A,R3
   \   000036   6070         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3060            {
   3061              uint8 x;
   3062              rtgItem_t *pList = pRsp->list;
   \   000038   EA           MOV     A,R2
   \   000039   2404         ADD     A,#0x4
   \   00003B   F8           MOV     R0,A
   \   00003C   E4           CLR     A
   \   00003D   3B           ADDC    A,R3
   \   00003E   F9           MOV     R1,A
   3063              pRsp->status = status;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E5..         MOV     A,?V3
   \   000045   F0           MOVX    @DPTR,A
   3064              pRsp->rtgCount = rtgCount;
   \   000046   A3           INC     DPTR
   \   000047   E5..         MOV     A,?V2
   \   000049   12....       LCALL   ?Subroutine44 & 0xFFFF
   3065              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_81:
   \   00004C   E5..         MOV     A,?V1
   \   00004E   12....       LCALL   ?Subroutine43 & 0xFFFF
   3066              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_78:
   \   000051   E5..         MOV     A,?V0
   \   000053   F0           MOVX    @DPTR,A
   3067          
   3068              for ( x = 0; x < rtgListCount; x++ )
   \   000054   75..00       MOV     ?V1,#0x0
   \   000057   8048         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3069              {
   3070                uint8 statOpt;
   3071          
   3072                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000059   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00005C   12....       LCALL   ?Subroutine35 & 0xFFFF
   3073                msg += 2;
   \                     ??CrossCallReturnLabel_423:
   \   00005F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000061   0F           INC     R7
   3074                statOpt = *msg++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   AE82         MOV     R6,DPL
   \   00006B   AF83         MOV     R7,DPH
   3075                pList->status = (statOpt & 0x07);
   \   00006D   7407         MOV     A,#0x7
   \   00006F   5C           ANL     A,R4
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   F0           MOVX    @DPTR,A
   3076                pList->options = ((statOpt >> 3) & 0x07);
   \   00007A   EC           MOV     A,R4
   \   00007B   13           RRC     A
   \   00007C   13           RRC     A
   \   00007D   13           RRC     A
   \   00007E   541F         ANL     A,#0x1f
   \   000080   5407         ANL     A,#0x7
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   3077                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   00008D   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   12....       LCALL   ?Subroutine35 & 0xFFFF
   3078                msg += 2;
   \                     ??CrossCallReturnLabel_424:
   \   000095   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000097   0F           INC     R7
   3079                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000098   E8           MOV     A,R0
   \   000099   2407         ADD     A,#0x7
   \   00009B   F8           MOV     R0,A
   \   00009C   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   00009E   09           INC     R1
   3080              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   00009F   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000A1   E5..         MOV     A,?V1
   \   0000A3   C3           CLR     C
   \   0000A4   95..         SUBB    A,?V0
   \   0000A6   40B1         JC      ??ZDO_ParseMgmtRtgRsp_3
   3081            }
   3082          
   3083            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000A8   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   3084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000007   FD           MOV     R5,A
   \   000008   E5..         MOV     A,?V2
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000003                REQUIRE ??Subroutine178_0
   \   000003                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   ED           MOV     A,R5
   \   000003                REQUIRE ??Subroutine179_0
   \   000003                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2402         ADD     A,#0x2
   \   000004   FE           MOV     R6,A
   \   000005   22           RET
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParseMgmtBindRsp
   3088           *
   3089           * @brief       This function parses the incoming Management
   3090           *              Binding response.
   3091           *
   3092           * @param       inMsg - pointer to message to parse
   3093           *
   3094           * @return      a pointer to parsed response structure (NULL if not allocated).
   3095           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3096           *          by the calling function [osal_mem_free()].
   3097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3098          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3100            ZDO_MgmtBindRsp_t *pRsp;
   3101            uint8 status;
   3102            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   3103            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3104            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3105            uint8 *msg;
   3106          
   3107            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine70 & 0xFFFF
   3108          
   3109            status = *msg++;
   \                     ??CrossCallReturnLabel_118:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   8582..       MOV     ?V2,DPL
   \   000017   8583..       MOV     ?V3,DPH
   3110            if ( status == ZSuccess )
   \   00001A   7009         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3111            {
   3112              bindingCount = *msg++;
   \   00001C   12....       LCALL   ?Subroutine121 & 0xFFFF
   3113              startIndex = *msg++;
   3114              bindingListCount = *msg++;
   3115            }
   \                     ??CrossCallReturnLabel_218:
   \   00001F   8582..       MOV     ?V2,DPL
   \   000022   8583..       MOV     ?V3,DPH
   3116          
   3117            // Allocate a buffer big enough to handle the list
   3118            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3119                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   E5..         MOV     A,?V4
   \   000027   75F015       MOV     B,#0x15
   \   00002A   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V0,R2
   \   000032   8B..         MOV     ?V1,R3
   3120            if ( pRsp )
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V1
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3121            {
   3122              uint8 x;
   3123              apsBindingItem_t *pList = pRsp->list;
   \   00003C   EA           MOV     A,R2
   \   00003D   2404         ADD     A,#0x4
   \   00003F   FE           MOV     R6,A
   \   000040   E4           CLR     A
   \   000041   35..         ADDC    A,?V1
   \   000043   FF           MOV     R7,A
   3124              pRsp->status = status;
   \   000044   12....       LCALL   ?Subroutine13 & 0xFFFF
   3125              pRsp->bindingCount = bindingCount;
   3126              pRsp->startIndex = startIndex;
   3127              pRsp->bindingListCount = bindingListCount;
   3128          
   3129              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_8:
   \   000047   8013         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3130              {
   3131                osal_cpyExtAddr( pList->srcAddr, msg );
   3132                msg += Z_EXTADDR_LEN;
   3133                pList->srcEP = *msg++;
   3134          
   3135                // Get the Cluster ID
   3136          
   3137                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3138                msg += 2;
   3139                pList->dstAddr.addrMode = *msg++;
   3140                if ( pList->dstAddr.addrMode == Addr64Bit )
   3141                {
   3142                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3143                  msg += Z_EXTADDR_LEN;
   3144                  pList->dstEP = *msg++;
   3145                }
   3146                else
   3147                {
   3148                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   000049   12....       LCALL   ?Subroutine72 & 0xFFFF
   3149                  msg += 2;
   3150                }
   \                     ??CrossCallReturnLabel_122:
   \   00004C   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00004F   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000051   05..         INC     ?V3
   3151          
   3152                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000053   EE           MOV     A,R6
   \   000054   2415         ADD     A,#0x15
   \   000056   FE           MOV     R6,A
   \   000057   5001         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   000059   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00005A   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00005C   E5..         MOV     A,?V5
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V4
   \   000061   507C         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   AC..         MOV     R4,?V2
   \   000065   AD..         MOV     R5,?V3
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00006E   E5..         MOV     A,?V2
   \   000070   2408         ADD     A,#0x8
   \   000072   F5..         MOV     ?V2,A
   \   000074   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   000076   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000078   F582         MOV     DPL,A
   \   00007A   85..83       MOV     DPH,?V3
   \   00007D   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000097   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   000099   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00009B   F582         MOV     DPL,A
   \   00009D   85..83       MOV     DPH,?V3
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F8           MOV     R0,A
   \   0000A2   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   0000A5   E8           MOV     A,R0
   \   0000A6   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000A9   EE           MOV     A,R6
   \   0000AA   240B         ADD     A,#0xb
   \   0000AC   FA           MOV     R2,A
   \   0000AD   E4           CLR     A
   \   0000AE   3F           ADDC    A,R7
   \   0000AF   FB           MOV     R3,A
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   68           XRL     A,R0
   \   0000B3   7094         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   AC..         MOV     R4,?V2
   \   0000B7   AD..         MOV     R5,?V3
   \   0000B9   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000BC   E5..         MOV     A,?V2
   \   0000BE   2408         ADD     A,#0x8
   \   0000C0   F5..         MOV     ?V2,A
   \   0000C2   5002         JNC     ??ZDO_ParseMgmtBindRsp_8
   \   0000C4   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000C6   F582         MOV     DPL,A
   \   0000C8   85..83       MOV     DPH,?V3
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EE           MOV     A,R6
   \   0000CF   2414         ADD     A,#0x14
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   3F           ADDC    A,R7
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine29 & 0xFFFF
   3153              }
   3154            }
   \                     ??CrossCallReturnLabel_43:
   \   0000DC   02....       LJMP    ??ZDO_ParseMgmtBindRsp_4 & 0xFFFF
   3155          
   3156            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000DF   AA..         MOV     R2,?V0
   \   0000E1   AB..         MOV     R3,?V1
   \   0000E3   02....       LJMP    ?Subroutine7 & 0xFFFF
   3157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   22           RET
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseUserDescRsp
   3161           *
   3162           * @brief       This function parses the incoming User
   3163           *              Descriptor Response.
   3164           *
   3165           * @param       inMsg - incoming response message
   3166           *
   3167           * @return      a pointer to parsed response structure (NULL if not allocated).
   3168           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3169           *          by the calling function [osal_mem_free()].
   3170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3171          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3173            ZDO_UserDescRsp_t *pRsp;
   3174            uint8 *msg;
   3175            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   3176          
   3177            msg = inMsg->asdu;
   \   000008   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   00000B   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00000E   88..         MOV     ?V2,R0
   \   000010   89..         MOV     ?V3,R1
   3178          
   3179            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3180            {
   3181              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V4,A
   3182            }
   3183          
   3184            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   85..82       MOV     DPL,?V4
   \   000022   8582..       MOV     ?V0,DPL
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   E5..         MOV     A,?V0
   \   000027   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   FB           MOV     R3,A
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V6,R2
   \   000032   8B..         MOV     ?V7,R3
   \   000034   AE..         MOV     R6,?V6
   \   000036   AF..         MOV     R7,?V7
   3185            if ( pRsp )
   \   000038   EE           MOV     A,R6
   \   000039   4F           ORL     A,R7
   \   00003A   6033         JZ      ??ZDO_ParseUserDescRsp_1
   3186            {
   3187              pRsp->status = msg[0];
   \   00003C   85..82       MOV     DPL,?V2
   \   00003F   85..83       MOV     DPH,?V3
   \   000042   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000045   12....       LCALL   ?Subroutine135 & 0xFFFF
   3188              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_238:
   \   000048   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00004B   12....       LCALL   ?Subroutine27 & 0xFFFF
   3189              pRsp->length = descLen;
   3190              if ( descLen )
   \                     ??CrossCallReturnLabel_41:
   \   00004E   601F         JZ      ??ZDO_ParseUserDescRsp_1
   3191              {
   3192                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   E5..         MOV     A,?V2
   \   000052   2404         ADD     A,#0x4
   \   000054   F5..         MOV     ?V4,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V3
   \   000059   F5..         MOV     ?V5,A
   \   00005B   88..         MOV     ?V6,R0
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000062   12....       LCALL   ?Subroutine134 & 0xFFFF
   3193              }
   3194            }
   \                     ??CrossCallReturnLabel_417:
   \   000065   3F           ADDC    A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   3195          
   3196            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   00006F   02....       LJMP    ?Subroutine6 & 0xFFFF
   3197          }
   3198          
   3199          /*********************************************************************
   3200           * @fn          ZDO_ParseSimpleDescBuf
   3201           *
   3202           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3203           *
   3204           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3205           * @param       desc - SimpleDescriptionFormat_t *
   3206           *
   3207           *              This routine allocates storage for the cluster IDs because
   3208           *              they are 16-bit and need to be aligned to be properly processed.
   3209           *              This routine returns non-zero if an allocation fails.
   3210           *
   3211           *              NOTE: This means that the caller or user of the input structure
   3212           *                    is responsible for freeing the memory
   3213           *
   3214           * @return      0: success
   3215           *              1: failure due to malloc failure.
   3216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3217          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3219            uint8 num, i;
   3220          
   3221            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000014   12....       LCALL   ?Subroutine24 & 0xFFFF
   3222            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_34:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   3223            buf += 2;
   \                     ??CrossCallReturnLabel_403:
   \   00001E   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000020   0F           INC     R7
   3224            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000021   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000024   12....       LCALL   ?Subroutine12 & 0xFFFF
   3225            buf += 2;
   \                     ??CrossCallReturnLabel_401:
   \   000027   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000029   0F           INC     R7
   3226            desc->AppDevVer = *buf >> 4;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C4           SWAP    A
   \   000030   540F         ANL     A,#0xf
   3227          
   3228            desc->Reserved = 0;
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine37 & 0xFFFF
   3229            buf++;
   3230          
   3231            // move in input cluster list (if any). allocate aligned memory.
   3232            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_57:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V4,A
   \   000041   A3           INC     DPTR
   \   000042   0E           INC     R6
   \   000043   0E           INC     R6
   \   000044   AF83         MOV     R7,DPH
   \   000046   8C82         MOV     DPL,R4
   \   000048   8D83         MOV     DPH,R5
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
   3233            if ( num )
   \   000051   EC           MOV     A,R4
   \   000052   2407         ADD     A,#0x7
   \   000054   F5..         MOV     ?V2,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V1
   \   000059   F5..         MOV     ?V3,A
   \   00005B   E5..         MOV     A,?V4
   \   00005D   604A         JZ      ??ZDO_ParseSimpleDescBuf_2
   3234            {
   3235              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000062   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000065   85..82       MOV     DPL,?V2
   \   000068   85..83       MOV     DPH,?V3
   \   00006B   EA           MOV     A,R2
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   EB           MOV     A,R3
   \   00006F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   E8           MOV     A,R0
   \   000075   49           ORL     A,R1
   \   000076   7003         JNZ     $+5
   \   000078   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3236              {
   3237                // malloc failed. we're done.
   3238                return 1;
   3239              }
   3240              for (i=0; i<num; ++i)
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   8024         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3241              {
   3242                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F5..         MOV     ?V6,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   CA           XCH     A,R2
   \   00008B   FB           MOV     R3,A
   \   00008C   E5..         MOV     A,?V6
   \   00008E   2A           ADD     A,R2
   \   00008F   E4           CLR     A
   \   000090   3B           ADDC    A,R3
   \   000091   F5..         MOV     ?V7,A
   \   000093   12....       LCALL   ?Subroutine84 & 0xFFFF
   3243                buf += 2;
   3244              }
   \                     ??CrossCallReturnLabel_141:
   \   000096   E5..         MOV     A,?V6
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V7
   \   00009C   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00009F   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   0000A1   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000A2   0C           INC     R4
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0000A3   EC           MOV     A,R4
   \   0000A4   C3           CLR     C
   \   0000A5   95..         SUBB    A,?V4
   \   0000A7   40D6         JC      ??ZDO_ParseSimpleDescBuf_5
   3245            }
   3246          
   3247            // move in output cluster list (if any). allocate aligned memory.
   3248            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F5..         MOV     ?V4,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   AE82         MOV     R6,DPL
   \   0000B3   AF83         MOV     R7,DPH
   \   0000B5   85..82       MOV     DPL,?V0
   \   0000B8   85..83       MOV     DPH,?V1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   F0           MOVX    @DPTR,A
   3249            if (num)
   \   0000C5   6074         JZ      ??ZDO_ParseSimpleDescBuf_7
   3250            {
   3251              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000C7   E5..         MOV     A,?V0
   \   0000C9   240A         ADD     A,#0xa
   \   0000CB   F8           MOV     R0,A
   \   0000CC   E4           CLR     A
   \   0000CD   35..         ADDC    A,?V1
   \   0000CF   F9           MOV     R1,A
   \   0000D0   88..         MOV     ?V0,R0
   \   0000D2   89..         MOV     ?V1,R1
   \   0000D4                ; Setup parameters for call to function osal_mem_alloc
   \   0000D4   AA..         MOV     R2,?V4
   \   0000D6   EA           MOV     A,R2
   \   0000D7   2A           ADD     A,R2
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E4           CLR     A
   \   0000DA   33           RLC     A
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   0000F1   701C         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3252              {
   3253                // malloc failed. free input cluster list memory if there is any
   3254                if ( desc->pAppInClusterList != NULL )
   \   0000F3   85..82       MOV     DPL,?V2
   \   0000F6   85..83       MOV     DPH,?V3
   \   0000F9   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   0000FC   600D         JZ      ??ZDO_ParseSimpleDescBuf_3
   3255                {
   3256                  osal_mem_free(desc->pAppInClusterList);
   \   0000FE                ; Setup parameters for call to function osal_mem_free
   \   0000FE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   3257          
   3258                  desc->pAppInClusterList = NULL;
   \   000101   85..82       MOV     DPL,?V2
   \   000104   85..83       MOV     DPH,?V3
   \   000107   E4           CLR     A
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   F0           MOVX    @DPTR,A
   3259                }
   3260                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   00010B   7901         MOV     R1,#0x1
   \   00010D   802E         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3261              }
   3262              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   00010F   7C00         MOV     R4,#0x0
   \   000111   8022         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3263              {
   3264                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   12....       LCALL   ?Subroutine78 & 0xFFFF
   3265                buf += 2;
   3266              }
   \                     ??CrossCallReturnLabel_134:
   \   00011A   FA           MOV     R2,A
   \   00011B   E4           CLR     A
   \   00011C   CA           XCH     A,R2
   \   00011D   FB           MOV     R3,A
   \   00011E   E5..         MOV     A,?V0
   \   000120   2A           ADD     A,R2
   \   000121   E4           CLR     A
   \   000122   3B           ADDC    A,R3
   \   000123   F5..         MOV     ?V1,A
   \   000125   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000128   E5..         MOV     A,?V0
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   A3           INC     DPTR
   \   00012C   E5..         MOV     A,?V1
   \   00012E   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000131   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   000133   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000134   0C           INC     R4
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000135   EC           MOV     A,R4
   \   000136   C3           CLR     C
   \   000137   95..         SUBB    A,?V4
   \   000139   40D8         JC      ??ZDO_ParseSimpleDescBuf_11
   3267            }
   3268            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00013B   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00013D   02....       LJMP    ??Subroutine176_0 & 0xFFFF
   3269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EC           MOV     A,R4
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FB           MOV     R3,A
   \   000007   E8           MOV     A,R0
   \   000008   2A           ADD     A,R2
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   3B           ADDC    A,R3
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006                REQUIRE ??Subroutine182_0
   \   000006                ; // Fall through to label ??Subroutine182_0
   3270          
   3271          /*********************************************************************
   3272           * @fn          ZDO_ParseDeviceAnnce
   3273           *
   3274           * @brief       Parse a Device Announce message.
   3275           *
   3276           * @param       inMsg - Incoming message
   3277           * @param       pAnnce - place to put the parsed information
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine91 & 0xFFFF
   3283            uint8 *msg;
   3284          
   3285            // Parse incoming message
   3286            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_383:
   \   000008   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000B   FF           MOV     R7,A
   3287            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00000C   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00000F   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   3288            msg += 2;
   \                     ??CrossCallReturnLabel_405:
   \   000012   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   000014   0F           INC     R7
   3289            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000018   35..         ADDC    A,?V1
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   3290            msg += Z_EXTADDR_LEN;
   3291            pAnnce->capabilities = *msg;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00002D   F0           MOVX    @DPTR,A
   3292          }
   \   00002E   02....       LJMP    ??Subroutine146_0 & 0xFFFF
   3293          
   3294          /*********************************************************************
   3295           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3296           *
   3297           * @brief       This function handles parsing of the incoming Management
   3298           *              Network Update notify.
   3299           *
   3300           * @param       inMsg - incoming message (request)
   3301           *
   3302           * @return      a pointer to parsed response structure (NULL if not allocated).
   3303           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3304           *          by the calling function [osal_mem_free()].
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3308            uint8 status;
   3309            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3310            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3311            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3312            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V10,#0x0
   3313            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine53 & 0xFFFF
   3314            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3315          
   3316            status = *msg++;
   \                     ??CrossCallReturnLabel_419:
   \   000023   F5..         MOV     ?V11,A
   \   000025   A3           INC     DPTR
   \   000026   AE82         MOV     R6,DPL
   \   000028   AF83         MOV     R7,DPH
   3317            if ( status == ZSuccess )
   \   00002A   7043         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3318            {
   3319              scannedChannels = osal_build_uint32( msg, 4 );
   \   00002C                ; Setup parameters for call to function osal_build_uint32
   \   00002C   7904         MOV     R1,#0x4
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000035   8A..         MOV     ?V4,R2
   \   000037   8B..         MOV     ?V5,R3
   \   000039   8C..         MOV     ?V6,R4
   \   00003B   8D..         MOV     ?V7,R5
   3320              msg += 4;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000043   0F           INC     R7
   3321              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000044   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000047   F5..         MOV     ?V0,A
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   F5..         MOV     ?V1,A
   3322              msg += 2;
   \   00004D   EE           MOV     A,R6
   \   00004E   2402         ADD     A,#0x2
   \   000050   FE           MOV     R6,A
   \   000051   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000053   0F           INC     R7
   3323              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000054   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000057   F5..         MOV     ?V2,A
   \   000059   E4           CLR     A
   \   00005A   39           ADDC    A,R1
   \   00005B   F5..         MOV     ?V3,A
   3324              msg += 2;
   \   00005D   EE           MOV     A,R6
   \   00005E   2402         ADD     A,#0x2
   \   000060   FE           MOV     R6,A
   \   000061   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
   \   000063   0F           INC     R7
   3325              listCount = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V10,A
   \   00006B   A3           INC     DPTR
   \   00006C   0E           INC     R6
   \   00006D   AF83         MOV     R7,DPH
   3326            }
   3327          
   3328            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00006F   85..82       MOV     DPL,?V10
   \   000072   8582..       MOV     ?V8,DPL
   \   000075                ; Setup parameters for call to function osal_mem_alloc
   \   000075   E5..         MOV     A,?V8
   \   000077   240A         ADD     A,#0xa
   \   000079   FA           MOV     R2,A
   \   00007A   E4           CLR     A
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000081   8A..         MOV     ?V14,R2
   \   000083   8B..         MOV     ?V15,R3
   3329          
   3330            if ( pRsp )
   \   000085   EA           MOV     A,R2
   \   000086   45..         ORL     A,?V15
   \   000088   604F         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3331            {
   3332              pRsp->status = status;
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   E5..         MOV     A,?V11
   \   000090   F0           MOVX    @DPTR,A
   3333              pRsp->scannedChannels = scannedChannels;
   \   000091   A3           INC     DPTR
   \   000092   78..         MOV     R0,#?V4
   \   000094   12....       LCALL   ?L_MOV_TO_X
   3334              pRsp->totalTransmissions = totalTransmissions;
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E5..         MOV     A,?V1
   \   0000A6   12....       LCALL   ?Subroutine17 & 0xFFFF
   3335              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_20:
   \   0000A9   E5..         MOV     A,?V2
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E5..         MOV     A,?V3
   \   0000AF   12....       LCALL   ?Subroutine17 & 0xFFFF
   3336              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_21:
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E5..         MOV     A,?V10
   \   0000B6   F0           MOVX    @DPTR,A
   3337          
   3338              // Allocate a buffer big enough to handle the list.
   3339              if ( listCount > 0 )
   \   0000B7   6020         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3340              {
   3341                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000B9                ; Setup parameters for call to function osal_memcpy
   \   0000B9   8E..         MOV     ?V0,R6
   \   0000BB   8F..         MOV     ?V1,R7
   \   0000BD   75..00       MOV     ?V2,#0x0
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   AC..         MOV     R4,?V8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   EA           MOV     A,R2
   \   0000CA   240A         ADD     A,#0xa
   \   0000CC   FA           MOV     R2,A
   \   0000CD   E4           CLR     A
   \   0000CE   35..         ADDC    A,?V15
   \   0000D0   FB           MOV     R3,A
   \   0000D1   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   3342              }
   3343            }
   3344          
   3345            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_4:
   \   0000D9   AA..         MOV     R2,?V14
   \   0000DB   AB..         MOV     R3,?V15
   \   0000DD   02....       LJMP    ??Subroutine153_0 & 0xFFFF
   3346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine183_0
   \   000004                ; // Fall through to label ??Subroutine183_0
   3347          
   3348          /*********************************************************************
   3349           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3350           *
   3351           * @brief       This function handles parsing the incoming Management
   3352           *              Network Update request and starts the request (if needed).
   3353           *
   3354           * @param       inMsg - incoming message (request)
   3355           * @param       pReq - pointer to place to parse message to
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3361            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00000C   12....       LCALL   ?Subroutine68 & 0xFFFF
   3362          
   3363            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_116:
   \   00000F   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000012   EA           MOV     A,R2
   \   000013   F8           MOV     R0,A
   \   000014   EB           MOV     A,R3
   \   000015   F9           MOV     R1,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   ED           MOV     A,R5
   \   000019   FB           MOV     R3,A
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   12....       LCALL   ?XSTORE_R0123
   3364            msg += 4;
   \   000023   EE           MOV     A,R6
   \   000024   2404         ADD     A,#0x4
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   \   000029   0F           INC     R7
   3365            pReq->scanDuration = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   E5..         MOV     A,?V0
   \   000032   2404         ADD     A,#0x4
   \   000034   F8           MOV     R0,A
   \   000035   E4           CLR     A
   \   000036   35..         ADDC    A,?V1
   \   000038   F9           MOV     R1,A
   \   000039   EA           MOV     A,R2
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   12....       LCALL   ?Subroutine25 & 0xFFFF
   3366          
   3367            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_37:
   \   000041   C3           CLR     C
   \   000042   9406         SUBB    A,#0x6
   \   000044   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
   3368            {
   3369              // Request is to scan over channelMask
   3370              pReq->scanCount = *msg;
   \   000046   12....       LCALL   ?Subroutine136 & 0xFFFF
   3371            }
   \                     ??CrossCallReturnLabel_241:
   \   000049   801E         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
   3372            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00004B   74FE         MOV     A,#-0x2
   \   00004D   6A           XRL     A,R2
   \   00004E   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
   \   000050   74FF         MOV     A,#-0x1
   \   000052   6A           XRL     A,R2
   \   000053   7015         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_4
   3373            {
   3374              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3375              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000055   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000058   12....       LCALL   ?Subroutine36 & 0xFFFF
   3376          
   3377              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_55:
   \   00005B   8882         MOV     DPL,R0
   \   00005D   8983         MOV     DPH,R1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \   000061   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_4
   3378              {
   3379                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000063   12....       LCALL   ?Subroutine51 & 0xFFFF
   3380              }
   3381            }
   \                     ??CrossCallReturnLabel_95:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000069   F0           MOVX    @DPTR,A
   3382          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   00006A   02....       LJMP    ??Subroutine146_0 & 0xFFFF
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3386           *
   3387           * @brief       Parse the End_Device_Timeout_rsp message.
   3388           *
   3389           * @param       inMsg - incoming message.
   3390           * @param       pRsp - place to put the parsed information.
   3391           *
   3392           * @return      none
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3396            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000007   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   3397          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdoSendStateChangeMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceTimeoutRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp
   3398          
   3399          /*********************************************************************
   3400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      0     43   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     39   ZDO_ConvertOTAClusters
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     54   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     18   ZDO_ParseEndDeviceBindReq
        0     18   -> ZDO_ConvertOTAClusters
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     27   ZDO_ParseMgmtNwkUpdateNotify
        0     24   -> osal_build_uint32
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     11   ZDO_ParseNodeDescRsp
      1     10   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     41   ZDO_ProcessBindUnbindReq
        0     37   -> APSME_BindRequest
        0     36   -> APSME_LookupNwkAddr
        0     37   -> APSME_UnBindRequest
        0     36   -> NLME_GetExtAddr
        0     36   -> ZDApp_GetEmptyPendingBindReq
        0     36   -> ZDApp_NVUpdate
        0     36   -> ZDP_NwkAddrReq
        0     41   -> ZDP_SendData
        0     36   -> bindAddrIndexGet
        0     39   -> osal_memcpy
        0     40   -> osal_start_timerEx
        0     36   -> sAddrExtCmp
        0     36   -> sAddrExtCpy
      2     44   ZDO_ProcessDeviceAnnce
        0     44   -> AddrMgrEntryLookupExt
        0     44   -> AddrMgrEntryLookupNwk
        0     44   -> AddrMgrEntryUpdate
        0     44   -> AddrMgrExtAddrSet
        0     44   -> AssocChangeNwkAddr
        0     44   -> AssocGetWithExt
        0     44   -> AssocRemove
        0     44   -> NLME_CheckNewAddrSet
        0     44   -> NLME_GetCoordExtAddr
        0     44   -> NLME_GetCoordShortAddr
        0     44   -> NLME_GetExtAddr
        0     44   -> NLME_GetShortAddr
        2     44   -> NLME_GetShortAddr
        0     44   -> RTG_RemoveRtgEntry
        0     44   -> ZDApp_NVUpdate
        0     44   -> ZDO_ParseDeviceAnnce
        0     44   -> ZMacSetReq
        0     44   -> nwkNeighborRemoveAllStranded
        0     44   -> nwkNeighborUpdateNwkAddr
        0     44   -> osal_memset
        0     44   -> sAddrExtCmp
      0     20   ZDO_ProcessEndDeviceTimeoutReq
        0     15   -> AssocGetWithExt
        0     15   -> ZDApp_NVUpdate
        0     20   -> ZDP_SendData
      1     36   ZDO_ProcessMatchDescReq
        0     29   -> NLME_IsAddressBroadcast
        0     31   -> ZDO_AnyClusterMatches
        0     29   -> ZDO_ConvertOTAClusters
        0     36   -> ZDP_EPRsp
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
        0     29   -> osal_msg_allocate
        0     29   -> osal_msg_send
      0     29   ZDO_ProcessMgmtBindReq
        0     24   -> APSME_GetRequest
        0     29   -> ZDP_MgmtBindRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     66   ZDO_ProcessMgmtLqiReq
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AssocCount
        0     61   -> AssocFindDevice
        0     61   -> NLME_GetRequest
        0     66   -> ZDP_MgmtLqiRsp
        0     61   -> osal_mem_alloc
        0     61   -> osal_mem_free
        0     61   -> osal_memset
        0     61   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     26   ZDO_ProcessMgmtRtgReq
        0     21   -> NLME_GetRequest
        0     26   -> ZDP_MgmtRtgRsp
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      0     25   ZDO_StartDevice
        0     21   -> NLME_NetworkDiscoveryRequest
        0     21   -> NLME_OrphanJoinRequest
        0     21   -> nwk_ScanJoiningOrphan
        0     25   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for zdpExternalStateTaskID>
       6  ??NLME_PermitJoiningTimeout?relay
       1  ??Subroutine143_0
       9  ??Subroutine144_0
       3  ??Subroutine145_0
       5  ??Subroutine146_0
       5  ??Subroutine147_0
       6  ??Subroutine148_0
       4  ??Subroutine149_0
       3  ??Subroutine150_0
       5  ??Subroutine151_0
       8  ??Subroutine152_0
       5  ??Subroutine153_0
       6  ??Subroutine154_0
       6  ??Subroutine155_0
       1  ??Subroutine156_0
       5  ??Subroutine157_0
       4  ??Subroutine158_0
       4  ??Subroutine159_0
       5  ??Subroutine160_0
       5  ??Subroutine161_0
       5  ??Subroutine162_0
       8  ??Subroutine163_0
       3  ??Subroutine164_0
       5  ??Subroutine165_0
       5  ??Subroutine166_0
      10  ??Subroutine167_0
       5  ??Subroutine168_0
       6  ??Subroutine169_0
       4  ??Subroutine170_0
       6  ??Subroutine171_0
       4  ??Subroutine172_0
       1  ??Subroutine173_0
       9  ??Subroutine174_0
       8  ??Subroutine175_0
       5  ??Subroutine176_0
       5  ??Subroutine177_0
       4  ??Subroutine178_0
       6  ??Subroutine179_0
      11  ??Subroutine180_0
       6  ??Subroutine181_0
       9  ??Subroutine182_0
       6  ??Subroutine183_0
       6  ??ZDO_AnyClusterMatches?relay
       6  ??ZDO_BuildSimpleDescBuf?relay
       6  ??ZDO_ConvertOTAClusters?relay
       6  ??ZDO_EndDeviceTimeoutCB?relay
       6  ??ZDO_Init?relay
       6  ??ZDO_ParseAddrRsp?relay
       6  ??ZDO_ParseBindUnbindReq?relay
       6  ??ZDO_ParseDeviceAnnce?relay
       6  ??ZDO_ParseEPListRsp?relay
       6  ??ZDO_ParseEndDeviceBindReq?relay
       6  ??ZDO_ParseEndDeviceTimeoutRsp?relay
       6  ??ZDO_ParseMgmNwkDiscRsp?relay
       6  ??ZDO_ParseMgmtBindRsp?relay
       6  ??ZDO_ParseMgmtLqiRsp?relay
       6  ??ZDO_ParseMgmtNwkUpdateNotify?relay
       6  ??ZDO_ParseMgmtNwkUpdateReq?relay
       6  ??ZDO_ParseMgmtRtgRsp?relay
       6  ??ZDO_ParseNodeDescRsp?relay
       6  ??ZDO_ParsePowerDescRsp?relay
       6  ??ZDO_ParseServerDiscRsp?relay
       6  ??ZDO_ParseSimpleDescBuf?relay
       6  ??ZDO_ParseSimpleDescRsp?relay
       6  ??ZDO_ParseUserDescRsp?relay
       6  ??ZDO_ProcessActiveEPReq?relay
       6  ??ZDO_ProcessBindUnbindReq?relay
       6  ??ZDO_ProcessDeviceAnnce?relay
       6  ??ZDO_ProcessEndDeviceTimeoutReq?relay
       6  ??ZDO_ProcessMatchDescReq?relay
       6  ??ZDO_ProcessMgmtBindReq?relay
       6  ??ZDO_ProcessMgmtDirectJoinReq?relay
       6  ??ZDO_ProcessMgmtLeaveReq?relay
       6  ??ZDO_ProcessMgmtLqiReq?relay
       6  ??ZDO_ProcessMgmtNwkDiscReq?relay
       6  ??ZDO_ProcessMgmtPermitJoinReq?relay
       6  ??ZDO_ProcessMgmtRtgReq?relay
       6  ??ZDO_ProcessNodeDescReq?relay
       6  ??ZDO_ProcessPowerDescReq?relay
       6  ??ZDO_ProcessServerDiscReq?relay
       6  ??ZDO_ProcessSimpleDescReq?relay
       6  ??ZDO_ProcessUserDescReq?relay
       6  ??ZDO_ProcessUserDescSet?relay
       6  ??ZDO_StartDevice?relay
       6  ??ZDO_UpdateAddrManager?relay
       6  ??ZDO_UpdateNwkStatus?relay
       6  ??zdoSendStateChangeMsg?relay
       7  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine10
       4  ?Subroutine100
       5  ?Subroutine101
       9  ?Subroutine102
      11  ?Subroutine103
      12  ?Subroutine104
       3  ?Subroutine105
       4  ?Subroutine106
      10  ?Subroutine107
      20  ?Subroutine108
      10  ?Subroutine109
      38  ?Subroutine11
      11  ?Subroutine110
       9  ?Subroutine111
       1  ?Subroutine112
      11  ?Subroutine113
       6  ?Subroutine114
       6  ?Subroutine115
       7  ?Subroutine116
       5  ?Subroutine117
      13  ?Subroutine118
       5  ?Subroutine119
       2  ?Subroutine12
       7  ?Subroutine120
      13  ?Subroutine121
       4  ?Subroutine122
      11  ?Subroutine123
       5  ?Subroutine124
       5  ?Subroutine125
       6  ?Subroutine126
       6  ?Subroutine127
       2  ?Subroutine128
       7  ?Subroutine129
      27  ?Subroutine13
      11  ?Subroutine130
       6  ?Subroutine131
       5  ?Subroutine132
       1  ?Subroutine133
       5  ?Subroutine134
       8  ?Subroutine135
      13  ?Subroutine136
      11  ?Subroutine137
       1  ?Subroutine138
       6  ?Subroutine139
       4  ?Subroutine14
       9  ?Subroutine140
       1  ?Subroutine141
       6  ?Subroutine142
       7  ?Subroutine15
       6  ?Subroutine16
       8  ?Subroutine17
       4  ?Subroutine18
       7  ?Subroutine19
       5  ?Subroutine2
      12  ?Subroutine20
       6  ?Subroutine21
       1  ?Subroutine22
      17  ?Subroutine23
       7  ?Subroutine24
       4  ?Subroutine25
      24  ?Subroutine26
      21  ?Subroutine27
       5  ?Subroutine28
       4  ?Subroutine29
       3  ?Subroutine3
      18  ?Subroutine30
      11  ?Subroutine31
       6  ?Subroutine32
      12  ?Subroutine33
      10  ?Subroutine34
       3  ?Subroutine35
       4  ?Subroutine36
       5  ?Subroutine37
       4  ?Subroutine38
       8  ?Subroutine39
       3  ?Subroutine4
       9  ?Subroutine40
       6  ?Subroutine41
       9  ?Subroutine42
       4  ?Subroutine43
       6  ?Subroutine44
       4  ?Subroutine45
       6  ?Subroutine46
      17  ?Subroutine47
      30  ?Subroutine48
       4  ?Subroutine49
       3  ?Subroutine5
      16  ?Subroutine50
      21  ?Subroutine51
      14  ?Subroutine52
       3  ?Subroutine53
       4  ?Subroutine54
       8  ?Subroutine55
       9  ?Subroutine56
      16  ?Subroutine57
       2  ?Subroutine58
      11  ?Subroutine59
       4  ?Subroutine6
       7  ?Subroutine60
       4  ?Subroutine61
       2  ?Subroutine62
      13  ?Subroutine63
      11  ?Subroutine64
      15  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
      12  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
      13  ?Subroutine70
      12  ?Subroutine71
      11  ?Subroutine72
      11  ?Subroutine73
       7  ?Subroutine74
      12  ?Subroutine75
       4  ?Subroutine76
      11  ?Subroutine77
       6  ?Subroutine78
       8  ?Subroutine79
       5  ?Subroutine8
       6  ?Subroutine80
       6  ?Subroutine81
       6  ?Subroutine82
      14  ?Subroutine83
      16  ?Subroutine84
       7  ?Subroutine85
       3  ?Subroutine86
      10  ?Subroutine87
      12  ?Subroutine88
      12  ?Subroutine89
       6  ?Subroutine9
       7  ?Subroutine90
       4  ?Subroutine91
       4  ?Subroutine92
      14  ?Subroutine93
       4  ?Subroutine94
       8  ?Subroutine95
       5  ?Subroutine96
       6  ?Subroutine97
      25  ?Subroutine98
      10  ?Subroutine99
       3  NLME_PermitJoiningTimeout
      52  ZDOBuildBuf
      94  ZDO_AnyClusterMatches
     184  ZDO_BuildSimpleDescBuf
      67  ZDO_ConvertOTAClusters
       2  ZDO_EDBind
     196  ZDO_EndDeviceTimeoutCB
      28  ZDO_Init
     234  ZDO_ParseAddrRsp
     125  ZDO_ParseBindUnbindReq
      49  ZDO_ParseDeviceAnnce
     101  ZDO_ParseEPListRsp
     291  ZDO_ParseEndDeviceBindReq
      21  ZDO_ParseEndDeviceTimeoutRsp
     210  ZDO_ParseMgmNwkDiscRsp
     230  ZDO_ParseMgmtBindRsp
     247  ZDO_ParseMgmtLqiRsp
     224  ZDO_ParseMgmtNwkUpdateNotify
     109  ZDO_ParseMgmtNwkUpdateReq
     171  ZDO_ParseMgmtRtgRsp
     236  ZDO_ParseNodeDescRsp
     165  ZDO_ParsePowerDescRsp
      51  ZDO_ParseServerDiscRsp
     320  ZDO_ParseSimpleDescBuf
      30  ZDO_ParseSimpleDescRsp
     114  ZDO_ParseUserDescRsp
     117  ZDO_ProcessActiveEPReq
     590  ZDO_ProcessBindUnbindReq
     536  ZDO_ProcessDeviceAnnce
     259  ZDO_ProcessEndDeviceTimeoutReq
     975  ZDO_ProcessMatchDescReq
     266  ZDO_ProcessMgmtBindReq
      81  ZDO_ProcessMgmtDirectJoinReq
     198  ZDO_ProcessMgmtLeaveReq
     731  ZDO_ProcessMgmtLqiReq
     141  ZDO_ProcessMgmtNwkDiscReq
      83  ZDO_ProcessMgmtPermitJoinReq
     255  ZDO_ProcessMgmtRtgReq
      71  ZDO_ProcessNodeDescReq
      71  ZDO_ProcessPowerDescReq
      78  ZDO_ProcessServerDiscReq
     150  ZDO_ProcessSimpleDescReq
     196  ZDO_ProcessUserDescReq
     303  ZDO_ProcessUserDescSet
     205  ZDO_StartDevice
      51  ZDO_UpdateAddrManager
      82  ZDO_UpdateNwkStatus
       4  __Constant_3e8
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt
      73  zdoSendStateChangeMsg
       2  zdpExternalStateTaskID

 
 10 430 bytes in segment BANKED_CODE
    276 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 10 708 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     64 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             30/Oct/2015  18:14:24 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\ZclWriteRspCmd.cpp         #
#    Command line       =  -f C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\..\Tools\f8wRouter.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Tools\f8wZCL.cfg                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\Components\stack\zcl\ZclWriteRspCmd.cpp -D      #
#                          SECURE=0 -D OSC32K_CRYSTAL_INSTALLED=FALSE -D      #
#                          HAL_KEY=FALSE -D HAL_BOARD_CC2530EB_REV17 -D       #
#                          TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D       #
#                          MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE   #
#                          -D ZCL_REPORT -D FEATURE_SYSTEM_STATS -lC          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ -lA                     #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ --diag_suppress         #
#                          Pe001,Pa010 -o C:\Users\paolo\Documents\GitHub\zpo #
#                          wermeter\firmware\CC2530DB\RouterEB\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\paolo\Documents\GitHub\zpowermeter\fir #
#                          mware\CC2530DB\ -I C:\Users\paolo\Documents\GitHub #
#                          \zpowermeter\firmware\CC2530DB\..\Source\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\ha\ -I                       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Source\zmain\ -I                    #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\include\ -I          #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\high_level\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\paolo\Documents\GitHub\zpower #
#                          meter\firmware\CC2530DB\..\Components\mt\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\osal\include\ -I         #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\saddr\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\services\sdata\ -I       #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\af\ -I             #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\nwk\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sapi\ -I           #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sec\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\sys\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zcl\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\stack\zdo\ -I            #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\ -I                 #
#                          C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\..\Components\zmac\f8w\ -Ohz --eec++   #
#    List file          =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\List\ZclWriteRspCmd.lst       #
#    Object file        =  C:\Users\paolo\Documents\GitHub\zpowermeter\firmwa #
#                          re\CC2530DB\RouterEB\Obj\ZclWriteRspCmd.r51        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\paolo\Documents\GitHub\zpowermeter\firmware\Components\stack\zcl\ZclWriteRspCmd.cpp
      1          #include "ZclWriteRspCmd.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant BufferData::BufferData(BufferData const &)
   \                     ??BufferData:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   2402         ADD     A,#0x2
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3D           ADDC    A,R5
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   EE           MOV     A,R6
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   EF           MOV     A,R7
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000021   EE           MOV     A,R6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EF           MOV     A,R7
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   E4           CLR     A
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant BufferData::BufferData(uint16)
   \                     ??BufferData_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D                ; Setup parameters for call to function operator new[](unsigned int)
   \   00000D   AA..         MOV     R2,?V0
   \   00000F   AB..         MOV     R3,?V1
   \   000011   12....       LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   EA           MOV     A,R2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   EB           MOV     A,R3
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E5..         MOV     A,?V0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E5..         MOV     A,?V1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   7F02         MOV     R7,#0x2
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant BufferData::~BufferData()
   \                     `?~BufferData`:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator delete(void *)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   `??operator delete?relay`; Banked call to: operator delete(void *)
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant bool BufferData::isValid()
   \                     ??isValid:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   6004         JZ      ??isValid_1
   \   000013   D2F0         SETB    B.0
   \   000015   8002         SJMP    ??isValid_2
   \                     ??isValid_1:
   \   000017   C2F0         CLR     B.0
   \                     ??isValid_2:
   \   000019   A2F0         MOV     C,B.0
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   02....       LJMP    ?BRET
      2          #include "OSAL_Memory.h"
      3          #include "ZCL_StatusCode.h"
      4          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      5          ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t * pCmd){
   \                     ??ZclWriteRspCmd:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
      6          	uint16 dataLen = pCmd->dataLen;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
      7          	uint8 *pBuf = pCmd->pData;
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V1,A
      8          	if (dataLen==1){
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   8582..       MOV     ?V2,DPL
   \   000029   8583..       MOV     ?V3,DPH
   \   00002C   7401         MOV     A,#0x1
   \   00002E   68           XRL     A,R0
   \   00002F   49           ORL     A,R1
   \   000030   7A03         MOV     R2,#0x3
   \   000032   7B00         MOV     R3,#0x0
   \   000034   7026         JNZ     ??ZclWriteRspCmd_2
      9          		attrList = new ZclWriteRspStatus[1];
   \   000036                ; Setup parameters for call to function operator new[](unsigned int)
   \   000036   12....       LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
   \   000039   85..82       MOV     DPL,?V2
   \   00003C   85..83       MOV     DPH,?V3
   \   00003F   EA           MOV     A,R2
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   EB           MOV     A,R3
   \   000043   F0           MOVX    @DPTR,A
     10          		attrList->status = *pBuf;
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   12....       LCALL   ?Subroutine3 & 0xFFFF
     11          	} else {
   \                     ??CrossCallReturnLabel_2:
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   02....       LJMP    ??ZclWriteRspCmd_3 & 0xFFFF
     12          		numAttr = dataLen/3;
   \                     ??ZclWriteRspCmd_2:
   \   00005C   12....       LCALL   ?US_DIV_MOD
   \   00005F   E8           MOV     A,R0
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   F0           MOVX    @DPTR,A
     13          		attrList = new ZclWriteRspStatus[numAttr];
   \   000065                ; Setup parameters for call to function operator new[](unsigned int)
   \   000065   75F003       MOV     B,#0x3
   \   000068   A4           MUL     AB
   \   000069   FA           MOV     R2,A
   \   00006A   ABF0         MOV     R3,B
   \   00006C   12....       LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
   \   00006F   85..82       MOV     DPL,?V2
   \   000072   85..83       MOV     DPH,?V3
   \   000075   EA           MOV     A,R2
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EB           MOV     A,R3
   \   000079   F0           MOVX    @DPTR,A
     14          		for(uint8 i=0; i < numAttr; i++){
   \   00007A   75..00       MOV     ?V4,#0x0
   \   00007D   805D         SJMP    ??ZclWriteRspCmd_4
     15          			attrList[i].status = *pBuf++;
   \                     ??ZclWriteRspCmd_5:
   \   00007F   E5..         MOV     A,?V4
   \   000081   75F003       MOV     B,#0x3
   \   000084   A4           MUL     AB
   \   000085   F8           MOV     R0,A
   \   000086   A9F0         MOV     R1,B
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   85..82       MOV     DPL,?V2
   \   000094   85..83       MOV     DPH,?V3
   \   000097   E0           MOVX    A,@DPTR
   \   000098   28           ADD     A,R0
   \   000099   FA           MOV     R2,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   39           ADDC    A,R1
   \   00009D   8A82         MOV     DPL,R2
   \   00009F   F583         MOV     DPH,A
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   85..82       MOV     DPL,?V0
   \   0000A7   85..83       MOV     DPH,?V1
   \   0000AA   A3           INC     DPTR
   \   0000AB   8582..       MOV     ?V0,DPL
   \   0000AE   8583..       MOV     ?V1,DPH
     16                  	attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FC           MOV     R4,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   FA           MOV     R2,A
   \   0000B8   85..82       MOV     DPL,?V2
   \   0000BB   85..83       MOV     DPH,?V3
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   28           ADD     A,R0
   \   0000C0   FC           MOV     R4,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   39           ADDC    A,R1
   \   0000C4   8C82         MOV     DPL,R4
   \   0000C6   F583         MOV     DPH,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   EA           MOV     A,R2
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   EB           MOV     A,R3
   \   0000CD   F0           MOVX    @DPTR,A
     17                  	pBuf += 2;
   \   0000CE   E5..         MOV     A,?V0
   \   0000D0   2402         ADD     A,#0x2
   \   0000D2   F5..         MOV     ?V0,A
   \   0000D4   5002         JNC     ??ZclWriteRspCmd_6
   \   0000D6   05..         INC     ?V1
     18          		}
   \                     ??ZclWriteRspCmd_6:
   \   0000D8   05..         INC     ?V4
   \   0000DA   05..         INC     ?V4
   \                     ??ZclWriteRspCmd_4:
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E5..         MOV     A,?V4
   \   0000E4   C3           CLR     C
   \   0000E5   98           SUBB    A,R0
   \   0000E6   4097         JC      ??ZclWriteRspCmd_5
     19          	}
     20          }
   \                     ??ZclWriteRspCmd_3:
   \   0000E8   EE           MOV     A,R6
   \   0000E9   FA           MOV     R2,A
   \   0000EA   EF           MOV     A,R7
   \   0000EB   FB           MOV     R3,A
   \   0000EC                REQUIRE ?Subroutine1
   \   0000EC                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     21          
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd * writeCmd) {
   \                     ??ZclWriteRspCmd_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
     24          	attrList = new ZclWriteRspStatus[writeCmd->numAttr];
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   8582..       MOV     ?V2,DPL
   \   000015   8583..       MOV     ?V3,DPH
   \   000018                ; Setup parameters for call to function operator new[](unsigned int)
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   75F003       MOV     B,#0x3
   \   000020   A4           MUL     AB
   \   000021   FA           MOV     R2,A
   \   000022   ABF0         MOV     R3,B
   \   000024   12....       LCALL   `??operator new[]?relay`; Banked call to: operator new[](unsigned int)
   \   000027   85..82       MOV     DPL,?V2
   \   00002A   85..83       MOV     DPH,?V3
   \   00002D   EA           MOV     A,R2
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   EB           MOV     A,R3
   \   000031   F0           MOVX    @DPTR,A
     25          	if (attrList != NULL){
   \   000032   85..82       MOV     DPL,?V2
   \   000035   85..83       MOV     DPH,?V3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   E8           MOV     A,R0
   \   00003E   49           ORL     A,R1
   \   00003F   600C         JZ      ??ZclWriteRspCmd_7
     26          		numAttr = writeCmd->numAttr;
   \   000041   85..82       MOV     DPL,?V0
   \   000044   85..83       MOV     DPH,?V1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   F0           MOVX    @DPTR,A
     27          	}
     28          }
   \                     ??ZclWriteRspCmd_7:
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   7F04         MOV     R7,#0x4
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          BufferData ZclWriteRspCmd::getBufferData() {
   \                     ??getBufferData:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
     31          	if ( numAttr == 1 && attrList[0].status == ZCL_STATUS_SUCCESS ) {
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   A3           INC     DPTR
   \   000017   8582..       MOV     ?V0,DPL
   \   00001A   8583..       MOV     ?V1,DPH
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   7401         MOV     A,#0x1
   \   000025   68           XRL     A,R0
   \   000026   7031         JNZ     ??getBufferData_1
   \   000028   85..82       MOV     DPL,?V0
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F583         MOV     DPH,A
   \   000034   8982         MOV     DPL,R1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   7020         JNZ     ??getBufferData_1
     32              	BufferData buffer(1);
   \   000039                ; Setup parameters for call to function BufferData::BufferData(uint16)
   \   000039   7C01         MOV     R4,#0x1
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   AA..         MOV     R2,?XSP + 0
   \   00003F   AB..         MOV     R3,?XSP + 1
   \   000041   12....       LCALL   ??BufferData?relay   ; Banked call to: BufferData::BufferData(uint16)
     33          		if (buffer.isValid()){
   \   000044                ; Setup parameters for call to function BufferData::isValid()
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   ??isValid?relay      ; Banked call to: BufferData::isValid()
   \   00004B   5075         JNC     ??getBufferData_2
     34          			*buffer.data = ZCL_STATUS_SUCCESS;
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine3 & 0xFFFF
     35          		}
   \                     ??CrossCallReturnLabel_3:
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
     36          		return buffer;
   \                     ??getBufferData_3:
   \   000057                ; Setup parameters for call to function BufferData::BufferData(BufferData const &)
   \   000057   8069         SJMP    ??getBufferData_2
     37              } else {
     38          		uint16 dataLen = numAttr * ( 1 + 2 ); // status + attribute id
     39          		BufferData buffer(dataLen);
   \                     ??getBufferData_1:
   \   000059                ; Setup parameters for call to function BufferData::BufferData(uint16)
   \   000059   E8           MOV     A,R0
   \   00005A   75F003       MOV     B,#0x3
   \   00005D   A4           MUL     AB
   \   00005E   FC           MOV     R4,A
   \   00005F   ADF0         MOV     R5,B
   \   000061   AA..         MOV     R2,?XSP + 0
   \   000063   AB..         MOV     R3,?XSP + 1
   \   000065   12....       LCALL   ??BufferData?relay   ; Banked call to: BufferData::BufferData(uint16)
     40          
     41          		if ( buffer.isValid()){
   \   000068                ; Setup parameters for call to function BufferData::isValid()
   \   000068   AA..         MOV     R2,?XSP + 0
   \   00006A   AB..         MOV     R3,?XSP + 1
   \   00006C   12....       LCALL   ??isValid?relay      ; Banked call to: BufferData::isValid()
   \   00006F   5051         JNC     ??getBufferData_2
     42          			uint8 i;
     43          			uint8 *pBuf = buffer.data;
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F8           MOV     R0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
     44          			ZclWriteRspStatus * writeStatus = attrList;
   \   00007B   85..82       MOV     DPL,?V0
   \   00007E   85..83       MOV     DPH,?V1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FB           MOV     R3,A
     45              		for ( i = 0; i < numAttr; i++ ){
   \   000086   75..00       MOV     ?V4,#0x0
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   A3           INC     DPTR
   \   00008E   AC82         MOV     R4,DPL
   \   000090   AD83         MOV     R5,DPH
   \   000092   8020         SJMP    ??getBufferData_4
     46                			*pBuf++ = writeStatus->status;
   \                     ??getBufferData_5:
   \   000094   8A82         MOV     DPL,R2
   \   000096   8B83         MOV     DPH,R3
   \   000098   E0           MOVX    A,@DPTR
   \   000099   8882         MOV     DPL,R0
   \   00009B   8983         MOV     DPH,R1
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   A882         MOV     R0,DPL
   \   0000A1   A983         MOV     R1,DPH
     47          	      		*pBuf++ = LO_UINT16( writeStatus->attrID );
   \   0000A3   8C82         MOV     DPL,R4
   \   0000A5   8D83         MOV     DPH,R5
   \   0000A7   12....       LCALL   ?Subroutine2 & 0xFFFF
     48              	  		*pBuf++ = HI_UINT16( writeStatus->attrID );
   \                     ??CrossCallReturnLabel_0:
   \   0000AA   8C82         MOV     DPL,R4
   \   0000AC   8D83         MOV     DPH,R5
   \   0000AE   A3           INC     DPTR
   \   0000AF   12....       LCALL   ?Subroutine2 & 0xFFFF
     49              		}
   \                     ??CrossCallReturnLabel_1:
   \   0000B2   05..         INC     ?V4
   \                     ??getBufferData_4:
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F5..         MOV     ?V0,A
   \   0000BB   E5..         MOV     A,?V4
   \   0000BD   C3           CLR     C
   \   0000BE   95..         SUBB    A,?V0
   \   0000C0   40D2         JC      ??getBufferData_5
     50          		}
     51          		return buffer;
   \                     ??getBufferData_2:
   \   0000C2                ; Setup parameters for call to function BufferData::BufferData(BufferData const &)
   \   0000C2   AC..         MOV     R4,?XSP + 0
   \   0000C4   AD..         MOV     R5,?XSP + 1
   \   0000C6   AA..         MOV     R2,?V2
   \   0000C8   AB..         MOV     R3,?V3
   \   0000CA   12....       LCALL   ??BufferData?relay_1 ; Banked call to: BufferData::BufferData(BufferData const &)
   \   0000CD                ; Setup parameters for call to function BufferData::~BufferData()
   \   0000CD   AA..         MOV     R2,?XSP + 0
   \   0000CF   AB..         MOV     R3,?XSP + 1
   \   0000D1   12....       LCALL   `?~BufferData?relay` ; Banked call to: BufferData::~BufferData()
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   02....       LJMP    ?Subroutine1 & 0xFFFF
     52          	}
     53          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??new ZclWriteRspCmd?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    `??new ZclWriteRspCmd`

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??new ZclWriteRspCmd?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    `??new ZclWriteRspCmd_1`

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZclWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ZclWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZclWriteRspCmd?relay_1:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ZclWriteRspCmd_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getBufferData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??getBufferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BufferData?relay_1:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??BufferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BufferData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??BufferData_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `?~BufferData?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    `?~BufferData`

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??isValid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??isValid

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant ZclWriteRspCmd &ZclWriteRspCmd::new ZclWriteRspCmd(zclParseCmd_t *)
   \                     `??new ZclWriteRspCmd`:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function operator new(unsigned int)
   \   000009   7A03         MOV     R2,#0x3
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??operator new?relay`; Banked call to: operator new(unsigned int)
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6009         JZ      `??new ZclWriteRspCmd_2`
   \   000014                ; Setup parameters for call to function ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t *)
   \   000014   EE           MOV     A,R6
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   12....       LCALL   ??ZclWriteRspCmd?relay; Banked call to: ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t *)
   \   00001B   8004         SJMP    `??new ZclWriteRspCmd_3`
   \                     `??new ZclWriteRspCmd_2`:
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B00         MOV     R3,#0x0
   \                     `??new ZclWriteRspCmd_3`:
   \   000021                REQUIRE ?Subroutine0
   \   000021                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant ZclWriteRspCmd &ZclWriteRspCmd::new ZclWriteRspCmd(ZclWriteCmd *)
   \                     `??new ZclWriteRspCmd_1`:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function operator new(unsigned int)
   \   000009   7A03         MOV     R2,#0x3
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??operator new?relay`; Banked call to: operator new(unsigned int)
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6009         JZ      `??new ZclWriteRspCmd_4`
   \   000014                ; Setup parameters for call to function ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd *)
   \   000014   EE           MOV     A,R6
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   12....       LCALL   ??ZclWriteRspCmd?relay_1; Banked call to: ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd *)
   \   00001B   8004         SJMP    `??new ZclWriteRspCmd_5`
   \                     `??new ZclWriteRspCmd_4`:
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B00         MOV     R3,#0x0
   \                     `??new ZclWriteRspCmd_5`:
   \   000021   80..         SJMP    ?Subroutine0

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     26   BufferData::BufferData(BufferData const &)
      0     27   BufferData::BufferData(uint16)
        0     10   -> operator new[](unsigned int)
      2     17   BufferData::isValid()
      2     17   BufferData::~BufferData()
        2      0   -> operator delete(void *)
      1     22   ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd *)
        0     12   -> operator new[](unsigned int)
      1     23   ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t *)
        0     13   -> operator new[](unsigned int)
      1     17   ZclWriteRspCmd::getBufferData()
        0     17   -> BufferData::BufferData(BufferData const &)
        0     17   -> BufferData::BufferData(uint16)
        0     17   -> BufferData::isValid()
        0     17   -> BufferData::~BufferData()
      0     10   ZclWriteRspCmd::new ZclWriteRspCmd(ZclWriteCmd *)
        0     10   -> ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd *)
        0     10   -> operator new(unsigned int)
      0     10   ZclWriteRspCmd::new ZclWriteRspCmd(zclParseCmd_t *)
        0     10   -> ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t *)
        0     10   -> operator new(unsigned int)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??BufferData?relay
       6  ??BufferData?relay_1
       6  ??ZclWriteRspCmd?relay
       6  ??ZclWriteRspCmd?relay_1
       6  ??getBufferData?relay
       6  ??isValid?relay
       6  ??new ZclWriteRspCmd?relay
       6  ??new ZclWriteRspCmd?relay_1
       5  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine2
       9  ?Subroutine3
      10  ?Subroutine4
       6  ?~BufferData?relay
      58  BufferData::BufferData(BufferData const &)
      51  BufferData::BufferData(uint16)
      34  BufferData::isValid()
      25  BufferData::~BufferData()
      86  ZclWriteRspCmd::ZclWriteRspCmd(ZclWriteCmd *)
     236  ZclWriteRspCmd::ZclWriteRspCmd(zclParseCmd_t *)
     220  ZclWriteRspCmd::getBufferData()
      35  ZclWriteRspCmd::new ZclWriteRspCmd(ZclWriteCmd *)
      33  ZclWriteRspCmd::new ZclWriteRspCmd(zclParseCmd_t *)

 
 818 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
 
 680 bytes of CODE memory (+ 192 bytes shared)

Errors: none
Warnings: none
